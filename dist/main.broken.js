/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("CitationExtractor", [], factory);
	else if(typeof exports === 'object')
		exports["CitationExtractor"] = factory();
	else
		root["CitationExtractor"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./app/extract_citation.js":
/*!*********************************!*\
  !*** ./app/extract_citation.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getCitationFor\": () => (/* binding */ getCitationFor)\n/* harmony export */ });\n/* harmony import */ var _extension_site_ancestry_core_ancestry_extract_data_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../extension/site/ancestry/core/ancestry_extract_data.mjs */ \"./extension/site/ancestry/core/ancestry_extract_data.mjs\");\n/* harmony import */ var _extension_site_ancestry_core_ancestry_generalize_data_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../extension/site/ancestry/core/ancestry_generalize_data.mjs */ \"./extension/site/ancestry/core/ancestry_generalize_data.mjs\");\n/* harmony import */ var _extension_site_ancestry_core_ancestry_build_citation_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../extension/site/ancestry/core/ancestry_build_citation.mjs */ \"./extension/site/ancestry/core/ancestry_build_citation.mjs\");\n/* harmony import */ var _extension_base_core_options_options_database_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../extension/base/core/options/options_database.mjs */ \"./extension/base/core/options/options_database.mjs\");\n/* harmony import */ var _extension_site_ancestry_browser_ancestry_fetch_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../extension/site/ancestry/browser/ancestry_fetch.mjs */ \"./extension/site/ancestry/browser/ancestry_fetch.mjs\");\n/* harmony import */ var _extension_site_fg_core_fg_extract_data_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../extension/site/fg/core/fg_extract_data.mjs */ \"./extension/site/fg/core/fg_extract_data.mjs\");\n/* harmony import */ var _extension_site_fg_core_fg_generalize_data_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../extension/site/fg/core/fg_generalize_data.mjs */ \"./extension/site/fg/core/fg_generalize_data.mjs\");\n/* harmony import */ var _extension_site_fg_core_fg_build_citation_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../extension/site/fg/core/fg_build_citation.mjs */ \"./extension/site/fg/core/fg_build_citation.mjs\");\n/* harmony import */ var _extension_site_fs_core_fs_extract_data_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../extension/site/fs/core/fs_extract_data.mjs */ \"./extension/site/fs/core/fs_extract_data.mjs\");\n/* harmony import */ var _extension_site_fs_core_fs_generalize_data_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../extension/site/fs/core/fs_generalize_data.mjs */ \"./extension/site/fs/core/fs_generalize_data.mjs\");\n/* harmony import */ var _extension_site_fs_core_fs_build_citation_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../extension/site/fs/core/fs_build_citation.mjs */ \"./extension/site/fs/core/fs_build_citation.mjs\");\n/* harmony import */ var _extension_site_fs_browser_fs_content_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../extension/site/fs/browser/fs_content.js */ \"./extension/site/fs/browser/fs_content.js\");\n/*\r\nMIT License\r\n\r\nCopyright (c) 2022 Thomas W Shanley\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/\r\n\r\n// provides functional interface for selected capabilites in the extension \r\n// code when (webpack) packed as a module.\r\n\r\n\r\n\r\n\r\n// import { buildHouseholdTable } from \"../extension/base/core/table_builder.mjs\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//import { buildHouseholdTable } from \"../../extension/base/core/table_builder.mjs\";\r\n\r\n\r\n//async function getThisCite(doc, input, fnEx, fnGd, fnBc, fnSd) {\r\n//    input.extractedData = fnEx(doc, doc.URL);\r\n\r\n//    if (fnSd) {\r\n//        let rezult = await fnSd(input.extractedData);\r\n//        if (rezult.success) {\r\n//            input.sharingDataObj = rezult.dataObj;\r\n//        }\r\n//    }\r\n\r\n//    input.generalizedData = fnGd(input);\r\n\r\n//    console.log(\"to call buildCitation with input:\");\r\n//    console.log(input);\r\n//    let rv = fnBc(input);\r\n//    return rv;\r\n//}\r\n\r\n////////////// test out using cloned code (bleah\r\nasync function fsDoFetchLocalCopy() {\r\n    console.log('doFetch, document.location is: ' + document.location);\r\n\r\n    let fetchType = \"record\";\r\n\r\n    let fetchUrl = document.location.href;\r\n    //console.log('doFetch, fetchUrl is: ' + fetchUrl);\r\n\r\n    if (fetchUrl.indexOf(\"/search/record/results?\") != -1) {\r\n        //console.log('doFetch, looks like a search page, checking sidebar');\r\n        // this looks like a search page, see if a record is selected in sidebar\r\n        let viewRecord = document.querySelector(\"a[data-testid=viewSimilarRecordButton]\");\r\n        if (viewRecord) {\r\n            //console.log(\"found view record\");\r\n            let text = viewRecord.textContent;\r\n            let viewRecordUrl = viewRecord.getAttribute(\"href\");\r\n            if (viewRecordUrl) {\r\n                // strangely on firefox viewRecordUrl can be something like:\r\n                // /ark:/61903/1:1:J39Y-3Q6\r\n                // while on Chrome it is:\r\n                // https://www.familysearch.org/ark:/61903/1:1:J39Y-3Q6\r\n                // Recently (25 May 2022) on Chrome it looks like:\r\n                // /search/ark:/61903/1:1:QVJP-4T6V\r\n\r\n                //console.log(\"viewRecordUrl = \" + viewRecordUrl);\r\n\r\n                if (viewRecordUrl.startsWith(\"/ark:/\") || viewRecordUrl.startsWith(\"/search/ark:/\")) {\r\n                    viewRecordUrl = \"https://www.familysearch.org\" + viewRecordUrl;\r\n                }\r\n\r\n                fetchUrl = viewRecordUrl;\r\n            }\r\n        }\r\n    } else if (fetchUrl.startsWith(\"https://www.familysearch.org/tree/person/details/\")) {\r\n        let personId = fetchUrl.replace(\"https://www.familysearch.org/tree/person/details/\", \"\");\r\n        let slashOrQueryIndex = personId.search(/[/?]/);\r\n        if (slashOrQueryIndex != -1) {\r\n            personId = personId.substring(0, slashOrQueryIndex);\r\n        }\r\n\r\n        // API URL looks like this: https://api.familysearch.org/platform/tree/persons/K2F9-F5Z\r\n        if (personId) {\r\n            fetchUrl = \"https://www.familysearch.org/platform/tree/persons/\" + personId + \"?relatives\";\r\n            fetchType = \"person\";\r\n        }\r\n    }\r\n\r\n    // This seems like a recent change on FamilySearch (noticed on 25 May 2022).\r\n    // Sometimes the URL contains \"/search/\" and this stops the fetch working\r\n    if (fetchUrl.indexOf(\"www.familysearch.org/search/ark:/\") != -1) {\r\n        fetchUrl = fetchUrl.replace(\"www.familysearch.org/search/ark:/\", \"www.familysearch.org/ark:/\");\r\n    }\r\n\r\n    //console.log('doFetch, fetchUrl is: ' + fetchUrl);\r\n\r\n    let fetchOptionsHeaders = {\r\n        accept: \"application/x-gedcomx-v1+json, application/json\",\r\n        \"accept-language\": \"en\",\r\n        from: \"fsSearch.record.getGedcomX@familysearch.org\",\r\n        \"sec-fetch-dest\": \"empty\",\r\n        \"sec-fetch-mode\": \"cors\",\r\n        \"sec-fetch-site\": \"same-origin\",\r\n    };\r\n\r\n    let fetchOptions = {\r\n        headers: fetchOptionsHeaders,\r\n        referrerPolicy: \"strict-origin-when-cross-origin\",\r\n        body: null,\r\n        method: \"GET\",\r\n        mode: \"cors\",\r\n        credentials: \"include\",\r\n    };\r\n\r\n    try {\r\n        let response = await fetch(fetchUrl, fetchOptions);\r\n\r\n        //console.log('doFetch, response.status is: ' + response.status);\r\n\r\n        if (response.status !== 200) {\r\n            console.log(\"Looks like there was a problem. Status Code: \" + response.status);\r\n            return {\r\n                success: false,\r\n                errorCondition: \"FetchError\",\r\n                status: response.status,\r\n            };\r\n        }\r\n\r\n        let jsonData = await response.text();\r\n\r\n        //console.log(\"doFetch: response text is:\");\r\n        //console.log(jsonData);\r\n\r\n        if (!jsonData || jsonData[0] != `{`) {\r\n            console.log(\"The response text does not look like JSON\");\r\n            //console.log(jsonData);\r\n            return { success: false, errorCondition: \"NotJSON\" };\r\n        }\r\n\r\n        const dataObj = JSON.parse(jsonData);\r\n\r\n        //console.log(\"dataObj is:\");\r\n        //console.log(dataObj);\r\n\r\n        return { success: true, dataObj: dataObj, fetchType: fetchType };\r\n    } catch (error) {\r\n        console.log(\"fetch failed, error is:\");\r\n        console.log(error);\r\n        return { success: false };\r\n    }\r\n}\r\n////////////// test out using cloned code (bleah\r\n\r\n\r\n\r\n\r\n// this serves for operations that use the two-arg\r\n// extractData() function for the site\r\n// including ancestry where it will also do sharing data\r\nasync function execExtractData(doc, input, fnEx, fnSd) {\r\n    input.extractedData = fnEx(doc, doc.URL);\r\n\r\n    if (fnSd) {\r\n        let rezult = await fnSd(input.extractedData);\r\n        if (rezult.success) {\r\n            input.sharingDataObj = rezult.dataObj;\r\n        }\r\n    }\r\n}\r\n\r\n// this serves for all sites that use standard generalize()\r\n// and buid() functions on the inoput data\r\nfunction generalizeAndBuild(input, fnGd, fnBc) {\r\n    console.log(\"generalizeAndBuild() to call generalizeData with input:\");\r\n    console.log(input);\r\n    input.generalizedData = fnGd(input);\r\n\r\n    console.log(\"generalizeAndBuild() to call buildCitation with input:\");\r\n    console.log(input);\r\n    let rv = fnBc(input);\r\n    return rv;\r\n}\r\n\r\n// if all three steps are standard this will serve\r\nasync function getThisCite(doc, input, fnEx, fnGd, fnBc, fnSd) {\r\n    await execExtractData(doc, input, fnEx, fnSd);\r\n    return generalizeAndBuild(input, fnGd, fnBc);\r\n}\r\n\r\nasync function getCitationFor(doc, options = null) {\r\n    console.log(\"Enter getCitationFor: \" + doc.URL);\r\n    if (options) {\r\n        console.log(\"options:\");\r\n        console.log(options);\r\n    }\r\n\r\n    let domain = (new URL(doc.URL));\r\n    let hostname = domain.hostname;\r\n    let path = domain.pathname;\r\n\r\n    let input = [];\r\n    input.runDate = new Date();\r\n    input.type = \"inline\";\r\n    input.options = (0,_extension_base_core_options_options_database_mjs__WEBPACK_IMPORTED_MODULE_3__.getDefaultOptions)();\r\n    if (options) {\r\n        // apply the option overrides\r\n        for (var i = 0; i < options.length; i += 2) {\r\n            if (options[i] === \"type\")\r\n                input.type = options[i + 1];\r\n            else\r\n                input.options[options[i]] = options[i + 1];\r\n        }\r\n    }\r\n\r\n    let rv = {url: doc.URL, message: \"unrecognized hostname \" + hostname, citation: null};\r\n    //let rv[\"message\"] = \"unrecognized hostname \" + hostname;\r\n\r\n    let citationObject = null;\r\n    if (hostname.includes(\"ancestry.\")) {\r\n        citationObject = await getThisCite(doc, input, _extension_site_ancestry_core_ancestry_extract_data_mjs__WEBPACK_IMPORTED_MODULE_0__.extractData, _extension_site_ancestry_core_ancestry_generalize_data_mjs__WEBPACK_IMPORTED_MODULE_1__.generalizeData, _extension_site_ancestry_core_ancestry_build_citation_mjs__WEBPACK_IMPORTED_MODULE_2__.buildCitation, _extension_site_ancestry_browser_ancestry_fetch_mjs__WEBPACK_IMPORTED_MODULE_4__.fetchAncestrySharingDataObj);\r\n    } else if (hostname.includes(\"findagrave.\")) {\r\n        citationObject = await getThisCite(doc, input, _extension_site_fg_core_fg_extract_data_mjs__WEBPACK_IMPORTED_MODULE_5__.extractData, _extension_site_fg_core_fg_generalize_data_mjs__WEBPACK_IMPORTED_MODULE_6__.generalizeData, _extension_site_fg_core_fg_build_citation_mjs__WEBPACK_IMPORTED_MODULE_7__.buildCitation, null);\r\n    } else if (hostname.includes(\"familysearch.org\")) {\r\n        if (path.startsWith(\"/ark:/61903/3:1:\")) {\r\n            console.log(\"familysearch image\");\r\n            citationObject = await getThisCite(doc, input, _extension_site_fs_core_fs_extract_data_mjs__WEBPACK_IMPORTED_MODULE_8__.extractData, _extension_site_fs_core_fs_generalize_data_mjs__WEBPACK_IMPORTED_MODULE_9__.generalizeData, _extension_site_fs_core_fs_build_citation_mjs__WEBPACK_IMPORTED_MODULE_10__.buildCitation, null);\r\n        } else if (path.startsWith(\"/ark:/61903/1:1:\")) {\r\n            console.log(\"familysearch record\");\r\n            // todo: NO NO NO not the same call signature! whut?\r\n            //function extractDataFromFetch(document, dataObj, fetchType, options) {}\r\n            //     return { success: true, dataObj: dataObj, fetchType: fetchType };\r\n            let fetchResult = await (0,_extension_site_fs_browser_fs_content_js__WEBPACK_IMPORTED_MODULE_11__.doFetch)();\r\n            if (!fetchResult.success) {\r\n                console.log(\"familysearch doFetch failed\");\r\n                rv.message += \"; fetch failed\";\r\n                return rv;\r\n            }\r\n            console.log(\"result from doFetch:\");\r\n            console.log(fetchResult);\r\n            //input.pageType = fetchResult.fetchType; // ????\r\n            input.extractedData = (0,_extension_site_fs_core_fs_extract_data_mjs__WEBPACK_IMPORTED_MODULE_8__.extractDataFromFetch)(doc, fetchResult.dataObj, fetchResult.fetchType, options);\r\n            console.log(\"extractedData from fsFetchEx:\");\r\n            console.log(input.extractedData);\r\n            citationObject = generalizeAndBuild(input, _extension_site_fs_core_fs_generalize_data_mjs__WEBPACK_IMPORTED_MODULE_9__.generalizeData, _extension_site_fs_core_fs_build_citation_mjs__WEBPACK_IMPORTED_MODULE_10__.buildCitation);\r\n        }\r\n    }\r\n\r\n    if (citationObject == null) {\r\n        console.log(rv.message);\r\n        return rv;\r\n    }\r\n\r\n    rv.citation = citationObject.citation;\r\n    rv.message = \"returning citation of type: \" + citationObject.type;\r\n    console.log(\"getCitationFor returns:\");\r\n    console.log(rv);\r\n    return rv;\r\n}\r\n\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/extract_citation.js\n");

/***/ }),

/***/ "./extension/site/fs/browser/fs_content.js":
/*!*************************************************!*\
  !*** ./extension/site/fs/browser/fs_content.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"doFetch\": () => (/* binding */ doFetch)\n/* harmony export */ });\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\nasync function doFetch() {\n  console.log('doFetch, document.location is: ' + document.location);\n\n  let fetchType = \"record\";\n\n  let fetchUrl = document.location.href;\n  //console.log('doFetch, fetchUrl is: ' + fetchUrl);\n\n  if (fetchUrl.indexOf(\"/search/record/results?\") != -1) {\n    //console.log('doFetch, looks like a search page, checking sidebar');\n    // this looks like a search page, see if a record is selected in sidebar\n    let viewRecord = document.querySelector(\"a[data-testid=viewSimilarRecordButton]\");\n    if (viewRecord) {\n      //console.log(\"found view record\");\n      let text = viewRecord.textContent;\n      let viewRecordUrl = viewRecord.getAttribute(\"href\");\n      if (viewRecordUrl) {\n        // strangely on firefox viewRecordUrl can be something like:\n        // /ark:/61903/1:1:J39Y-3Q6\n        // while on Chrome it is:\n        // https://www.familysearch.org/ark:/61903/1:1:J39Y-3Q6\n        // Recently (25 May 2022) on Chrome it looks like:\n        // /search/ark:/61903/1:1:QVJP-4T6V\n\n        //console.log(\"viewRecordUrl = \" + viewRecordUrl);\n\n        if (viewRecordUrl.startsWith(\"/ark:/\") || viewRecordUrl.startsWith(\"/search/ark:/\")) {\n          viewRecordUrl = \"https://www.familysearch.org\" + viewRecordUrl;\n        }\n\n        fetchUrl = viewRecordUrl;\n      }\n    }\n  } else if (fetchUrl.startsWith(\"https://www.familysearch.org/tree/person/details/\")) {\n    let personId = fetchUrl.replace(\"https://www.familysearch.org/tree/person/details/\", \"\");\n    let slashOrQueryIndex = personId.search(/[/?]/);\n    if (slashOrQueryIndex != -1) {\n      personId = personId.substring(0, slashOrQueryIndex);\n    }\n\n    // API URL looks like this: https://api.familysearch.org/platform/tree/persons/K2F9-F5Z\n    if (personId) {\n      fetchUrl = \"https://www.familysearch.org/platform/tree/persons/\" + personId + \"?relatives\";\n      fetchType = \"person\";\n    }\n  }\n\n  // This seems like a recent change on FamilySearch (noticed on 25 May 2022).\n  // Sometimes the URL contains \"/search/\" and this stops the fetch working\n  if (fetchUrl.indexOf(\"www.familysearch.org/search/ark:/\") != -1) {\n    fetchUrl = fetchUrl.replace(\"www.familysearch.org/search/ark:/\", \"www.familysearch.org/ark:/\");\n  }\n\n  //console.log('doFetch, fetchUrl is: ' + fetchUrl);\n\n  let fetchOptionsHeaders = {\n    accept: \"application/x-gedcomx-v1+json, application/json\",\n    \"accept-language\": \"en\",\n    from: \"fsSearch.record.getGedcomX@familysearch.org\",\n    \"sec-fetch-dest\": \"empty\",\n    \"sec-fetch-mode\": \"cors\",\n    \"sec-fetch-site\": \"same-origin\",\n  };\n\n  let fetchOptions = {\n    headers: fetchOptionsHeaders,\n    referrerPolicy: \"strict-origin-when-cross-origin\",\n    body: null,\n    method: \"GET\",\n    mode: \"cors\",\n    credentials: \"include\",\n  };\n\n  try {\n    let response = await fetch(fetchUrl, fetchOptions);\n\n    //console.log('doFetch, response.status is: ' + response.status);\n\n    if (response.status !== 200) {\n      console.log(\"Looks like there was a problem. Status Code: \" + response.status);\n      return {\n        success: false,\n        errorCondition: \"FetchError\",\n        status: response.status,\n      };\n    }\n\n    let jsonData = await response.text();\n\n    //console.log(\"doFetch: response text is:\");\n    //console.log(jsonData);\n\n    if (!jsonData || jsonData[0] != `{`) {\n      console.log(\"The response text does not look like JSON\");\n      //console.log(jsonData);\n      return { success: false, errorCondition: \"NotJSON\" };\n    }\n\n    const dataObj = JSON.parse(jsonData);\n\n    //console.log(\"dataObj is:\");\n    //console.log(dataObj);\n\n    return { success: true, dataObj: dataObj, fetchType: fetchType };\n  } catch (error) {\n    console.log(\"fetch failed, error is:\");\n    console.log(error);\n    return { success: false };\n  }\n}\n\nasync function extractDataFromFetchAndRespond(document, dataObj, fetchType, options, sendResponse) {\n    console.log('extractDataFromFetchAndRespond entered');\n    console.log(document);\n    console.log(dataObj);\n    console.log(fetchType);\n    console.log(options);\n    console.log(sendResponse);\n\n\n  if (!isLoadedExtractDataModuleReady) {\n    if (loadedExtractDataModuleFailed) {\n      sendResponse({\n        success: false,\n        errorMessage: \"Error loading extract data module\",\n      });\n    }\n    // dependencies not ready, wait a few milliseconds and try again\n    else if (loadExtractDataModuleRetries < maxLoadModuleRetries) {\n      loadExtractDataModuleRetries++;\n      console.log(\"extractDataFromFetchAndRespond. Retry number: \", loadExtractDataModuleRetries);\n      setTimeout(function () {\n        extractDataFromFetchAndRespond(document, dataObj, options, sendResponse);\n      }, loadModuleTimeout);\n      return true;\n    } else {\n      console.log(\"extractDataFromFetchAndRespond. Too many retries\");\n      sendResponse({\n        success: false,\n        errorMessage: \"Extract data module never loaded\",\n      });\n    }\n    return false;\n  }\n\n  // Extract the data.\n  let extractedData = loadedExtractDataModule.extractDataFromFetch(document, dataObj, fetchType, options);\n\n  // respond with the type of content and the extracted data\n  sendResponse({\n    success: true,\n    contentType: \"fs\",\n    extractedData: extractedData,\n  });\n}\n\nasync function doFetchAndSendResponse(sendResponse, options) {\n  let result = await doFetch();\n\n  if (result.success) {\n    // Extract the data.\n    extractDataFromFetchAndRespond(document, result.dataObj, result.fetchType, options, sendResponse);\n  } else {\n    if (result.errorCondition == \"NotJSON\") {\n      // This is normal for some pages that could be records but are not.\n      // For example:\n      // https://www.familysearch.org/search/genealogies\n      let extractedData = { pageType: \"unknown\" };\n      sendResponse({\n        success: true,\n        contentType: \"fs\",\n        extractedData: extractedData,\n      });\n    } else if (result.errorCondition == \"FetchError\" && result.status == 401) {\n      // This is normal if the login has expired, so don't raise an unexpected\n      // error message. It will be handled in FS popup.\n      let extractedData = { pageType: \"unknown\" };\n      sendResponse({\n        success: true,\n        contentType: \"fs\",\n        extractedData: extractedData,\n      });\n    } else {\n      // treat this as a serious error\n      sendResponse({\n        success: false,\n        errorMessage: \"Fetch failed\",\n        contentType: \"fs\",\n      });\n    }\n  }\n}\n\nfunction shouldUseFetch() {\n  // There are many kinds of pages on the FamilySearch site.\n  // We only want to use fetch for record pages (and not images)\n  // So not for search results, collection pages etc\n\n  // An image page has:\n  // #main-content-section\n  // Many pages have:\n  // #main\n  // On the element with id #main the record pages have aria-label=\"Main Content\"\n  // However this is true for other pages like this:\n  // https://www.familysearch.org/search/genealogies\n  // For thise we return true and it will just fail when it doesn't get JSON data back from the fetch.\n\n  let useFetch = false;\n\n  if (location.href.startsWith(\"https://www.familysearch.org/tree/person/details/\")) {\n    useFetch = true;\n  } else {\n    let main = document.querySelector(\"#main\");\n    if (main) {\n      //console.log(\"shouldUseFetch, main found\");\n      if (main.getAttribute(\"aria-label\") == \"Main Content\") {\n        //console.log(\"shouldUseFetch, aria-label of Main Content found\");\n\n        useFetch = true;\n      }\n    }\n  }\n\n  //console.log(\"shouldUseFetch, returning useFetch = \" + useFetch);\n\n  return useFetch;\n}\n\nfunction extractHandler(request, sendResponse) {\n  const useFetch = shouldUseFetch();\n\n  //console.log(\"received extract request, useFetch = \" + useFetch);\n\n  if (useFetch) {\n    // extract the data via a fetch thatreturns JSON data\n    doFetchAndSendResponse(sendResponse, request.options);\n    return true; // will respond async\n  } else {\n    // Extract the data via DOM scraping\n    let isAsync = extractDataAndRespond(document, location.href, \"fs\", sendResponse);\n    if (isAsync) {\n      return true;\n    }\n  }\n}\n\nsiteContentInit(`fs`, `site/fs/core/fs_extract_data.mjs`, extractHandler);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/site/fs/browser/fs_content.js\n");

/***/ }),

/***/ "./extension/base/browser/common/browser_compat.mjs":
/*!**********************************************************!*\
  !*** ./extension/base/browser/common/browser_compat.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getLocalStorageItem\": () => (/* binding */ getLocalStorageItem),\n/* harmony export */   \"getSyncStorageItems\": () => (/* binding */ getSyncStorageItems),\n/* harmony export */   \"getTabDetails\": () => (/* binding */ getTabDetails)\n/* harmony export */ });\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// Browser compatibility\n//////////////////////////////////////////////////////////////////////////////////////////\n\nasync function getTabDetails(tabId) {\n  // while chrome.tabs.get exists on Firefox it does not return a promise so await doesn't work\n  // meanwhile the browser global does not exist in Chrome\n  if (typeof browser === \"undefined\") {\n    return await chrome.tabs.get(tabId);\n  } else {\n    return await browser.tabs.get(tabId);\n  }\n}\n\nasync function getLocalStorageItem(key) {\n  let item = undefined;\n  let items = undefined;\n  if (typeof browser === \"undefined\") {\n    items = await chrome.storage.local.get(key);\n  } else {\n    items = await browser.storage.local.get(key);\n  }\n\n  if (items && items[key]) {\n    item = items[key];\n  }\n  return item;\n}\n\nasync function getSyncStorageItems(keyList) {\n  let items = undefined;\n  if (typeof browser === \"undefined\") {\n    items = await chrome.storage.sync.get(keyList);\n  } else {\n    items = await browser.storage.sync.get(keyList);\n  }\n  return items;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb24vYmFzZS9icm93c2VyL2NvbW1vbi9icm93c2VyX2NvbXBhdC5tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFbUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaXRhdGlvbkV4dHJhY3Rvci8uL2V4dGVuc2lvbi9iYXNlL2Jyb3dzZXIvY29tbW9uL2Jyb3dzZXJfY29tcGF0Lm1qcz82MzY2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjAgUm9iZXJ0IE0gUGF2ZXlcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBCcm93c2VyIGNvbXBhdGliaWxpdHlcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5hc3luYyBmdW5jdGlvbiBnZXRUYWJEZXRhaWxzKHRhYklkKSB7XG4gIC8vIHdoaWxlIGNocm9tZS50YWJzLmdldCBleGlzdHMgb24gRmlyZWZveCBpdCBkb2VzIG5vdCByZXR1cm4gYSBwcm9taXNlIHNvIGF3YWl0IGRvZXNuJ3Qgd29ya1xuICAvLyBtZWFud2hpbGUgdGhlIGJyb3dzZXIgZ2xvYmFsIGRvZXMgbm90IGV4aXN0IGluIENocm9tZVxuICBpZiAodHlwZW9mIGJyb3dzZXIgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gYXdhaXQgY2hyb21lLnRhYnMuZ2V0KHRhYklkKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYXdhaXQgYnJvd3Nlci50YWJzLmdldCh0YWJJZCk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0TG9jYWxTdG9yYWdlSXRlbShrZXkpIHtcbiAgbGV0IGl0ZW0gPSB1bmRlZmluZWQ7XG4gIGxldCBpdGVtcyA9IHVuZGVmaW5lZDtcbiAgaWYgKHR5cGVvZiBicm93c2VyID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgaXRlbXMgPSBhd2FpdCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICBpdGVtcyA9IGF3YWl0IGJyb3dzZXIuc3RvcmFnZS5sb2NhbC5nZXQoa2V5KTtcbiAgfVxuXG4gIGlmIChpdGVtcyAmJiBpdGVtc1trZXldKSB7XG4gICAgaXRlbSA9IGl0ZW1zW2tleV07XG4gIH1cbiAgcmV0dXJuIGl0ZW07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFN5bmNTdG9yYWdlSXRlbXMoa2V5TGlzdCkge1xuICBsZXQgaXRlbXMgPSB1bmRlZmluZWQ7XG4gIGlmICh0eXBlb2YgYnJvd3NlciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGl0ZW1zID0gYXdhaXQgY2hyb21lLnN0b3JhZ2Uuc3luYy5nZXQoa2V5TGlzdCk7XG4gIH0gZWxzZSB7XG4gICAgaXRlbXMgPSBhd2FpdCBicm93c2VyLnN0b3JhZ2Uuc3luYy5nZXQoa2V5TGlzdCk7XG4gIH1cbiAgcmV0dXJuIGl0ZW1zO1xufVxuXG5leHBvcnQgeyBnZXRUYWJEZXRhaWxzLCBnZXRMb2NhbFN0b3JhZ2VJdGVtLCBnZXRTeW5jU3RvcmFnZUl0ZW1zIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./extension/base/browser/common/browser_compat.mjs\n");

/***/ }),

/***/ "./extension/base/core/citation_builder.mjs":
/*!**************************************************!*\
  !*** ./extension/base/core/citation_builder.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CitationBuilder\": () => (/* binding */ CitationBuilder)\n/* harmony export */ });\n/* harmony import */ var _narrative_builder_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./narrative_builder.mjs */ \"./extension/base/core/narrative_builder.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\n// The different parts of a citation are:\n//\n//     - Meaningful title. e.g. 1851 Census\n//     - Source/repository name (possibly with link to original data) e.g. 1851 England Census\n//     - Source reference e.g. Class: HO107; Piece: 1946; Folio: 647; Page: 25; GSU roll: 221106\n//     - optional sharing link/template\n//     - record link/template plus accessed date\n//     - optional link to external site (e.g. FMP image from FS)\n//     - data table or dataString\n\nclass CitationBuilder {\n  constructor(type, runDate, options) {\n    this.type = type; // \"inline\", \"narrative\" or \"source\"\n    this.options = options;\n    this.runDate = runDate;\n    this.meaningfulTitle = \"\";\n    this.sourceTitle = \"\";\n    this.sourceReference = \"\";\n    this.sharingLinkOrTemplate = \"\";\n    this.recordLinkOrTemplate = \"\";\n    this.externalSiteLink = \"\";\n    this.dataString = \"\";\n    this.includeSubscriptionRequired = \"none\";\n    this.putSourceTitleInQuotes = true;\n    this.databaseHasImages = false;\n  }\n\n  getOptions() {\n    return this.options;\n  }\n\n  getDateString(date) {\n    const monthStrings = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n\n    const dateString = \"\" + date.getDate() + \" \" + monthStrings[date.getMonth()] + \" \" + date.getFullYear();\n\n    return dateString;\n  }\n\n  getSubReqString(subReqOption) {\n    let subReqString = \"\";\n    if (subReqOption == \"subscriptionRequired\") {\n      subReqString = \"subscription required\";\n    } else if (subReqOption == \"requiresSubscription\") {\n      subReqString = \"requires subscription\";\n    } else if (subReqOption == \"dollar\") {\n      subReqString = \"$\";\n    } else if (subReqOption == \"paywall\") {\n      subReqString = \"paywall\";\n    }\n    return subReqString;\n  }\n\n  addBreakNewlineOrAlternatives(oldCitation, separatorChar = \",\") {\n    let citation = oldCitation;\n\n    if (this.options.citation_general_addBreaksWithinBody) {\n      citation += \"<br/>\";\n    } else {\n      if (citation.endsWith(\";\") || citation.endsWith(\",\") || citation.endsWith(\".\")) {\n        citation = citation.substring(0, citation.length - 1);\n      }\n\n      if (this.options.citation_general_commaInsideQuotes && citation.endsWith('\"')) {\n        citation = citation.substring(0, citation.length - 1);\n        citation += separatorChar + '\"';\n      } else {\n        citation += separatorChar;\n      }\n\n      citation += \" \";\n    }\n    if (this.type != \"source\" && this.options.citation_general_addNewlinesWithinBody) {\n      citation += \"\\n\";\n    }\n\n    return citation;\n  }\n\n  addNarrative(gd, dataCache, options) {\n    // eventually these should come from the dataCache\n    // The problem is how to be sure we get a valid match from the data cache?\n    // It could be worth just getting it for the gender for pronouns\n    let wtExtractedData = undefined;\n    let wtGeneralizedData = undefined;\n\n    const narrativeInput = {\n      eventGeneralizedData: gd,\n      wtExtractedData: wtExtractedData,\n      wtGeneralizedData: wtGeneralizedData,\n      options: options,\n    };\n    let narrative = (0,_narrative_builder_mjs__WEBPACK_IMPORTED_MODULE_0__.buildNarrative)(narrativeInput);\n\n    //console.log(\"addNarrative, narrative is\");\n    //console.log(narrative);\n\n    if (narrative) {\n      this.narrative = narrative;\n    }\n  }\n\n  buildDataList(recordData, keyFilterFunction) {\n    let itemSep = \";\";\n    let valueSep = \":\";\n    if (this.options.citation_general_dataListSeparator == \"commaColon\") {\n      itemSep = \",\";\n      valueSep = \":\";\n    } else if (this.options.citation_general_dataListSeparator == \"commaSpace\") {\n      itemSep = \",\";\n      valueSep = \"\";\n    }\n\n    let keys = Object.keys(recordData);\n    if (keyFilterFunction) {\n      keys = keyFilterFunction(keys, recordData);\n    }\n\n    let dataListString = \"\";\n\n    for (let key of keys) {\n      let value = recordData[key];\n      if (value && value != \"-\") {\n        value = value.trim();\n        if (dataListString != \"\") {\n          dataListString += itemSep + \" \";\n        }\n        if (value.startsWith(\"http\")) {\n          dataListString += \"[\" + value + \" \" + key + \"]\";\n        } else {\n          dataListString += key + valueSep + \" \" + value;\n        }\n      }\n    }\n\n    return dataListString;\n  }\n\n  getCitationString() {\n    let autoTableOpt = this.options.table_general_autoGenerate;\n\n    let citation = \"\";\n    let subReqString = this.getSubReqString(this.includeSubscriptionRequired);\n\n    if (this.type == \"narrative\" && this.narrative) {\n      citation += this.narrative;\n    }\n\n    if (this.type == \"source\") {\n      citation += \"* \";\n    } else {\n      citation += \"<ref>\";\n    }\n\n    if (this.type != \"source\" && this.options.citation_general_addNewlinesWithinRefs) {\n      citation += \"\\n\";\n    }\n\n    if (this.options.citation_general_meaningfulNames != \"none\" && this.meaningfulTitle) {\n      if (this.options.citation_general_meaningfulNames == \"bold\") {\n        citation += \"'''\" + this.meaningfulTitle + \"''':\";\n      } else if (this.options.citation_general_meaningfulNames == \"italic\") {\n        citation += \"''\" + this.meaningfulTitle + \"'':\";\n      } else {\n        citation += this.meaningfulTitle + \":\";\n      }\n\n      if (this.type != \"source\" && this.options.citation_general_addNewlinesWithinBody) {\n        citation += \"\\n\";\n      } else {\n        citation += \" \";\n      }\n    }\n\n    if (this.sourceTitle) {\n      let sourceTitle = this.sourceTitle.trim();\n      if (this.putSourceTitleInQuotes) {\n        sourceTitle = '\"' + sourceTitle + '\"';\n      }\n      citation += sourceTitle;\n\n      if (this.options.citation_general_addEeItemType) {\n        if (this.options.citation_general_commaInsideQuotes && citation.endsWith('\"')) {\n          citation = citation.substring(0, citation.length - 1);\n          citation += ',\"';\n        } else {\n          citation += \",\";\n        }\n        if (this.databaseHasImages) {\n          citation += \" database with images\";\n        } else {\n          citation += \" database\";\n        }\n      }\n\n      citation = this.addBreakNewlineOrAlternatives(citation);\n    }\n\n    if (this.websiteCreatorOwner) {\n      citation += this.websiteCreatorOwner;\n\n      if (this.sourceReference && this.options.citation_general_referencePosition == \"afterSourceTitle\") {\n        citation += \", \";\n      } else {\n        citation = this.addBreakNewlineOrAlternatives(citation);\n      }\n    }\n\n    if (this.sourceReference && this.options.citation_general_referencePosition == \"afterSourceTitle\") {\n      citation += this.sourceReference;\n      citation = this.addBreakNewlineOrAlternatives(citation);\n    }\n\n    if (this.sharingLinkOrTemplate) {\n      citation += this.sharingLinkOrTemplate;\n      if (this.recordLinkOrTemplate) {\n        if (subReqString) {\n          citation += \" (free access)<br/>\";\n          if (this.type != \"source\" && this.options.citation_general_addNewlinesWithinBody) {\n            citation += \"\\n\";\n          }\n        } else {\n          citation += \" - \"; // separate the two links with a hyphen for space\n        }\n      }\n    } else if (this.imageLink) {\n      citation += this.imageLink;\n      if (this.recordLinkOrTemplate) {\n        citation += \" - \"; // separate the two links with a hyphen for space\n      }\n    }\n\n    if (this.recordLinkOrTemplate) {\n      let accessedDate = this.getDateString(this.runDate);\n      if (this.options.citation_general_addAccessedDate == \"parenAfterLink\") {\n        citation += this.recordLinkOrTemplate;\n\n        if (subReqString) {\n          citation += \" (\" + subReqString + \", accessed \" + accessedDate + \")\";\n        } else {\n          citation += \" (accessed \" + accessedDate + \")\";\n        }\n      } else if (this.options.citation_general_addAccessedDate == \"parenBeforeLink\") {\n        citation += \"(\";\n        citation += this.recordLinkOrTemplate;\n\n        if (subReqString) {\n          citation += \" : \" + subReqString + \", accessed \" + accessedDate + \")\";\n        } else {\n          citation += \" : accessed \" + accessedDate + \")\";\n        }\n      } else {\n        citation += this.recordLinkOrTemplate;\n\n        if (subReqString) {\n          citation += \" (\" + subReqString + \")\";\n        }\n      }\n    }\n\n    if (this.externalSiteLink) {\n      if (!citation.endsWith(\"\\n\")) {\n        if (this.options.citation_general_addBreaksWithinBody) {\n          citation += \"<br/>\";\n        } else {\n          citation += \" \";\n        }\n        if (this.type != \"source\" && this.options.citation_general_addNewlinesWithinBody) {\n          citation += \"\\n\";\n        }\n      }\n      citation += this.externalSiteLink;\n    }\n\n    if (this.dataString) {\n      if (!this.dataString.startsWith(\"{|\")) {\n        citation = this.addBreakNewlineOrAlternatives(citation);\n      } else {\n        citation += \"\\n\"; // always need a newline before table\n      }\n      citation += this.dataString;\n    }\n\n    if (this.sourceReference && this.options.citation_general_referencePosition == \"atEnd\") {\n      citation = this.addBreakNewlineOrAlternatives(citation, \";\");\n      if (!this.sourceReference.toLowerCase().startsWith(\"citing \")) {\n        citation += \"citing \";\n      }\n      citation += this.sourceReference;\n    }\n\n    citation = citation.trim();\n    while (citation.endsWith(\",\")) {\n      citation = citation.substring(0, citation.length - 1).trim();\n    }\n\n    if (!(citation.endsWith(\".\") || citation.endsWith(\"}\"))) {\n      // doesn't end with a period already and doesn't end in template or table\n      // However, it could end with accessed date if there is no data section, or just\n      // a bare link and we don't want a period then. There are various ways we could test\n      // for this\n      if (!(citation.endsWith(\"]\") || citation.endsWith(\">\") || citation.endsWith(\"\\n\") || citation.endsWith(\"* \"))) {\n        // if ends with accessed date then (for now) we don't add a period\n        // (accessed 6 May 2021)\n        if (!/accessed \\d+ \\w+ \\d+\\)$/.test(citation)) {\n          citation += \".\";\n        }\n      }\n    }\n\n    if (this.type != \"source\" && this.options.citation_general_addNewlinesWithinRefs) {\n      citation += \"\\n\";\n    }\n\n    if (this.householdTableString) {\n      if (autoTableOpt == \"withinRefOrSource\") {\n        let tableFormat = this.options.table_general_format;\n        // we used to disallow having a table or list format household if this is a \"source\" type\n        // However, people do want to use the :: style list format in a source\n        // Maybe we should just allow whetever they want?\n        //if (!(this.type == \"source\" && (tableFormat == \"table\" || tableFormat == \"list\"))) {\n        if (!citation.endsWith(\"\\n\")) {\n          if (this.type == \"source\") {\n            if (tableFormat == \"table\" || tableFormat == \"list\") {\n              citation += \"\\n\";\n            } else if (this.options.citation_general_addBreaksWithinBody) {\n              citation += \"<br/>\";\n            } else {\n              citation += \" \";\n            }\n          } else {\n            if (tableFormat == \"table\" || tableFormat == \"list\") {\n              citation += \"\\n\";\n            } else if (this.options.citation_general_addNewlinesWithinRefs) {\n              citation += \"\\n\";\n            } else {\n              citation += \" \";\n            }\n          }\n        }\n        citation += this.householdTableString;\n        if (tableFormat != \"sentence\" || this.options.citation_general_addNewlinesWithinRefs) {\n          citation += \"\\n\";\n        }\n        //}\n      }\n    }\n\n    if (this.type != \"source\") {\n      citation += \"</ref>\";\n    }\n\n    if (this.householdTableString && this.type != \"source\") {\n      if (autoTableOpt == \"afterRef\" || autoTableOpt == \"afterRefBlankLine\") {\n        if (autoTableOpt == \"afterRef\") {\n          citation += \"\\n\";\n        } else if (autoTableOpt == \"afterRefBlankLine\") {\n          citation += \"\\n\\n\";\n        }\n        citation += this.householdTableString;\n      }\n    }\n\n    return citation;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/base/core/citation_builder.mjs\n");

/***/ }),

/***/ "./extension/base/core/country_data.mjs":
/*!**********************************************!*\
  !*** ./extension/base/core/country_data.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CD\": () => (/* binding */ CD)\n/* harmony export */ });\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\nconst CountryData = [\n  {\n    stdName: \"England\",\n    matches: [\"England\", \"England, United Kingdom\"],\n    partOf: [\"United Kingdom\", \"England and Wales\"],\n    usesMiddleNames: true,\n  },\n  {\n    stdName: \"Wales\",\n    matches: [\"Wales\", \"Wales, United Kingdom\"],\n    partOf: [\"United Kingdom\", \"England and Wales\"],\n    usesMiddleNames: true,\n  },\n  {\n    stdName: \"Scotland\",\n    matches: [\"Scotland\", \"Scotland, United Kingdom\"],\n    partOf: [\"United Kingdom\"],\n    usesMiddleNames: true,\n  },\n  {\n    stdName: \"England and Wales\",\n    matches: [\n      \"England and Wales\",\n      \"England & Wales\",\n      \"England and Wales, United Kingdom\",\n      \"England & Wales, United Kingdom\",\n    ],\n    partOf: [\"United Kingdom\"],\n    invalidCountryName: true, // we never want to use this as a country name in a placename or a search\n    usesMiddleNames: true,\n  },\n  {\n    stdName: \"Guernsey\",\n    matches: [\n      \"Guernsey\",\n      \"Guernsey, United Kingdom\",\n      \"Guernsey, Channel Islands\",\n      \"Guernsey, Channel Islands, United Kingdom\",\n    ],\n    partOf: [\"United Kingdom\", \"Channel Islands\"],\n  },\n  {\n    stdName: \"Jersey\",\n    matches: [\"Jersey\", \"Jersey, United Kingdom\", \"Jersey, Channel Islands\", \"Jersey, Channel Islands, United Kingdom\"],\n    partOf: [\"United Kingdom\", \"Channel Islands\"],\n  },\n  {\n    stdName: \"Channel Islands\",\n    matches: [\"Channel Islands\", \"Channel Islands, United Kingdom\"],\n    partOf: [\"United Kingdom\"],\n  },\n\n  {\n    stdName: \"United Kingdom\",\n    matches: [\"United Kingdom\", \"U.K.\", \"UK\", \"Great Britain\"],\n    usesMiddleNames: true,\n  }, // must come after ones it contains\n\n  { stdName: \"Ireland\", matches: [\"Ireland\"], usesMiddleNames: true },\n  { stdName: \"France\", matches: [\"France\"] },\n  { stdName: \"Germany\", matches: [\"Germany\"] },\n  { stdName: \"Austria\", matches: [\"Austria\"] },\n  { stdName: \"Italy\", matches: [\"Italy\"] },\n  { stdName: \"Netherlands\", matches: [\"Netherlands\"] },\n  { stdName: \"Sweden\", matches: [\"Sweden\"] },\n  { stdName: \"Denmark\", matches: [\"Denmark\"] },\n  { stdName: \"Norway\", matches: [\"Norway\"] },\n  {\n    stdName: \"Poland\",\n    matches: [\"Poland\", \"Polska\"],\n  },\n  {\n    stdName: \"Ukraine\",\n    matches: [\"Ukraine\", \"Україна\", \"Ukraina\"],\n  },\n  {\n    stdName: \"Lithuania\",\n    matches: [\"Lithuania\", \"Lietuva\", \"Litwa\"],\n  },\n  {\n    stdName: \"Belarus\",\n    matches: [\"Belarus\", \"Беларусь\", \"Беларусь, Советский Союз\", \"Białoruś\"],\n  },\n  {\n    stdName: \"Galicia\",\n    matches: [\"Galicia\", \"Galicia, Austria\", \"Galicja\"],\n  },\n\n  { stdName: \"Turkey\", matches: [\"Turkey\"] },\n\n  {\n    stdName: \"United States\",\n    matches: [\"United States\", \"USA\", \"US\", \"U.S.\", \"U.S.A.\", \"U.S\", \"U.S.A\", \"United States of America\"],\n    hasStates: true,\n    usesMiddleNames: true,\n  },\n  {\n    stdName: \"Canada\",\n    matches: [\"Canada\"],\n    hasStates: true,\n    usesMiddleNames: true,\n  },\n  { stdName: \"Mexico\", matches: [\"Mexico\"], hasStates: true },\n\n  {\n    stdName: \"Australia\",\n    matches: [\"Australia\"],\n    hasStates: true,\n    usesMiddleNames: true,\n  },\n  { stdName: \"New Zealand\", matches: [\"New Zealand\"], usesMiddleNames: true },\n  { stdName: \"South Africa\", matches: [\"South Africa\"] },\n];\n\nconst CountyData = {\n  England: [\n    { stdName: \"Avon\", matches: [\"Avon\"] },\n    { stdName: \"Bedfordshire\", matches: [\"Bedfordshire\", \"Beds\"] },\n    { stdName: \"Berkshire\", matches: [\"Berkshire\", \"Berks\"] },\n    { stdName: \"Bristol\", matches: [\"Bristol\"] },\n    { stdName: \"Buckinghamshire\", matches: [\"Buckinghamshire\", \"Bucks\"] },\n    {\n      stdName: \"Cambridgeshire\",\n      matches: [\"Cambridgeshire\", \"Cambs\", \"Isle of Ely\"],\n    },\n    { stdName: \"Cheshire\", matches: [\"Cheshire\"] },\n    { stdName: \"Cleveland\", matches: [\"Cleveland\"] },\n    { stdName: \"Cornwall\", matches: [\"Cornwall\"] },\n    { stdName: \"Cumberland\", matches: [\"Cumberland\"] },\n    { stdName: \"Cumbria\", matches: [\"Cumbria\"] },\n    { stdName: \"Derbyshire\", matches: [\"Derbyshire\"] },\n    { stdName: \"Devon\", matches: [\"Devon\"] },\n    { stdName: \"Dorset\", matches: [\"Dorset\"] },\n    { stdName: \"Durham\", matches: [\"County Durham\", \"Durham\"] },\n    { stdName: \"Essex\", matches: [\"Essex\"] },\n    { stdName: \"Gloucestershire\", matches: [\"Gloucestershire\", \"Glos\"] },\n    { stdName: \"Hampshire\", matches: [\"Hampshire\", \"Isle of Wight\"] },\n    { stdName: \"Herefordshire\", matches: [\"Herefordshire\"] },\n    { stdName: \"Hertfordshire\", matches: [\"Hertfordshire\"] },\n    { stdName: \"Huntingdonshire\", matches: [\"Huntingdonshire\"] },\n    { stdName: \"Humberside\", matches: [\"Humberside\"] },\n    { stdName: \"Kent\", matches: [\"Kent\"] },\n    { stdName: \"Lancashire\", matches: [\"Lancashire\"] },\n    { stdName: \"Leicestershire\", matches: [\"Leicestershire\"] },\n    { stdName: \"Lincolnshire\", matches: [\"Lincolnshire\"] },\n    { stdName: \"Leicestershire\", matches: [\"Leicestershire\"] },\n    {\n      stdName: \"London\",\n      matches: [\"London\", \"Greater London\", \"London (City)\"],\n    },\n    {\n      stdName: \"London & Middlesex\",\n      matches: [\"London & Middlesex\", \"London and Middlesex\", \"London, Middlesex\"],\n    },\n    {\n      stdName: \"London & Surrey\",\n      matches: [\"London & Surrey\", \"London and Surrey\", \"London, Surrey\"],\n    },\n    { stdName: \"London (City)\", matches: [\"London (City)\"] },\n    { stdName: \"Middlesex\", matches: [\"Middlesex\"] },\n    { stdName: \"Norfolk\", matches: [\"Norfolk\"] },\n    { stdName: \"Northamptonshire\", matches: [\"Northamptonshire\"] },\n    { stdName: \"Northumberland\", matches: [\"Northumberland\"] },\n    { stdName: \"Nottinghamshire\", matches: [\"Nottinghamshire\"] },\n    { stdName: \"Oxfordshire\", matches: [\"Oxfordshire\"] },\n    { stdName: \"Rutland\", matches: [\"Rutland\"] },\n    { stdName: \"Shropshire\", matches: [\"Shropshire\"] },\n    { stdName: \"Somerset\", matches: [\"Somerset\"] },\n    { stdName: \"Staffordshire\", matches: [\"Staffordshire\"] },\n    { stdName: \"Suffolk\", matches: [\"Suffolk\"] },\n    { stdName: \"Surrey\", matches: [\"Surrey\"] },\n    { stdName: \"Sussex\", matches: [\"Sussex\", \"East Sussex\", \"West Sussex\"] },\n    { stdName: \"Warwickshire\", matches: [\"Warwickshire\"] },\n    { stdName: \"Westmorland\", matches: [\"Westmorland\"] },\n    { stdName: \"Wiltshire\", matches: [\"Wiltshire\"] },\n    { stdName: \"Worcestershire\", matches: [\"Worcestershire\"] },\n    { stdName: \"Yorkshire\", matches: [\"Yorkshire\"] },\n    { stdName: \"Yorkshire, East Riding\", matches: [\"Yorkshire, East Riding\"] },\n    {\n      stdName: \"Yorkshire, North Riding\",\n      matches: [\"Yorkshire, North Riding\"],\n    },\n    { stdName: \"Yorkshire, West Riding\", matches: [\"Yorkshire, West Riding\"] },\n  ],\n  Wales: [\n    { stdName: \"Anglesey\", matches: [\"Anglesey\"] },\n    { stdName: \"Breconshire\", matches: [\"Breconshire\"] },\n    { stdName: \"Caernarvonshire\", matches: [\"Caernarvonshire\"] },\n    { stdName: \"Cardiganshire\", matches: [\"Cardiganshire\"] },\n    { stdName: \"Carmarthenshire\", matches: [\"Carmarthenshire\"] },\n    { stdName: \"Denbighshire\", matches: [\"Denbighshire\"] },\n    { stdName: \"Flintshire\", matches: [\"Flintshire\"] },\n    { stdName: \"Glamorgan\", matches: [\"Glamorgan\"] },\n    { stdName: \"Merionethshire\", matches: [\"Merionethshire\"] },\n    { stdName: \"Monmouthshire\", matches: [\"Monmouthshire\"] },\n    { stdName: \"Montgomeryshire\", matches: [\"Montgomeryshire\"] },\n    { stdName: \"Pembrokeshire\", matches: [\"Pembrokeshire\"] },\n    { stdName: \"Radnorshire\", matches: [\"Radnorshire\"] },\n    // post 1996\n    { stdName: \"Clwyd\", matches: [\"Clwyd\"] },\n    { stdName: \"Dyfed\", matches: [\"Dyfed\"] },\n    { stdName: \"Gwent\", matches: [\"Gwent\"] },\n    { stdName: \"Gwynedd\", matches: [\"Gwynedd\"] },\n    { stdName: \"Mid Glamorgan\", matches: [\"Mid Glamorgan\"] },\n    { stdName: \"Powys\", matches: [\"Powys\"] },\n    { stdName: \"South Glamorgan\", matches: [\"South Glamorgan\"] },\n    { stdName: \"West Glamorgan\", matches: [\"West Glamorgan\"] },\n  ],\n  Scotland: [\n    { stdName: \"Aberdeenshire\", matches: [\"Aberdeenshire\", \"Aberdeen\"] },\n    { stdName: \"Angus\", matches: [\"Angus\"] },\n    { stdName: \"Argyllshire\", matches: [\"Argyllshire\", \"Argyll\"] },\n    { stdName: \"Ayrshire\", matches: [\"Ayrshire\", \"Ayr\"] },\n    { stdName: \"Banffshire\", matches: [\"Banffshire\", \"Banff\"] },\n    { stdName: \"Berwickshire\", matches: [\"Berwickshire\", \"Berwick\"] },\n    { stdName: \"Bute\", matches: [\"Bute\"] },\n    { stdName: \"Caithness\", matches: [\"Caithness\"] },\n    {\n      stdName: \"Clackmannanshire\",\n      matches: [\"Clackmannanshire\", \"Clackmannan\"],\n    },\n    {\n      stdName: \"Dunbartonshire\",\n      matches: [\"Dunbartonshire\", \"Dunbarton\", \"Dumbartonshire\", \"Dumbarton\"],\n    },\n    { stdName: \"Dumfriesshire\", matches: [\"Dumfriesshire\", \"Dumfries\"] },\n    { stdName: \"East Lothian\", matches: [\"East Lothian\"] },\n    { stdName: \"Edinburgh\", matches: [\"Edinburgh\", \"Edinburghshire\"] },\n    { stdName: \"Fife\", matches: [\"Fife\"] },\n    { stdName: \"Forfarshire\", matches: [\"Forfarshire\", \"Forfar\"] },\n    {\n      stdName: \"Inverness-shire\",\n      matches: [\"Inverness-shire\", \"Invernesshire\", \"Invernessshire\", , \"Inverneshire\", \"Inverness\"],\n    },\n    { stdName: \"Kincardineshire\", matches: [\"Kincardineshire\", \"Kincardine\"] },\n    {\n      stdName: \"Kinross-shire\",\n      matches: [\"Kinross-shire\", \"Kinrossshire\", \"Kinrosshire\", \"Kinroshire\", \"Kinross\"],\n    },\n    {\n      stdName: \"Kirkcudbrightshire\",\n      matches: [\"Kirkcudbrightshire\", \"Kirkcudbright\"],\n    },\n    { stdName: \"Lanarkshire\", matches: [\"Lanarkshire\", \"Lanark\"] },\n    { stdName: \"Midlothian\", matches: [\"Midlothian\"] },\n    { stdName: \"Moray\", matches: [\"Moray\"] },\n    { stdName: \"Nairnshire\", matches: [\"Nairnshire\", \"Nairn\"] },\n    { stdName: \"Orkney\", matches: [\"Orkney\"] },\n    {\n      stdName: \"Peeblesshire\",\n      matches: [\"Peeblesshire\", \"Peebleshire\", \"Peebles-shire\", \"Peebles\"],\n    },\n    { stdName: \"Perthshire\", matches: [\"Perthshire\", \"Perth\"] },\n    { stdName: \"Renfrewshire\", matches: [\"Renfrewshire\", \"Renfrew\"] },\n    {\n      stdName: \"Ross and Cromarty\",\n      matches: [\"Ross and Cromarty\", \"Ross & Cromarty\"],\n    },\n    { stdName: \"Roxburghshire\", matches: [\"Roxburghshire\", \"Roxburgh\"] },\n    { stdName: \"Selkirkshire\", matches: [\"Selkirkshire\", \"Selkirk\"] },\n    { stdName: \"Shetland\", matches: [\"Shetland\"] },\n    { stdName: \"Stirlingshire\", matches: [\"Stirlingshire\", \"Stirling\"] },\n    { stdName: \"Sutherland\", matches: [\"Sutherland\"] },\n    { stdName: \"West Lothian\", matches: [\"West Lothian\"] },\n    { stdName: \"Wigtownshire\", matches: [\"Wigtownshire\", \"Wigtown\"] },\n    // post 1996\n    { stdName: \"Borders\", matches: [\"Borders\"] },\n    { stdName: \"Central\", matches: [\"Central\"] },\n    { stdName: \"Dumfries and Galloway\", matches: [\"Dumfries and Galloway\"] },\n    { stdName: \"Grampian\", matches: [\"Grampian\"] },\n    { stdName: \"Highland\", matches: [\"Highland\"] },\n    { stdName: \"Lothian\", matches: [\"Lothian\"] },\n    { stdName: \"Strathclyde\", matches: [\"Strathclyde\"] },\n    { stdName: \"Tayside\", matches: [\"Tayside\"] },\n    { stdName: \"Western Isles\", matches: [\"Western Isles\"] },\n  ],\n  Ireland: [],\n};\n\nconst CD = {\n  matchCountryFromPlaceName: function (placeName) {\n    for (let country of CountryData) {\n      for (let match of country.matches) {\n        if (placeName == match) {\n          return country;\n        }\n        let ending = \", \" + match;\n        if (placeName.endsWith(ending)) {\n          return country;\n        }\n      }\n    }\n  },\n\n  extractCountryFromPlaceName: function (placeName) {\n    for (let country of CountryData) {\n      for (let match of country.matches) {\n        if (placeName == match) {\n          return { country: country, remainder: \"\" };\n        }\n        let ending = \", \" + match;\n        if (placeName.endsWith(ending)) {\n          let remainder = placeName.substring(0, placeName.length - ending.length);\n          return { country: country, remainder: remainder };\n        }\n      }\n    }\n  },\n\n  isPartOf: function (ownedCountryName, owningCountryName) {\n    for (let country of CountryData) {\n      if (country.stdName == ownedCountryName) {\n        if (country.partOf != undefined) {\n          for (let owner of country.partOf) {\n            if (owner == owningCountryName) {\n              return true;\n            }\n          }\n        }\n        break;\n      }\n    }\n    return false;\n  },\n\n  isValidCountryForPlaceName: function (countryName) {\n    for (let country of CountryData) {\n      if (country.stdName == countryName) {\n        if (country.invalidCountryName) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n\n  buildCountryArrayFromPlaceArray: function (placeNames) {\n    let countrySet = new Set();\n    for (let placeName of placeNames) {\n      let country = CD.matchCountryFromPlaceName(placeName);\n      if (country) {\n        countrySet.add(country.stdName);\n      }\n    }\n\n    let foundInvalidCountryContainedByValidCountry = false;\n\n    // we now have a set of unique country names but some may be part of others in the list\n    // if so we want to remove the more general ones and use the specific ones\n    if (countrySet.size > 0) {\n      let finalCountries = [];\n\n      if (countrySet.size == 1) {\n        finalCountries.push(countrySet.values().next().value);\n      } else {\n        for (let country of countrySet) {\n          // see if this country contains one of the other countries\n          let containsOtherCountry = false;\n          for (let otherCountry of countrySet) {\n            if (otherCountry != country) {\n              if (CD.isPartOf(otherCountry, country)) {\n                if (CD.isValidCountryForPlaceName(otherCountry)) {\n                  containsOtherCountry = true;\n                } else {\n                  foundInvalidCountryContainedByValidCountry = true;\n                }\n              }\n            }\n          }\n          if (!containsOtherCountry) {\n            finalCountries.push(country);\n          }\n        }\n      }\n\n      // we could still have an invalid country (like England & Wales) in the list,\n      // if there is also a containing country (like United Kingdom) in the list\n      // then remove the contained invalid country\n      // Otherwise it gets left in list and may get broken into its parts later -\n      // for example in adaptCountryArrayForFamilySearch\n      if (foundInvalidCountryContainedByValidCountry) {\n        let currentCountries = finalCountries;\n        finalCountries = [];\n\n        for (let country of currentCountries) {\n          if (!CD.isValidCountryForPlaceName(country)) {\n            let isContained = false;\n            for (let otherCountry of currentCountries) {\n              if (otherCountry != country) {\n                if (CD.isPartOf(country, otherCountry)) {\n                  isContained = true;\n                  break;\n                }\n              }\n            }\n            if (!isContained) {\n              finalCountries.push(country);\n            }\n          } else {\n            finalCountries.push(country);\n          }\n        }\n      }\n\n      return finalCountries;\n    }\n\n    return undefined;\n  },\n\n  getContainingCountries: function (stdName) {\n    let containingCountries = [];\n\n    for (let country of CountryData) {\n      if (country.stdName == stdName) {\n        let parentCountries = country.partOf;\n        if (parentCountries) {\n          for (let containingCountry of parentCountries) {\n            containingCountries.push(containingCountry);\n          }\n        }\n        break;\n      }\n    }\n\n    return containingCountries;\n  },\n\n  standardizeCountryName: function (countryName) {\n    for (let country of CountryData) {\n      for (let match of country.matches) {\n        if (countryName == match) {\n          return country.stdName;\n        }\n      }\n    }\n  },\n\n  standardizeCountyNameForCountry: function (countyName, country) {\n    // country is a country object\n    let countyArray = CountyData[country.stdName];\n    if (!countyArray || countyArray.length < 1) {\n      return undefined;\n    }\n\n    for (let county of countyArray) {\n      for (let match of county.matches) {\n        if (countyName == match) {\n          return county.stdName;\n        }\n      }\n    }\n\n    return undefined;\n  },\n\n  usesMiddleNames: function (countryName) {\n    let stdName = CD.standardizeCountryName(countryName);\n\n    for (let country of CountryData) {\n      if (country.stdName == stdName) {\n        if (country.usesMiddleNames) {\n          return true;\n        }\n        break;\n      }\n    }\n    return false;\n  },\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/base/core/country_data.mjs\n");

/***/ }),

/***/ "./extension/base/core/data_string.mjs":
/*!*********************************************!*\
  !*** ./extension/base/core/data_string.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DataString\": () => (/* binding */ DataString)\n/* harmony export */ });\n/* harmony import */ var _country_data_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./country_data.mjs */ \"./extension/base/core/country_data.mjs\");\n/* harmony import */ var _generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./generalize_data_utils.mjs */ \"./extension/base/core/generalize_data_utils.mjs\");\n/* harmony import */ var _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./record_type.mjs */ \"./extension/base/core/record_type.mjs\");\n/* harmony import */ var _record_collections_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./record_collections.mjs */ \"./extension/base/core/record_collections.mjs\");\n/* harmony import */ var _wts_date_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./wts_date.mjs */ \"./extension/base/core/wts_date.mjs\");\n/* harmony import */ var _wts_string_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./wts_string.mjs */ \"./extension/base/core/wts_string.mjs\");\n/* harmony import */ var _narrative_or_sentence_utils_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./narrative_or_sentence_utils.mjs */ \"./extension/base/core/narrative_or_sentence_utils.mjs\");\n/* harmony import */ var _site_gro_core_gro_uri_builder_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../site/gro/core/gro_uri_builder.mjs */ \"./extension/site/gro/core/gro_uri_builder.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\n\n\n\n\n\n\n\nfunction getQuarterName(quarterNumber) {\n  const quarterNames = [\"Jan-Feb-Mar\", \"Apr-May-Jun\", \"Jul-Aug-Sep\", \"Oct-Nov-Dec\"];\n  if (quarterNumber != undefined && quarterNumber >= 1 && quarterNumber <= 4) {\n    return quarterNames[quarterNumber - 1];\n  }\n\n  return \"\";\n}\n\nfunction getPlaceWithPreposition(placeString) {\n  let preposition = _wts_string_mjs__WEBPACK_IMPORTED_MODULE_5__.WTS_String.getPrepositionForPlaceString(placeString);\n  return preposition + \" \" + placeString;\n}\n\nfunction cleanDateObj(dateObj) {\n  if (dateObj) {\n    return dateObj.getDataStringFormat(false);\n  }\n  return \"\";\n}\n\nfunction cleanAge(age) {\n  let result = age;\n  if (result) {\n    if (typeof result == \"string\") {\n      result = result.toLowerCase();\n    }\n  }\n  return result;\n}\n\nfunction getDateWithPreposition(dateObj, prepSuffix = \"\") {\n  if (dateObj) {\n    return dateObj.getDataStringFormat(true, prepSuffix);\n  }\n  return \"\";\n}\n\nfunction getDateFromStringWithPreposition(dateString, prepSuffix = \"\") {\n  if (dateString) {\n    let dateObj = new _generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.WtsDate();\n    dateObj.dateString = dateString;\n\n    return dateObj.getDataStringFormat(true, prepSuffix);\n  }\n  return \"\";\n}\n\nfunction getFullName(gd) {\n  let name = gd.inferFullName();\n  if (!name) {\n    name = \"Unknown\";\n  }\n  return name;\n}\n\nfunction getReferenceString(gd, options) {\n  let dataString = \"\";\n\n  if (gd.collectionData) {\n    let volume = gd.collectionData.volume;\n    if (volume) {\n      dataString += \" volume \" + volume;\n\n      let page = gd.collectionData.page;\n      if (page) {\n        dataString += \" page \" + page;\n      }\n    }\n\n    let reg = gd.collectionData.registerNumber;\n    if (reg) {\n      dataString += \" reg \" + reg;\n    }\n\n    let entryNum = gd.collectionData.entryNumber;\n    if (entryNum) {\n      dataString += \" entry number \" + entryNum;\n    }\n\n    let registrationNumber = gd.collectionData.registrationNumber;\n    if (registrationNumber) {\n      dataString += \" registration number \" + registrationNumber;\n    }\n  }\n\n  return dataString;\n}\n\nfunction getUkCensusString(gd, options) {\n  let dataString = getFullName(gd);\n\n  let age = cleanAge(gd.ageAtEvent);\n  let maritalStatus = gd.maritalStatus;\n  let relationshipToHead = gd.relationshipToHead;\n\n  if (maritalStatus == \"widow\") {\n    maritalStatus = \"widowed\";\n  } else if (maritalStatus == \"single\") {\n    maritalStatus = gd.getTermForUnmarried();\n  }\n\n  if (age) {\n    dataString += \" (\" + age + \")\";\n  }\n\n  if (!relationshipToHead) {\n    // no relationship defined (e.g. 1841)\n    if (maritalStatus) {\n      dataString += \", \" + maritalStatus;\n    }\n    let occupation = gd.occupation;\n    if (occupation) {\n      dataString += \", \" + occupation + \",\";\n    }\n  } else if (relationshipToHead == \"head\") {\n    if (maritalStatus) {\n      dataString += \", \" + maritalStatus;\n    }\n    let occupation = gd.occupation;\n    if (occupation) {\n      dataString += \", \" + occupation + \",\";\n    }\n    dataString += \" head of household\";\n  } else {\n    let needsClosingComma = false;\n    if (relationshipToHead == \"wife\") {\n      dataString += \", wife\";\n      needsClosingComma = true;\n    } else if (relationshipToHead) {\n      if (maritalStatus) {\n        dataString += \", \" + maritalStatus;\n        needsClosingComma = true;\n      }\n      dataString += \" \" + relationshipToHead;\n    }\n\n    let occupation = gd.occupation;\n    if (occupation) {\n      dataString += \", \" + occupation;\n      needsClosingComma = true;\n    }\n\n    if (needsClosingComma) {\n      dataString += \",\";\n    }\n\n    if (gd.householdArray && gd.householdArray.length > 0) {\n      let headIndex = getHeadOfHouseholdIndex(gd.householdArray);\n      let headName = gd.householdArray[headIndex].name;\n      let headAge = cleanAge(gd.householdArray[headIndex].age);\n\n      if (headName) {\n        dataString += \" in household of \";\n        dataString += headName;\n        if (headAge) {\n          dataString += \" (\" + headAge + \")\";\n        }\n      }\n    }\n  }\n\n  // we want to give more than just the street address and the registration district if possible\n  // First check if the registration district is part of the placeString.\n  if (gd.eventPlace) {\n    if (!gd.registrationDistrict) {\n      // this can happen for 1911 ceneus on Ancestry which just has a number for district\n      if (gd.eventPlace && gd.eventPlace.placeString) {\n        dataString += \" \" + getPlaceWithPreposition(gd.eventPlace.placeString);\n      }\n    } else {\n      let addedPlace = false;\n      let placeParts = gd.eventPlace.separatePlaceIntoParts();\n      if (placeParts.localPlace) {\n        let regIndex = placeParts.localPlace.indexOf(\", \" + gd.registrationDistrict + \", \");\n        if (regIndex == -1) {\n          if (placeParts.localPlace.endsWith(\", \" + gd.registrationDistrict)) {\n            regIndex = placeParts.localPlace.indexOf(\", \" + gd.registrationDistrict);\n          }\n        }\n        if (regIndex != -1) {\n          let shortPlaceString = placeParts.localPlace.substring(0, regIndex);\n          shortPlaceString = getPlaceWithPreposition(shortPlaceString);\n          dataString += \" \" + shortPlaceString;\n          dataString += \" in \" + gd.registrationDistrict + \" registration district\";\n          addedPlace = true;\n        } else if (placeParts.localPlace == gd.registrationDistrict) {\n          // no point duplicating the info - just give registration district\n          dataString += \" in \" + gd.registrationDistrict + \" registration district\";\n          addedPlace = true;\n        }\n      }\n      if (!addedPlace) {\n        if (placeParts.localPlace) {\n          dataString += \" \" + getPlaceWithPreposition(placeParts.localPlace);\n        } else if (gd.eventPlace && gd.eventPlace.placeString) {\n          dataString += \" \" + getPlaceWithPreposition(gd.eventPlace.placeString);\n        }\n        dataString += \" in \" + gd.registrationDistrict + \" registration district\";\n      }\n      if (placeParts.county || placeParts.country) {\n        dataString += \" in \";\n        if (placeParts.county && placeParts.country) {\n          dataString += placeParts.county + \", \" + placeParts.country;\n        } else if (placeParts.county) {\n          dataString += placeParts.county;\n        } else if (placeParts.country) {\n          dataString += placeParts.country;\n        }\n      }\n    }\n  } else if (gd.registrationDistrict) {\n    dataString += \" in \" + gd.registrationDistrict + \" registration district\";\n  }\n\n  let birthPlace = gd.inferBirthPlace();\n  if (birthPlace) {\n    dataString += \". Born in \" + birthPlace;\n  }\n\n  let employer = gd.employer;\n  if (employer) {\n    dataString += \". Employed by \" + employer;\n  }\n\n  return dataString;\n}\n\nfunction get1939RegisterString(gd, options) {\n  let dataString = getFullName(gd);\n\n  let birthDate = gd.inferBirthDateObj();\n  if (birthDate) {\n    dataString += \" (born \" + cleanDateObj(birthDate) + \")\";\n  }\n  let maritalStatus = gd.maritalStatus;\n  if (maritalStatus) {\n    // Note in the 1939 register the term single is used rather than unmarried so leave it that way\n    dataString += \", \" + maritalStatus;\n  }\n  let occupation = gd.occupation;\n  if (occupation) {\n    dataString += \", \" + occupation + \",\";\n  }\n\n  let place = gd.inferFullEventPlace();\n  if (place) {\n    // Note we used to always use \"at\" which may be correct for Ancestry and FMP but FS doesn't have\n    // house number/name.\n    dataString += \" \" + getPlaceWithPreposition(place);\n  }\n\n  return dataString;\n}\n\nfunction getHeadOfHouseholdIndex(householdArray) {\n  for (let index = 0; index < householdArray.length; index++) {\n    let member = householdArray[index];\n    if (member.relationship) {\n      let relationshipLc = member.relationship.toLowerCase();\n      if (relationshipLc == \"head\" || relationshipLc.includes(\"head\")) {\n        return index;\n      }\n    }\n  }\n  return 0;\n}\n\nfunction getOtherCensusString(gd, options) {\n  let dataString = getFullName(gd);\n\n  let age = cleanAge(gd.ageAtEvent);\n  let maritalStatus = gd.maritalStatus;\n  let relationshipToHead = gd.relationshipToHead;\n\n  if (age) {\n    dataString += \" (\" + age + \")\";\n  }\n\n  if (relationshipToHead == \"head\") {\n    if (maritalStatus) {\n      dataString += \", \" + maritalStatus;\n    }\n    let occupation = gd.occupation;\n    if (occupation) {\n      dataString += \", \" + occupation + \",\";\n    }\n    dataString += \" head of household\";\n  } else if (relationshipToHead) {\n    let needsClosingComma = false;\n    if (relationshipToHead == \"wife\") {\n      dataString += \", wife\";\n      needsClosingComma = true;\n    } else if (relationshipToHead) {\n      if (maritalStatus) {\n        dataString += \", \" + maritalStatus;\n        needsClosingComma = true;\n      }\n      dataString += \" \" + relationshipToHead;\n    }\n\n    let occupation = gd.occupation;\n    if (occupation) {\n      dataString += \", \" + occupation;\n      needsClosingComma = true;\n    }\n\n    if (needsClosingComma) {\n      dataString += \",\";\n    }\n\n    if (gd.householdArray && gd.householdArray.length > 0) {\n      let headIndex = getHeadOfHouseholdIndex(gd.householdArray);\n      let headName = gd.householdArray[headIndex].name;\n      let headAge = cleanAge(gd.householdArray[headIndex].age);\n\n      if (headName) {\n        dataString += \" in household of \";\n        dataString += headName;\n        if (headAge) {\n          dataString += \" (\" + headAge + \")\";\n        }\n      }\n    }\n  } else {\n    if (maritalStatus) {\n      dataString += \", \" + maritalStatus;\n    }\n    let occupation = gd.occupation;\n    if (occupation) {\n      dataString += \", \" + occupation + \",\";\n    }\n  }\n\n  let place = gd.inferFullEventPlace();\n  if (place) {\n    dataString += \" \" + getPlaceWithPreposition(place);\n  }\n\n  let birthPlace = gd.inferBirthPlace();\n  if (birthPlace) {\n    dataString += \". Born in \" + birthPlace;\n  }\n\n  return dataString;\n}\n\nfunction getCensusString(gd, options) {\n  // First test if this is a regular england census or a 1939 register\n\n  let is1939Register = false;\n  let isUkCensus = false;\n\n  if (gd.collectionData && gd.collectionData.id) {\n    let collection = _record_collections_mjs__WEBPACK_IMPORTED_MODULE_3__.RC.findCollection(gd.sourceOfData, gd.collectionData.id);\n    if (collection) {\n      if (collection.wtsId == \"EnglandAndWales1939Register\") {\n        is1939Register = true;\n      } else {\n        if (collection.country) {\n          let country = collection.country;\n          if (country == \"United Kingdom\" || _country_data_mjs__WEBPACK_IMPORTED_MODULE_0__.CD.isPartOf(country, \"United Kingdom\")) {\n            isUkCensus = true;\n          }\n        }\n      }\n    }\n  }\n\n  if (is1939Register) {\n    return get1939RegisterString(gd, options);\n  }\n\n  if (isUkCensus) {\n    return getUkCensusString(gd, options);\n  }\n\n  // it is some other census record\n  return getOtherCensusString(gd, options);\n}\n\nfunction getUkRegistrationString(gd, options, type) {\n  let dataString = getFullName(gd);\n  dataString += \" \" + type;\n\n  if (type == \"marriage\" && gd.spouses && gd.spouses.length == 1) {\n    let spouse = gd.spouses[0];\n    if (spouse.name) {\n      let spouseName = spouse.name.inferFullName();\n      if (spouseName) {\n        dataString += \" to \" + spouseName;\n      }\n    }\n  }\n\n  dataString += \" registered\"; // make clear that it is date of registration not event\n\n  let quarter = getQuarterName(gd.inferEventQuarter());\n  if (quarter) {\n    dataString += \" \" + quarter;\n\n    let eventYear = gd.inferEventYear();\n    if (eventYear) {\n      dataString += \" \" + eventYear;\n    }\n  } else {\n    let eventDate = gd.inferEventDateObj();\n    if (eventDate) {\n      dataString += \" \" + cleanDateObj(eventDate);\n    }\n  }\n\n  let district = gd.registrationDistrict;\n  if (!district) {\n    return \"\"; // fallback to non-custom string\n  }\n  dataString += \" in \" + district;\n\n  if (type == \"birth\") {\n    if (gd.mothersMaidenName) {\n      dataString += \", mother's maiden name \" + gd.mothersMaidenName;\n    }\n  } else if (type == \"death\") {\n    let bornOrAgeText = \"\";\n\n    // coming from FS the gd.birthDate.dateString could be something like \"1844\", we don't want to use that\n    if (gd.birthDate && gd.birthDate.dateString && gd.birthDate.dateString.length > 8) {\n      // later UK death registrations include full birth date (available after June quarter 1969)\n      let birthDate = gd.inferBirthDateObj();\n      bornOrAgeText = \"born \" + cleanDateObj(birthDate);\n    } else {\n      let age = cleanAge(gd.ageAtDeath);\n      if (!age) {\n        age = cleanAge(gd.age);\n      }\n      if (!age) {\n        age = cleanAge(gd.ageAtEvent);\n      }\n      if (age) {\n        bornOrAgeText = \"age \" + age;\n      } else if (gd.birthDate) {\n        let dateString = gd.birthDate.dateString;\n        if (!dateString) {\n          dateString = gd.birthDate.yearString;\n        }\n        if (dateString) {\n          bornOrAgeText = \"born \" + dateString;\n        }\n      }\n    }\n\n    let mmnText = \"\";\n    if (gd.mothersMaidenName) {\n      mmnText = \"mother's maiden name \" + gd.mothersMaidenName;\n    }\n\n    if (bornOrAgeText && mmnText) {\n      dataString += \" (\" + bornOrAgeText + \", \" + mmnText + \")\";\n    } else if (bornOrAgeText) {\n      dataString += \" (\" + bornOrAgeText + \")\";\n    } else if (mmnText) {\n      dataString += \" (\" + mmnText + \")\";\n    }\n  }\n\n  // Normally a reference string would be a separate part of the citation - not in the data string\n  // GRO and FreeBMD are special cases.\n  if (gd.sourceOfData == \"gro\" || gd.sourceOfData == \"freebmd\") {\n    dataString += getReferenceString(gd, options);\n  }\n\n  return dataString;\n}\n\nfunction getBirthRegistrationString(gd, options) {\n  if (gd.isRecordInCountry(\"United Kingdom\")) {\n    return getUkRegistrationString(gd, options, \"birth\");\n  }\n\n  let dataString = \"\";\n\n  // generic birth registration\n  if (gd.role && gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Parent) {\n    if (gd.primaryPerson) {\n      dataString += gd.primaryPerson;\n    } else {\n      dataString += \"child\";\n    }\n\n    dataString += \" born to \";\n\n    dataString += getFullName(gd);\n    if (gd.spouses && gd.spouses[0] && gd.spouses[0].name && gd.spouses[0].name.name) {\n      dataString += \" and \" + gd.spouses[0].name.name;\n    }\n\n    let date = gd.inferEventDateObj();\n    if (date) {\n      dataString += \" \" + getDateWithPreposition(date);\n    }\n\n    let place = gd.inferEventPlace();\n    if (place) {\n      dataString += \" in \" + place;\n    }\n  } else {\n    dataString = getFullName(gd);\n    dataString += \" birth\";\n\n    let birthDate = gd.inferBirthDate();\n    if (birthDate) {\n      dataString += \" \" + birthDate;\n    }\n\n    let place = gd.inferEventPlace();\n    if (place) {\n      dataString += \" in \" + place;\n    }\n\n    if (gd.parents) {\n      let fatherName = \"\";\n      if (gd.parents.father && gd.parents.father.name) {\n        fatherName = gd.parents.father.name.inferFullName();\n      }\n      let motherName = \"\";\n      if (gd.parents.mother && gd.parents.mother.name) {\n        motherName = gd.parents.mother.name.inferFullName();\n      }\n\n      if (gd.personGender == \"male\") {\n        dataString += \", son of\";\n      } else if (gd.personGender == \"female\") {\n        dataString += \", daughter of\";\n      } else {\n        dataString += \", child of\";\n      }\n      if (fatherName) {\n        dataString += \" \" + fatherName;\n      }\n      if (motherName) {\n        if (fatherName) {\n          dataString += \" &\";\n        }\n        dataString += \" \" + motherName;\n      }\n    }\n\n    if (gd.mothersMaidenName) {\n      dataString += \", mother's maiden name \" + gd.mothersMaidenName;\n    }\n  }\n\n  return dataString;\n}\n\nfunction getDeathRegistrationString(gd, options) {\n  if (gd.isRecordInCountry(\"United Kingdom\")) {\n    return getUkRegistrationString(gd, options, \"death\");\n  }\n\n  let deathDate = gd.inferDeathDateObj();\n\n  // generic death registration\n  let dataString = getFullName(gd);\n  if (gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Parent) {\n    dataString += \" in death record for \" + (0,_narrative_or_sentence_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getPrimaryPersonChildTerm)(gd);\n    if (gd.primaryPerson) {\n      dataString += \" \" + gd.primaryPerson + \",\";\n    }\n    deathDate = gd.inferEventDateObj();\n  } else if (gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Spouse) {\n    dataString += \" in death record for \" + (0,_narrative_or_sentence_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getPrimaryPersonSpouseTerm)(gd);\n    if (gd.primaryPerson) {\n      dataString += \" \" + gd.primaryPerson + \",\";\n    }\n    deathDate = gd.inferEventDateObj();\n  } else {\n    dataString += \" death\";\n  }\n\n  if (deathDate) {\n    dataString += \" \" + cleanDateObj(deathDate);\n  }\n\n  let age = cleanAge(gd.ageAtDeath);\n  if (age) {\n    dataString += \" (age \" + age + \")\";\n  }\n\n  let place = gd.inferEventPlace();\n  let registrationDistrict = gd.registrationDistrict;\n\n  if (place) {\n    dataString += \" in \" + place;\n  } else if (registrationDistrict) {\n    dataString += \" in the \" + registrationDistrict + \" district\";\n  }\n\n  return dataString;\n}\n\nfunction getMarriageRegistrationString(gd, options) {\n  if (gd.isRecordInCountry(\"United Kingdom\")) {\n    return getUkRegistrationString(gd, options, \"marriage\");\n  }\n\n  // generic marriage reg\n  let dataString = getFullName(gd);\n\n  let age = cleanAge(gd.ageAtEvent);\n  if (age) {\n    dataString += \" (\" + age + \")\";\n  }\n\n  if (gd.role && gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Parent) {\n    dataString += \" child\";\n  }\n\n  dataString += \" marriage\";\n\n  if (gd.spouses && gd.spouses.length == 1) {\n    let spouse = gd.spouses[0];\n    if (spouse.name) {\n      let spouseName = spouse.name.inferFullName();\n      dataString += \" to \" + spouseName;\n\n      let spouseAge = cleanAge(spouse.age);\n      if (spouseAge) {\n        dataString += \" (\" + spouseAge + \")\";\n      }\n    }\n  }\n\n  let date = gd.inferEventDateObj();\n  if (!date && gd.marriageDate) {\n    date = new _generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.WtsDate();\n    date.dateString = gd.marriageDate;\n  }\n  if (date) {\n    dataString += \" \" + getDateWithPreposition(date);\n  }\n\n  let place = gd.inferFullEventPlace();\n  if (place) {\n    dataString += \" \" + getPlaceWithPreposition(place);\n  }\n\n  return dataString;\n}\n\nfunction getBirthString(gd, options) {\n  let dataString = \"\";\n\n  if (gd.role && gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Parent) {\n    if (gd.primaryPerson) {\n      dataString += gd.primaryPerson;\n    } else {\n      dataString += \"child\";\n    }\n\n    if (gd.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Birth) {\n      dataString += \" born to \";\n    } else {\n      dataString += \" born or baptised to \";\n    }\n    dataString += getFullName(gd);\n    if (gd.spouses && gd.spouses[0] && gd.spouses[0].name && gd.spouses[0].name.name) {\n      dataString += \" and \" + gd.spouses[0].name.name;\n    }\n\n    let date = gd.inferEventDateObj();\n    if (date) {\n      dataString += \" \" + getDateWithPreposition(date);\n    }\n  } else {\n    dataString += getFullName(gd);\n\n    if (gd.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Birth) {\n      dataString += \" born\";\n    } else {\n      dataString += \" born or baptised\";\n    }\n\n    let date = gd.inferEventDateObj();\n    if (date) {\n      dataString += \" \" + getDateWithPreposition(date);\n    }\n\n    let parentNames = gd.inferParentNamesForDataString();\n    if (parentNames.fatherName || parentNames.motherName) {\n      if (gd.personGender == \"male\") {\n        dataString += \", son of \";\n      } else if (gd.personGender == \"female\") {\n        dataString += \", daughter of \";\n      } else {\n        dataString += \", child of \";\n      }\n      if (parentNames.fatherName) {\n        dataString += parentNames.fatherName;\n      }\n      if (parentNames.motherName) {\n        if (parentNames.fatherName) {\n          dataString += \" & \";\n        }\n        dataString += parentNames.motherName;\n      }\n      dataString += \",\";\n    }\n  }\n\n  let place = gd.inferFullEventPlace();\n  if (place) {\n    dataString += \" \" + getPlaceWithPreposition(place);\n  } else if (dataString.endsWith(\",\")) {\n    dataString = dataString.substring(0, dataString.length - 1);\n  }\n\n  return dataString;\n}\n\nfunction getDeathString(gd, options) {\n  let dataString = getFullName(gd);\n\n  let deathDate = gd.inferDeathDateObj();\n\n  if (gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Parent) {\n    dataString += \" in death record for \" + (0,_narrative_or_sentence_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getPrimaryPersonChildTerm)(gd);\n    if (gd.primaryPerson) {\n      dataString += \" \" + gd.primaryPerson + \",\";\n    }\n    deathDate = gd.inferEventDateObj();\n  } else if (gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Spouse) {\n    dataString += \" in death record for \" + (0,_narrative_or_sentence_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getPrimaryPersonSpouseTerm)(gd);\n    if (gd.primaryPerson) {\n      dataString += \" \" + gd.primaryPerson + \",\";\n    }\n    deathDate = gd.inferEventDateObj();\n  } else {\n    dataString += \" death\";\n  }\n\n  if (deathDate) {\n    dataString += \" \" + cleanDateObj(deathDate);\n  }\n\n  if (gd.birthDate && gd.birthDate.dateString && gd.birthDate.dateString.length > 4) {\n    dataString += \" (born \" + gd.birthDate.dateString + \")\";\n  } else {\n    let age = cleanAge(gd.ageAtDeath);\n    if (age) {\n      dataString += \" (age \" + age + \")\";\n    }\n  }\n\n  let parentNames = gd.inferParentNamesForDataString();\n  if (parentNames.fatherName || parentNames.motherName) {\n    if (gd.personGender == \"male\") {\n      dataString += \", son of \";\n    } else if (gd.personGender == \"female\") {\n      dataString += \", daughter of \";\n    } else {\n      dataString += \", child of \";\n    }\n    if (parentNames.fatherName) {\n      dataString += parentNames.fatherName;\n    }\n    if (parentNames.motherName) {\n      if (parentNames.fatherName) {\n        dataString += \" & \";\n      }\n      dataString += parentNames.motherName;\n    }\n    dataString += \",\";\n  }\n\n  if (gd.spouses && gd.spouses.length == 1) {\n    let spouse = gd.spouses[0];\n    if (spouse.name) {\n      let spouseName = spouse.name.inferFullName();\n      if (spouseName) {\n        let relation = \"spouse\";\n        if (gd.personGender == \"male\") {\n          relation = \"husband\";\n        } else if (gd.personGender == \"female\") {\n          relation = \"wife\";\n        }\n        if (!dataString.endsWith(\",\")) {\n          dataString += \",\";\n        }\n        dataString += \" \" + relation + \" of \" + spouseName + \",\";\n      }\n    }\n  }\n\n  let place = gd.inferFullEventPlace();\n  if (place) {\n    dataString += \" \" + getPlaceWithPreposition(place);\n  } else {\n    let residencePlace = gd.inferResidencePlace();\n    if (residencePlace) {\n      dataString += \" residing \" + getPlaceWithPreposition(residencePlace);\n    }\n  }\n\n  if (dataString.endsWith(\",\")) {\n    dataString = dataString.substring(0, dataString.length - 1);\n  }\n\n  if (gd.mothersMaidenName) {\n    dataString += \", mother's maiden name \" + gd.mothersMaidenName;\n  }\n\n  return dataString;\n}\n\nfunction getBaptismString(gd, options) {\n  let dataString = getFullName(gd);\n\n  if (gd.role && gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Parent) {\n    dataString += \"'s \" + (0,_narrative_or_sentence_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getPrimaryPersonChildTerm)(gd) + \" \" + gd.primaryPerson;\n  }\n\n  dataString += \" baptism\";\n\n  let date = gd.inferEventDateObj();\n  if (date) {\n    dataString += \" \" + getDateWithPreposition(date);\n  }\n\n  if (gd.birthDate) {\n    let birthDate = gd.inferBirthDateObj();\n    if (birthDate) {\n      dataString += \" (born \" + cleanDateObj(birthDate) + \")\";\n    }\n  }\n\n  let place = gd.inferFullEventPlace();\n\n  let parentNames = gd.inferParentNamesForDataString();\n  if (parentNames.fatherName || parentNames.motherName) {\n    if (gd.personGender == \"male\") {\n      dataString += \", son of \";\n    } else if (gd.personGender == \"female\") {\n      dataString += \", daughter of \";\n    } else {\n      dataString += \", child of \";\n    }\n    if (parentNames.fatherName) {\n      dataString += parentNames.fatherName;\n    }\n    if (parentNames.motherName) {\n      if (parentNames.fatherName) {\n        dataString += \" & \";\n      }\n      dataString += parentNames.motherName;\n    }\n    if (place) {\n      dataString += \",\";\n    }\n  }\n\n  if (place) {\n    dataString += \" \" + getPlaceWithPreposition(place);\n  }\n\n  // sometimes a baptism has a death date. (e.g. germany_baptism_1840_johanna_hartmann)\n  let deathDate = gd.inferDeathDateObj();\n  if (deathDate) {\n    dataString += \" and died \" + getDateWithPreposition(deathDate);\n  }\n\n  return dataString;\n}\n\nfunction getMarriageString(gd, options) {\n  let dataString = \"\";\n\n  if (gd.role && gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Parent) {\n    let possessiveName = getFullName(gd) + \"'s\";\n    dataString += possessiveName + \" \" + (0,_narrative_or_sentence_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getPrimaryPersonChildTerm)(gd);\n    if (gd.primaryPerson) {\n      dataString += \" \" + gd.primaryPerson;\n    }\n\n    let age = cleanAge(gd.primaryPersonAge);\n    if (age) {\n      dataString += \" (\" + age + \")\";\n    }\n  } else {\n    dataString += getFullName(gd);\n\n    let age = cleanAge(gd.ageAtEvent);\n    if (age) {\n      dataString += \" (\" + age + \")\";\n    }\n  }\n\n  dataString += \" marriage\";\n\n  if (gd.spouses && gd.spouses.length == 1 && gd.spouses[0].name) {\n    let spouseName = gd.spouses[0].name.inferFullName();\n    dataString += \" to \" + spouseName;\n\n    let spouseAge = cleanAge(gd.spouses[0].age);\n    if (spouseAge) {\n      dataString += \" (\" + spouseAge + \")\";\n    }\n  }\n\n  if (gd.recordSubtype && gd.recordSubtype == _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RecordSubtype.Banns) {\n    dataString += \". Banns read\";\n  }\n\n  if (gd.marriageDate) {\n    let date = new _generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.WtsDate();\n    date.dateString = gd.marriageDate;\n    dataString += \" \" + getDateWithPreposition(date);\n  } else {\n    let date = gd.inferEventDateObj();\n    if (date) {\n      let prepSuffix = \"\";\n      if (gd.recordSubtype && gd.recordSubtype == _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RecordSubtype.MarriageOrBanns) {\n        prepSuffix = \"or after\";\n      }\n      dataString += \" \" + getDateWithPreposition(date, prepSuffix);\n    }\n  }\n\n  let place = gd.inferFullEventPlace();\n  if (place) {\n    dataString += \" \" + getPlaceWithPreposition(place);\n  }\n\n  return dataString;\n}\n\nfunction getBurialString(gd, options) {\n  let dataString = getFullName(gd);\n  if (gd.role && gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Parent) {\n    dataString += \"'s \" + (0,_narrative_or_sentence_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getPrimaryPersonChildTerm)(gd) + \" \" + gd.primaryPerson;\n  } else {\n    if (gd.parents) {\n      let fatherName = \"\";\n      if (gd.parents.father && gd.parents.father.name) {\n        fatherName = gd.parents.father.name.inferFullName();\n      }\n      let motherName = \"\";\n      if (gd.parents.mother && gd.parents.mother.name) {\n        motherName = gd.parents.mother.name.inferFullName();\n      }\n\n      if (gd.personGender == \"male\") {\n        dataString += \", son of\";\n      } else if (gd.personGender == \"female\") {\n        dataString += \", daughter of\";\n      } else {\n        dataString += \", child of\";\n      }\n      if (fatherName) {\n        dataString += \" \" + fatherName;\n      }\n      if (motherName) {\n        if (fatherName) {\n          dataString += \" &\";\n        }\n        dataString += \" \" + motherName;\n      }\n\n      dataString += \",\";\n    }\n  }\n\n  if (gd.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.DeathOrBurial) {\n    dataString += \" death or burial\";\n  } else {\n    dataString += \" burial\";\n  }\n\n  let deathDate = gd.inferDeathDateObj();\n  let age = cleanAge(gd.ageAtDeath);\n  if (!age) {\n    age = cleanAge(gd.ageAtEvent);\n  }\n  if (deathDate && age) {\n    dataString += \" (died \" + getDateWithPreposition(deathDate) + \" at age \" + age + \")\";\n  } else if (deathDate) {\n    dataString += \" (died \" + getDateWithPreposition(deathDate) + \")\";\n  } else if (age) {\n    dataString += \" (died age \" + age + \")\";\n  }\n\n  let burialDate = gd.inferEventDateObj();\n  if (burialDate) {\n    dataString += \" \" + getDateWithPreposition(burialDate);\n  }\n\n  let place = gd.inferFullEventPlace();\n  if (place) {\n    dataString += \" \" + getPlaceWithPreposition(place);\n  }\n\n  if (gd.causeOfDeath) {\n    dataString += \". Cause of death: \" + gd.causeOfDeath;\n  }\n\n  return dataString;\n}\n\nfunction getCremationString(gd, options) {\n  let dataString = getFullName(gd);\n  dataString += \" cremation\";\n\n  let deathDate = gd.inferDeathDateObj();\n  let age = cleanAge(gd.ageAtDeath);\n  if (deathDate && age) {\n    dataString += \" (died \" + getDateWithPreposition(deathDate) + \" at age \" + age + \")\";\n  } else if (deathDate) {\n    dataString += \" (died \" + getDateWithPreposition(deathDate) + \")\";\n  } else if (age) {\n    dataString += \" (died age \" + age + \")\";\n  }\n\n  let cremationDate = gd.inferEventDateObj();\n  if (cremationDate) {\n    dataString += \" \" + getDateWithPreposition(cremationDate);\n  }\n\n  let place = gd.inferFullEventPlace();\n  if (place) {\n    dataString += \" \" + getPlaceWithPreposition(place);\n  }\n\n  return dataString;\n}\n\nfunction getProbateString(gd, options) {\n  let dataString = getFullName(gd);\n  dataString += \" probate\";\n\n  let date = gd.inferEventDateObj();\n  if (date) {\n    dataString += \" \" + getDateWithPreposition(date);\n  }\n\n  let place = gd.inferFullEventPlace();\n  if (place) {\n    dataString += \" \" + getPlaceWithPreposition(place);\n  }\n\n  let deathDate = gd.inferDeathDateObj();\n  if (deathDate) {\n    dataString += \". Died \" + cleanDateObj(deathDate);\n\n    let deathPlace = gd.inferDeathPlace();\n    if (deathPlace) {\n      dataString += \" \" + getPlaceWithPreposition(deathPlace);\n    } else {\n      let residencePlace = gd.inferResidencePlace();\n      if (residencePlace) {\n        dataString += \" residing \" + getPlaceWithPreposition(residencePlace);\n      }\n    }\n  } else {\n    let residencePlace = gd.inferResidencePlace();\n    if (residencePlace) {\n      dataString += \". Residence \" + residencePlace;\n    }\n  }\n\n  if (gd.occupation) {\n    dataString += \". Occupation: \" + gd.occupation;\n  }\n\n  return dataString;\n}\n\nfunction getScottishWillString(gd, options) {\n  if (gd.role && gd.role != _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Primary) {\n    return \"\"; // fall back to non-custom string\n  }\n\n  let dataString = \"\";\n\n  if (gd.recordSubtype == \"Probate\") {\n    dataString = \"Confirmation of probate of will of \";\n  } else if (gd.recordSubtype == \"Testament\") {\n    if (gd.testateOrIntestate == \"testate\") {\n      dataString = \"Confirmation of will of \";\n    } else if (gd.testateOrIntestate == \"intestate\") {\n      dataString = \"Confirmation of testament of \";\n    } else {\n      dataString = \"Confirmation of will or testament of \";\n    }\n  } else if (gd.recordSubtype == \"Inventory\") {\n    dataString = \"Confirmation of inventory for \";\n  } else if (gd.recordSubtype == \"AdditionalInventory\") {\n    dataString = \"Confirmation of inventory for \";\n  } else if (gd.recordSubtype == \"AdditionalInventory\") {\n    dataString = \"Confirmation of additional inventory for \";\n  } else {\n    dataString = \"Confirmation of will or testament of \";\n  }\n\n  dataString += getFullName(gd);\n\n  if (gd.courtName) {\n    dataString += \" at \" + gd.courtName;\n  } else {\n    let place = gd.inferFullEventPlace();\n    if (place) {\n      dataString += \" in \" + place;\n    }\n  }\n\n  let eventDate = gd.inferEventDateObj();\n  let origDate = gd.originalConfirmationGrantedDate;\n  let grantedDate = gd.grantedDate;\n\n  if (eventDate) {\n    if (grantedDate) {\n      dataString += \" \" + getDateFromStringWithPreposition(grantedDate);\n      dataString += \" (original confirmation \" + getDateWithPreposition(eventDate) + \")\";\n    } else if (origDate) {\n      dataString += \" \" + getDateWithPreposition(eventDate);\n      dataString += \" (original confirmation \" + getDateFromStringWithPreposition(origDate) + \")\";\n    } else {\n      dataString += \" \" + getDateWithPreposition(eventDate);\n    }\n  }\n\n  let deathDate = gd.inferDeathDateObj();\n  if (deathDate) {\n    dataString += \". Died \" + cleanDateObj(deathDate);\n\n    let deathPlace = gd.inferDeathPlace();\n    if (deathPlace && deathPlace != place) {\n      dataString += \" \" + getPlaceWithPreposition(place);\n    }\n  }\n\n  if (gd.occupation) {\n    dataString += \". Occupation: \" + gd.occupation;\n  }\n\n  return dataString;\n}\n\nfunction getWillString(gd, options) {\n  if (gd.inferEventCountry() == \"Scotland\" || (gd.courtName && gd.courtName.startsWith(\"non-Scot\"))) {\n    return getScottishWillString(gd, options);\n  }\n\n  if (gd.role && gd.role != _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Primary) {\n    return \"\"; // fall back to non-custom string\n  }\n\n  let dateObj = gd.inferEventDateObj();\n  let deathDateObj = gd.inferDeathDateObj();\n\n  let hasProbateDate = false;\n  if (dateObj) {\n    if (!deathDateObj || dateObj.getDateString() != deathDateObj.getDateString()) {\n      // there is a probate date (probably)\n      hasProbateDate = true;\n    }\n  }\n\n  let dataString = \"Will of \" + getFullName(gd);\n\n  let eventPlace = gd.inferFullEventPlace();\n  let deathPlace = gd.inferDeathPlace();\n  let residencePlace = gd.inferResidencePlace();\n\n  let usedResidence = false;\n  if (residencePlace) {\n    dataString += \" of \" + residencePlace;\n    usedResidence = true;\n  } else if (eventPlace) {\n    dataString += \" of \" + eventPlace;\n  }\n\n  if (hasProbateDate) {\n    dataString += \", granted probate\";\n    dataString += \" \" + getDateWithPreposition(dateObj);\n  }\n\n  let deathDate = gd.inferDeathDateObj();\n  if (deathDate) {\n    dataString += \". Died \" + cleanDateObj(deathDate);\n    if (deathPlace) {\n      dataString += \" \" + getPlaceWithPreposition(deathPlace);\n    } else if (!usedResidence && residencePlace) {\n      dataString += \" \" + getPlaceWithPreposition(residencePlace);\n    }\n  }\n\n  if (gd.occupation) {\n    dataString += \". Occupation: \" + gd.occupation;\n  }\n\n  return dataString;\n}\n\nfunction getDivorceString(gd, options) {\n  let dataString = getFullName(gd);\n  dataString += \" divorce\";\n\n  if (gd.spouses && gd.spouses.length == 1 && gd.spouses[0].name) {\n    let spouseName = gd.spouses[0].name.inferFullName();\n    dataString += \" from \" + spouseName;\n  }\n\n  let date = gd.inferEventDateObj();\n  if (date) {\n    dataString += \" \" + getDateWithPreposition(date);\n  }\n\n  let place = gd.inferFullEventPlace();\n  if (place) {\n    dataString += \" \" + getPlaceWithPreposition(place);\n  }\n\n  return dataString;\n}\n\nconst DataString = {\n  buildDataString: function (input) {\n    if (!input || !input.generalizedData || !input.options) {\n      return \"\";\n    }\n\n    let gd = input.generalizedData;\n    let options = input.options;\n\n    let dataString = \"\";\n\n    switch (gd.recordType) {\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.BirthRegistration: {\n        dataString = getBirthRegistrationString(gd, options);\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Birth:\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.BirthOrBaptism: {\n        dataString = getBirthString(gd, options);\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.DeathRegistration: {\n        dataString = getDeathRegistrationString(gd, options);\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Death: {\n        dataString = getDeathString(gd, options);\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.MarriageRegistration: {\n        dataString = getMarriageRegistrationString(gd, options);\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Baptism: {\n        dataString = getBaptismString(gd, options);\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Marriage: {\n        dataString = getMarriageString(gd, options);\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Burial:\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.DeathOrBurial: {\n        dataString = getBurialString(gd, options);\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Cremation: {\n        dataString = getCremationString(gd, options);\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Census: {\n        dataString = getCensusString(gd, options);\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Probate: {\n        dataString = getProbateString(gd, options);\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Will: {\n        dataString = getWillString(gd, options);\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Divorce: {\n        dataString = getDivorceString(gd, options);\n        break;\n      }\n    }\n\n    if (dataString) {\n      dataString += \".\";\n    }\n\n    return dataString;\n  },\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/base/core/data_string.mjs\n");

/***/ }),

/***/ "./extension/base/core/generalize_data_utils.mjs":
/*!*******************************************************!*\
  !*** ./extension/base/core/generalize_data_utils.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GD\": () => (/* binding */ GD),\n/* harmony export */   \"GeneralizedData\": () => (/* binding */ GeneralizedData),\n/* harmony export */   \"RT\": () => (/* reexport safe */ _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT),\n/* harmony export */   \"WtsDate\": () => (/* binding */ WtsDate),\n/* harmony export */   \"WtsName\": () => (/* binding */ WtsName),\n/* harmony export */   \"WtsPlace\": () => (/* binding */ WtsPlace),\n/* harmony export */   \"dateQualifiers\": () => (/* binding */ dateQualifiers)\n/* harmony export */ });\n/* harmony import */ var _country_data_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./country_data.mjs */ \"./extension/base/core/country_data.mjs\");\n/* harmony import */ var _record_collections_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./record_collections.mjs */ \"./extension/base/core/record_collections.mjs\");\n/* harmony import */ var _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./wts_string.mjs */ \"./extension/base/core/wts_string.mjs\");\n/* harmony import */ var _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./wts_date.mjs */ \"./extension/base/core/wts_date.mjs\");\n/* harmony import */ var _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./record_type.mjs */ \"./extension/base/core/record_type.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\n\n\n\n\nconst possibleLifeSpan = 120;\n\nconst dateQualifiers = {\n  NONE: 0,\n  EXACT: 1,\n  ABOUT: 2,\n  BEFORE: 3,\n  AFTER: 4,\n};\n\nconst GD = {\n  extractYearStringFromDateString: function (date) {\n    var result = undefined;\n    if (date != undefined && date != \"\") {\n      const year = date.replace(/^.*(\\d\\d\\d\\d)$/, \"$1\");\n      if (year.length == 4) {\n        result = year;\n      }\n    }\n    return result;\n  },\n\n  extractYearNumFromDateString: function (date) {\n    var result = 0;\n    let yearString = extractYearStringFromDateString(date);\n    if (yearString) {\n      var yearNum = parseInt(yearString);\n      if (yearNum == NaN) {\n        yearNum = 0;\n      }\n      result = yearNum;\n    }\n    return result;\n  },\n\n  standardizeGender: function (string) {\n    if (!string) {\n      return \"\";\n    }\n    let lc = string.toLowerCase();\n    if (lc == \"male\" || lc == \"m\" || lc == \"m (male)\") {\n      return \"male\";\n    }\n    if (lc == \"female\" || lc == \"f\" || lc == \"f (female)\") {\n      return \"female\";\n    }\n    if (lc.startsWith(\"m\")) {\n      return \"male\";\n    }\n    if (lc.startsWith(\"f\")) {\n      return \"female\";\n    }\n    return \"\";\n  },\n\n  standardizeMaritalStatus: function (string) {\n    if (!string) {\n      return \"\";\n    }\n    let lc = string.toLowerCase();\n    if (lc == \"married\" || lc == \"m\" || lc.startsWith(\"mar\")) {\n      return \"married\";\n    }\n    if (\n      lc == \"single\" ||\n      lc == \"s\" ||\n      lc == \"unmarried\" ||\n      lc == \"u\" ||\n      lc.startsWith(\"unm\") ||\n      lc.startsWith(\"sin\") ||\n      lc.startsWith(\"nev\")\n    ) {\n      return \"single\";\n    }\n    if (lc == \"widowed\" || lc == \"w\" || lc == \"wd\" || lc.startsWith(\"wid\")) {\n      return \"widowed\";\n    }\n    if (lc == \"divorced\" || lc == \"d\" || lc.startsWith(\"div\")) {\n      return \"divorced\";\n    }\n    if (lc == \"separated\" || lc.startsWith(\"sep\")) {\n      return \"separated\";\n    }\n    // Note that \"-\" is turned into \"\", this is typical on some site for young children\n    return \"\";\n  },\n\n  standardizeRelationshipToHead: function (string) {\n    if (!string) {\n      return \"\";\n    }\n\n    const exactMap = {\n      head: \"head\",\n      husband: \"husband\",\n      husbnd: \"husband\",\n      self: \"head\",\n      \"self (head)\": \"head\",\n      wife: \"wife\",\n      w: \"wife\",\n      // children\n      son: \"son\",\n      s: \"son\",\n      daughter: \"daughter\",\n      dau: \"daughter\",\n      d: \"daughter\",\n      // step children\n      stepdaughter: \"stepdaughter\",\n      \"step-daughter\": \"stepdaughter\",\n      \"step daughter\": \"stepdaughter\",\n      \"step-dau\": \"stepdaughter\",\n      \"step dau\": \"stepdaughter\",\n      stepdau: \"stepdaughter\",\n      stpdau: \"stepdaughter\",\n      \"step-d\": \"stepdaughter\",\n      \"step d\": \"stepdaughter\",\n\n      stepson: \"stepson\",\n      \"step-son\": \"stepson\",\n      \"step son\": \"stepson\",\n      stpson: \"stepson\",\n      \"step-s\": \"stepson\",\n      \"step s\": \"stepson\",\n\n      \"step-child\": \"stepchild\",\n      \"step child\": \"stepchild\",\n      stepchild: \"stepchild\",\n      // in-law children\n      \"daughter-in-law\": \"daughter-in-law\",\n      \"dau-in-law\": \"daughter-in-law\",\n      daulaw: \"daughter-in-law\",\n      \"son-in-law\": \"son-in-law\",\n      sonlaw: \"son-in-law\",\n\n      // grandchildren\n      grandchild: \"grandchild\",\n      granddaughter: \"granddaughter\",\n      grndau: \"granddaughter\",\n      grandson: \"grandson\",\n      grnson: \"grandson\",\n      // parents\n      father: \"father\",\n      mother: \"mother\",\n      // in-law parents\n      \"father-in-law\": \"father-in-law\",\n      \"fa-law\": \"father-in-law\",\n      \"mother-in-law\": \"mother-in-law\",\n      \"ma-law\": \"mother-in-law\",\n      // step parents\n      stepfather: \"stepfather\",\n      \"step-father\": \"stepfather\",\n      stpdad: \"stepfather\",\n      steppa: \"stepfather\",\n      stppa: \"stepfather\",\n      stepmother: \"stepmother\",\n      \"step-mother\": \"stepmother\",\n      stpmum: \"stepmother\",\n      stepma: \"stepmother\",\n      stpma: \"stepmother\",\n      // grandparents\n      grandfather: \"grandfather\",\n      granpa: \"grandfather\",\n      grandmother: \"grandmother\",\n      granma: \"grandmother\",\n\n      // siblings\n      brother: \"brother\",\n      brothr: \"brother\",\n      sister: \"sister\",\n      \"brother-in-law\": \"brother-in-law\",\n      \"brother in law\": \"brother-in-law\",\n      brolaw: \"brother-in-law\",\n      \"half brother\": \"half brother\",\n      hlfbro: \"half brother\",\n      \"half sister\": \"half sister\",\n      hlfsis: \"half sister\",\n      \"sister-in-law\": \"sister-in-law\",\n      \"sister in law\": \"sister-in-law\",\n      sislaw: \"sister-in-law\",\n      stepbrother: \"stepbrother\",\n      \"step-brother\": \"stepbrother\",\n      stpbro: \"stepbrother\",\n      stepsister: \"stepsister\",\n      \"step-sister\": \"stepsister\",\n      stpsis: \"stepsister\",\n      // other family\n      aunt: \"aunt\",\n      cousin: \"cousin\",\n      \"great aunt\": \"great aunt\",\n      gtaunt: \"great aunt\",\n      \"great uncle\": \"great uncle\",\n      gtuncl: \"great uncle\",\n      niece: \"niece\",\n      nephew: \"nephew\",\n      uncle: \"uncle\",\n      // other relationships\n      apprentice: \"apprentice\",\n      appren: \"apprentice\",\n      assistant: \"assistant\",\n      asstnt: \"assistant\",\n      boarder: \"boarder\",\n      boardr: \"boarder\",\n      governess: \"governess\",\n      gvrnss: \"governess\",\n      inmate: \"inmate\",\n      lodger: \"lodger\",\n      mistress: \"mistress\",\n      mstres: \"mistress\",\n      \"nurse child\": \"nurse child\",\n      \"nrs-ch\": \"nurse child\",\n      patient: \"patient\",\n      ptient: \"patient\",\n      prisoner: \"prisoner\",\n      prisnr: \"prisoner\",\n      pupil: \"pupil\",\n      relative: \"relative\",\n      reltiv: \"relative\",\n      scholar: \"scholar\",\n      servant: \"servant\",\n      servnt: \"servant\",\n      serv: \"servant\",\n      stranger: \"stranger\",\n      strngr: \"stranger\",\n      traveller: \"traveller\",\n      trvelr: \"traveller\",\n      visitor: \"visitor\",\n      visitr: \"visitor\",\n\n      \"wife's daughter\": \"wife's daughter\",\n      \"wife's dau\": \"wife's daughter\",\n      wifdau: \"wife's daughter\",\n      \"wife's mother\": \"wife's mother\",\n      \"wif-ma\": \"wife's mother\",\n      \"wife's son\": \"wife's son\",\n      wifson: \"wife's son\",\n    };\n\n    // allows for transcription errors also (like \"Mead\" for head)\n    const fuzzyList = [\n      { standard: \"head\", starts: [\"head\", \"mead\"], notContains: [\"master\"] },\n\n      // these more fuzzy ones should come last\n      {\n        standard: \"daughter\",\n        starts: [\"dau\"],\n        notContains: [\"step\", \"law\", \"-\", \" \"],\n      },\n      { standard: \"step-daughter\", starts: [\"dau\"], andContains: [\"step\"] },\n      { standard: \"step-daughter\", starts: [\"step\"], andContains: [\"dau\"] },\n    ];\n\n    let lc = string.toLowerCase();\n\n    let exactValue = exactMap[lc];\n    if (exactValue) {\n      return exactValue;\n    }\n\n    let match = \"\";\n    for (let fuzzy of fuzzyList) {\n      if (fuzzy.starts) {\n        for (let start of fuzzy.starts) {\n          if (lc.startsWith(start)) {\n            match = fuzzy.standard;\n            break;\n          }\n        }\n      }\n      if (match && fuzzy.notContains) {\n        for (let cont of fuzzy.notContains) {\n          if (lc.includes(cont)) {\n            match = \"\";\n            break;\n          }\n        }\n      }\n      if (match && fuzzy.andContains) {\n        let doesContainOne = false;\n        for (let cont of fuzzy.andContains) {\n          if (lc.includes(cont)) {\n            doesContainOne = true;\n            break;\n          }\n        }\n        if (!doesContainOne) {\n          match = \"\";\n        }\n      }\n\n      if (match) {\n        return match;\n      }\n    }\n\n    console.log(\"standardizeRelationshipToHead: unrecognized: \" + lc);\n\n    return lc;\n  },\n\n  standardizeOccupation: function (string) {\n    // we could handle all the abbreviations here: https://www.freecen.org.uk/cms/information-for-transcribers/abbreviations\n\n    if (!string) {\n      return \"\";\n    }\n\n    let newValue = string;\n\n    const parenMap = {\n      \"em'ee\": \"employee\",\n    };\n\n    // see if there is a value in parentheses at end\n    let lastOpenParenIndex = string.lastIndexOf(\"(\");\n    if (lastOpenParenIndex != -1) {\n      let closeParenIndex = string.indexOf(\")\", lastOpenParenIndex);\n      if (closeParenIndex != -1) {\n        let parenString = string.substring(lastOpenParenIndex + 1, closeParenIndex).trim();\n        let remainderString = string.substring(closeParenIndex + 1).trim();\n        parenString = parenString.toLowerCase();\n        let match = parenMap[parenString];\n        if (match) {\n          newValue = string.substring(0, lastOpenParenIndex).trim();\n          newValue += \" (\" + match + \")\";\n          if (remainderString) {\n            newValue += \" \" + remainderString;\n          }\n        }\n      }\n    }\n\n    return newValue;\n  },\n};\n\nclass WtsDate {\n  constructor() {\n    // Fields are only set if from the record/profile, methods can infer/extract\n    // possible fields are:\n    // dateString: the date string from the record/profile\n    // yearString: a string, only set if that is what the record/profile specifies\n    // quarter: a number from 1-4\n    // qualifier: the dateQualifiers enum\n  }\n\n  static createFromPlainObject(obj) {\n    if (!obj) {\n      return undefined;\n    }\n\n    let classObj = new WtsDate();\n    const keys = Object.keys(obj);\n    for (let key of keys) {\n      classObj[key] = obj[key];\n    }\n\n    return classObj;\n  }\n\n  getYearString() {\n    if (this.yearString) {\n      return this.yearString;\n    }\n\n    if (this.dateString) {\n      return GD.extractYearStringFromDateString(this.dateString);\n    }\n  }\n\n  getDateString() {\n    if (this.dateString) {\n      return this.dateString;\n    }\n    if (this.yearString) {\n      return this.yearString;\n    }\n  }\n\n  setDateAndQualifierFromString(dateString, isYearString) {\n    const prefixes = [\n      { prefix: \"about\", qualifier: dateQualifiers.ABOUT },\n      { prefix: \"abt\", qualifier: dateQualifiers.ABOUT },\n      { prefix: \"after\", qualifier: dateQualifiers.AFTER }, // must come before aft\n      { prefix: \"aft\", qualifier: dateQualifiers.AFTER },\n      { prefix: \"before\", qualifier: dateQualifiers.BEFORE }, // must come before bef\n      { prefix: \"bef\", qualifier: dateQualifiers.BEFORE },\n    ];\n\n    let qualifier = dateQualifiers.NONE;\n    let lcDateString = dateString.toLowerCase();\n\n    if (lcDateString == \"deceased\") {\n      dateString = \"\";\n      qualifier = dateQualifiers.ABOUT;\n    } else {\n      for (let prefixEntry of prefixes) {\n        if (lcDateString.startsWith(prefixEntry.prefix)) {\n          qualifier = prefixEntry.qualifier;\n          dateString = dateString.substring(prefixEntry.prefix.length).trim();\n          while (dateString.startsWith(\".\")) {\n            dateString = dateString.substring(1).trim();\n          }\n          break;\n        }\n      }\n    }\n\n    if (qualifier != dateQualifiers.NONE) {\n      this.qualifier = qualifier;\n    }\n\n    if (isYearString) {\n      this.yearString = dateString;\n    } else {\n      this.dateString = dateString;\n    }\n  }\n\n  getQualifiedDateString(dateString, qualifier, preposition) {\n    let prep = \"\";\n    if (preposition) {\n      prep = preposition + \" \";\n    }\n\n    switch (qualifier) {\n      case dateQualifiers.ABOUT:\n        return prep + \"about \" + dateString;\n      case dateQualifiers.AFTER:\n        return \"after \" + dateString;\n      case dateQualifiers.BEFORE:\n        return \"before \" + dateString;\n    }\n\n    return prep + dateString;\n  }\n\n  getFormattedStringForCitationOrNarrative(format, highlightOption, addPreposition, prepSuffix = \"\") {\n    let dateString = this.getDateString();\n    let qualifier = this.qualifier;\n\n    let parsedDate = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.parseDateString(dateString);\n    if (!parsedDate.isValid) {\n      if (addPreposition) {\n        let preposition = \"on\";\n        if (dateString.length <= 4 || /^[a-zA-Z].*$/.test(dateString)) {\n          preposition = \"in\";\n        }\n\n        if (prepSuffix) {\n          preposition += \" \" + prepSuffix;\n        }\n        return this.getQualifiedDateString(dateString, qualifier, preposition);\n      } else {\n        return this.getQualifiedDateString(dateString, qualifier);\n      }\n    }\n\n    let newString = \"\";\n    if (format == \"short\") {\n      newString = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getStdShortFormDateString(parsedDate);\n    } else if (format == \"long\") {\n      newString = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getStdLongFormDateString(parsedDate);\n    } else if (format == \"theNth\") {\n      newString = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getStdNthFormDateString(parsedDate);\n    } else if (format == \"monthComma\") {\n      newString = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getUsLongFormDateString(parsedDate);\n    } else if (format == \"monthCommaNth\") {\n      newString = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getUsNthFormDateString(parsedDate);\n    } else {\n      console.log(\"unknown date format: \" + format);\n      newString = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getStdLongFormDateString(parsedDate);\n    }\n\n    newString = _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.highlightString(newString, highlightOption);\n\n    let preposition = \"on\";\n    if (!parsedDate.hasDay) {\n      preposition = \"in\";\n    }\n\n    if (prepSuffix) {\n      preposition += \" \" + prepSuffix;\n    }\n\n    if (!addPreposition) {\n      preposition = \"\";\n    }\n\n    return this.getQualifiedDateString(newString, qualifier, preposition);\n  }\n\n  getNarrativeFormat(format, highlightOption, addPreposition, prepSuffix = \"\") {\n    return this.getFormattedStringForCitationOrNarrative(format, highlightOption, addPreposition, prepSuffix);\n  }\n\n  getDataStringFormat(addPreposition, prepSuffix = \"\") {\n    return this.getFormattedStringForCitationOrNarrative(\"short\", \"none\", addPreposition, prepSuffix);\n  }\n}\n\n// NOTE: Is Location of Place the best term? All the sites (including wikitree) use \"Place\"\nclass WtsPlace {\n  constructor() {\n    // Fields are only set if from the record/profile, methods can infer/extract\n    // possible fields are:\n    // placeString: the place string from the record/profile\n    // country: a string, only set if that is what the record/profile specifies\n    // qualifier: the placeQualifiers enum\n  }\n\n  static createFromPlainObject(obj) {\n    if (!obj) {\n      return undefined;\n    }\n\n    let classObj = new WtsPlace();\n    const keys = Object.keys(obj);\n    for (let key of keys) {\n      classObj[key] = obj[key];\n    }\n\n    return classObj;\n  }\n\n  separatePlaceIntoParts() {\n    // it can be hard to get the county from the string.\n    let country = undefined;\n    let placeNameMinusCountry = this.placeString;\n\n    let result = {};\n\n    if (!placeNameMinusCountry) {\n      return result;\n    }\n\n    let countryExtract = _country_data_mjs__WEBPACK_IMPORTED_MODULE_0__.CD.extractCountryFromPlaceName(this.placeString);\n    if (countryExtract) {\n      country = countryExtract.country;\n      placeNameMinusCountry = countryExtract.remainder;\n\n      if (country.hasStates) {\n        return result;\n      }\n\n      result.country = country.stdName;\n    }\n\n    let placeNameMinusCounty = \"\";\n\n    let possibleCountyName = undefined;\n    let lastCommaIndex = placeNameMinusCountry.lastIndexOf(\",\");\n    if (lastCommaIndex != -1) {\n      possibleCountyName = placeNameMinusCountry.substring(lastCommaIndex + 1).trim();\n      placeNameMinusCounty = placeNameMinusCountry.substring(0, lastCommaIndex).trim();\n    } else {\n      possibleCountyName = placeNameMinusCountry;\n    }\n\n    result.localPlace = placeNameMinusCountry;\n    if (country) {\n      let stdCountyName = _country_data_mjs__WEBPACK_IMPORTED_MODULE_0__.CD.standardizeCountyNameForCountry(possibleCountyName, country);\n      if (stdCountyName) {\n        result.county = stdCountyName;\n        result.localPlace = placeNameMinusCounty;\n      } else if (possibleCountyName) {\n        // it is possible that the county name has a comma in in like \"Yorkshire, East Riding\"\n        let lastCommaIndex = placeNameMinusCounty.lastIndexOf(\",\");\n        if (lastCommaIndex != -1) {\n          let possibleExtraCountyName = placeNameMinusCounty.substring(lastCommaIndex + 1).trim();\n          if (possibleExtraCountyName) {\n            let combinedName = possibleExtraCountyName + \", \" + possibleCountyName;\n            stdCountyName = _country_data_mjs__WEBPACK_IMPORTED_MODULE_0__.CD.standardizeCountyNameForCountry(combinedName, country);\n            if (stdCountyName) {\n              placeNameMinusCounty = placeNameMinusCounty.substring(0, lastCommaIndex).trim();\n              result.county = stdCountyName;\n              result.localPlace = placeNameMinusCounty;\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  inferCounty() {\n    if (this.county) {\n      return this.county;\n    }\n\n    if (!this.placeString) {\n      return \"\";\n    }\n\n    // it can be hard to get the county from the string.\n    let country = undefined;\n    let placeNameMinusCountry = this.placeString;\n\n    let countryExtract = _country_data_mjs__WEBPACK_IMPORTED_MODULE_0__.CD.extractCountryFromPlaceName(this.placeString);\n    if (countryExtract) {\n      country = countryExtract.country;\n      placeNameMinusCountry = countryExtract.remainder;\n\n      if (country.hasStates) {\n        return \"\";\n      }\n    }\n\n    let countyName = undefined;\n    let lastCommaIndex = placeNameMinusCountry.lastIndexOf(\",\");\n    if (lastCommaIndex != -1) {\n      countyName = placeNameMinusCountry.substring(lastCommaIndex + 1).trim();\n    } else {\n      countyName = placeNameMinusCountry;\n    }\n\n    if (country) {\n      let stdCountyName = _country_data_mjs__WEBPACK_IMPORTED_MODULE_0__.CD.standardizeCountyNameForCountry(countyName, country);\n      if (stdCountyName) {\n        return stdCountyName;\n      }\n    }\n  }\n\n  inferTown() {\n    // it can be hard to get the county from the string, the town is harder\n    // this is not always going to work but can be useful if you can check it later\n    let country = undefined;\n    let placeNameMinusCountry = this.placeString;\n\n    let countryExtract = _country_data_mjs__WEBPACK_IMPORTED_MODULE_0__.CD.extractCountryFromPlaceName(this.placeString);\n    if (countryExtract) {\n      country = countryExtract.country;\n      placeNameMinusCountry = countryExtract.remainder;\n\n      if (country.hasStates) {\n        return \"\";\n      }\n    }\n\n    let countyName = undefined;\n    let placeNameMinusCounty = undefined;\n    let lastCommaIndex = placeNameMinusCountry.lastIndexOf(\",\");\n    if (lastCommaIndex != -1) {\n      countyName = placeNameMinusCountry.substring(lastCommaIndex + 1).trim();\n      placeNameMinusCounty = placeNameMinusCountry.substring(0, lastCommaIndex).trim();\n    } else {\n      countyName = placeNameMinusCountry;\n    }\n\n    if (country) {\n      let stdCountyName = _country_data_mjs__WEBPACK_IMPORTED_MODULE_0__.CD.standardizeCountyNameForCountry(countyName, country);\n      if (!stdCountyName) {\n        // the county is not recognized, so it could be the twon name\n        placeNameMinusCounty = placeNameMinusCountry;\n      }\n    }\n\n    // best guess is that the town name is what is after the last comma in placeNameMinusCounty\n    let townName = \"\";\n    if (placeNameMinusCounty) {\n      lastCommaIndex = placeNameMinusCounty.lastIndexOf(\",\");\n      if (lastCommaIndex != -1) {\n        townName = placeNameMinusCounty.substring(lastCommaIndex + 1).trim();\n      } else {\n        townName = placeNameMinusCounty;\n      }\n    }\n\n    return townName;\n  }\n\n  getCommonPlace(otherPlace) {\n    if (!otherPlace || !otherPlace.placeString) {\n      return this.placeString;\n    }\n\n    if (!this.placeString) {\n      return otherPlace.placeString;\n    }\n\n    if (this.placeString == otherPlace.placeString) {\n      return this.placeString;\n    }\n\n    let thisCountry = _country_data_mjs__WEBPACK_IMPORTED_MODULE_0__.CD.extractCountryFromPlaceName(this.placeString);\n    let otherCountry = _country_data_mjs__WEBPACK_IMPORTED_MODULE_0__.CD.extractCountryFromPlaceName(otherPlace.placeString);\n    if (thisCountry && otherCountry) {\n      if (thisCountry.country.stdName != otherCountry.country.stdName) {\n        return \"\";\n      }\n    }\n\n    let thisCounty = this.inferCounty();\n    let otherCounty = otherPlace.inferCounty();\n    if (thisCounty && otherCounty) {\n      if (thisCounty == otherCounty) {\n        let place = thisCounty;\n        if (thisCountry) {\n          place += \", \" + thisCountry.country.stdName;\n        }\n        if (otherCountry) {\n          place += \", \" + otherCountry.country.stdName;\n        }\n        return place;\n      }\n    }\n\n    if (thisCountry) {\n      return thisCountry.country.stdName;\n    }\n    if (otherCountry) {\n      return otherCountry.country.stdName;\n    }\n\n    // would could also find the first difference in strings starting from end.\n    // would only work if spaces/commas were consistent\n    return \"\";\n  }\n}\n\nclass WtsName {\n  constructor() {\n    // Note, all strings have all white space replaced with single spaces and are trimmed\n    // possible fields are:\n    // name : the \"full\" name from the record/profile\n    // forenames\n    // firstName\n    // firstNames\n    // middleName\n    // middleNames\n    // prefName\n    // prefNames\n    // lastName\n  }\n\n  static createFromPlainObject(obj) {\n    if (!obj) {\n      return undefined;\n    }\n\n    let classObj = new WtsName();\n    const keys = Object.keys(obj);\n    for (let key of keys) {\n      classObj[key] = obj[key];\n    }\n\n    return classObj;\n  }\n\n  cleanName(name) {\n    if (!name) {\n      return name;\n    }\n    // remove any '.' characters in name\n    name = name.replace(/\\./g, \"\");\n    name = name.replace(/\\s+/g, \" \");\n    name = name.trim();\n    return name;\n  }\n\n  removeTitle(name, isFull = false) {\n    if (!name) {\n      return 0;\n    }\n\n    let wordCount = _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.countWords(name);\n\n    if (isFull) {\n      if (wordCount < 3) {\n        return name;\n      }\n    } else {\n      if (wordCount < 2) {\n        return name;\n      }\n    }\n\n    let firstWord = _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getFirstWord(name);\n\n    const titles = [\"mr\", \"mrs\", \"miss\", \"ms\"];\n    let lcFirstWord = firstWord.toLowerCase();\n    if (titles.includes(lcFirstWord)) {\n      // remove the title\n      return _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getWordsAfterFirstWord(name);\n    }\n\n    return name;\n  }\n\n  setFullName(name) {\n    if (name) {\n      this.name = this.cleanName(name);\n      this.name = this.removeTitle(this.name, true);\n    }\n  }\n\n  setLastName(name) {\n    if (name) {\n      this.lastName = this.cleanName(name);\n    }\n  }\n\n  setForeNames(name) {\n    if (name) {\n      this.forenames = this.cleanName(name);\n      this.forenames = this.removeTitle(this.forenames);\n    }\n  }\n\n  setFirstName(name) {\n    if (name) {\n      this.firstName = this.cleanName(name);\n      this.firstName = this.removeTitle(this.firstName);\n    }\n  }\n\n  setFirstNames(name) {\n    if (name) {\n      this.firstNames = this.cleanName(name);\n      this.firstNames = this.removeTitle(this.firstNames);\n    }\n  }\n\n  setMiddleName(name) {\n    if (name) {\n      this.middleName = this.cleanName(name);\n    }\n  }\n\n  setMiddleNames(name) {\n    if (name) {\n      this.middleNames = this.cleanName(name);\n    }\n  }\n\n  getMiddleName() {\n    if (this.middleName) {\n      return this.middleName;\n    }\n    if (this.middleNames) {\n      return _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getFirstWord(this.middleNames);\n    }\n    if (this.forenames) {\n      let middleNames = _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getWordsAfterFirstWord(this.forenames);\n      if (middleNames) {\n        return _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getFirstWord(middleNames);\n      }\n    }\n    if (this.name) {\n      let forenames = _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getWordsBeforeLastWord(this.name);\n      if (forenames) {\n        let middleNames = _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getWordsAfterFirstWord(forenames);\n        if (middleNames) {\n          return _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getFirstWord(middleNames);\n        }\n      }\n    }\n  }\n\n  inferFullName() {\n    if (this.name) {\n      return this.name;\n    }\n\n    if (this.middleName || this.firstName || this.middleNames || this.firstNames || this.forenames || this.lastName) {\n      let name = \"\";\n      if (this.forenames) {\n        name = this.forenames;\n      } else {\n        if (this.firstNames) {\n          name = this.firstNames;\n        } else if (this.firstName) {\n          name = this.firstName;\n        }\n\n        if (this.middleNames) {\n          name += \" \" + this.middleNames;\n        } else if (this.middleName) {\n          name += \" \" + this.middleName;\n        }\n      }\n\n      if (this.lastName) {\n        if (name) {\n          name += \" \";\n        }\n        name += this.lastName;\n      }\n      return name;\n    }\n  }\n\n  inferLastName() {\n    if (this.lastName) {\n      return this.lastName;\n    }\n    if (this.name) {\n      return _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getLastWord(this.name);\n    }\n  }\n\n  inferFirstName() {\n    if (this.firstName) {\n      return this.firstName;\n    }\n    if (this.firstNames) {\n      return _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getFirstWord(this.firstNames);\n    }\n    if (this.forenames) {\n      return _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getFirstWord(this.forenames);\n    }\n    if (this.name) {\n      return _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getFirstWord(this.name);\n    }\n  }\n\n  inferMiddleName() {\n    if (this.middleName) {\n      return this.middleName;\n    }\n    if (this.middleNames) {\n      return _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getFirstWord(this.middleNames);\n    }\n    if (this.forenames) {\n      return _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getSecondWord(this.forenames);\n    }\n    if (this.name) {\n      return _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getMiddleWord(this.name);\n    }\n  }\n\n  inferSecondForename() {\n    let result = \"\";\n\n    if (this.firstNames) {\n      result = _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getSecondWord(this.firstNames);\n      if (result) {\n        return result;\n      }\n    }\n\n    if (this.forenames) {\n      result = _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getSecondWord(this.forenames);\n      if (result) {\n        return result;\n      }\n    }\n    if (this.middleName) {\n      return this.middleName;\n    }\n    if (this.middleNames) {\n      return _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getFirstWord(this.middleNames);\n    }\n    if (this.name) {\n      return _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getMiddleWord(this.name);\n    }\n  }\n\n  inferMiddleNames() {\n    if (this.middleNames) {\n      return this.middleNames;\n    }\n    if (this.middleName) {\n      return this.middleName;\n    }\n    if (this.forenames) {\n      return _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getWordsAfterFirstWord(this.forenames);\n    }\n    if (this.name) {\n      return _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getMiddleWords(this.name);\n    }\n  }\n\n  inferForenames() {\n    if (this.forenames) {\n      return this.forenames;\n    }\n    if (this.middleName || this.firstName || this.middleNames || this.firstNames) {\n      let forenames = \"\";\n      if (this.firstNames) {\n        forenames = this.firstNames;\n      } else if (this.firstName) {\n        forenames = this.firstName;\n      }\n      if (this.middleNames) {\n        forenames += \" \" + this.middleNames;\n      } else if (this.middleName) {\n        forenames += \" \" + this.middleName;\n      }\n      return forenames;\n    }\n    if (this.name) {\n      return _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getWordsBeforeLastWord(this.name);\n    }\n  }\n\n  inferPrefix() {\n    if (this.prefix) {\n      return this.prefix;\n    }\n  }\n\n  inferSuffix() {\n    if (this.suffix) {\n      return this.suffix;\n    }\n  }\n}\n\nclass GeneralizedData {\n  constructor() {\n    // NOTE: Adding a new field here will likely invalidate all generalize test data\n    // so we don't actually initialize an fields here.\n    // The only fields set are ones that come from the record/profile\n    // Supported fields are:\n    // hasValidData : not sure if we need it - used in popup to determine whether to show menu items\n    // sourceOfData : must be one of the supported site names\n    // sourceType: A string either \"record\" or \"profile\"\n    // recordType: A string, if a record this is something like \"BirthRegistration\" or \"Census\"\n    // birthDate: a WtsDate object\n    // deathDate: a WtsDate object\n    // eventDate: a WtsDate object\n    // ageAtEvent: a string\n    // ageAtDeath: a string\n    // lastNameAtBirth: string\n    // lastNameAtDeath: string\n    // mothersMaidenName: string\n    // name: WtsName object, the name from the record/profile. For a profile this would include the LNAB as lastName\n    // birthPlace: a WtsPlace object\n    // deathPlace: a WtsPlace object\n    // eventPlace: a WtsPlace object\n    // residencePlace: a WtsPlace object\n    // registrationDistrict: a string\n    // personGender: a lowerface string, either \"male\", \"female\" or not defined\n    // parents: an object with father and mother fields\n    // spouses: an array of objects\n  }\n\n  static createFromPlainObject(obj) {\n    if (!obj) {\n      return undefined;\n    }\n\n    let classObj = new GeneralizedData();\n    const keys = Object.keys(obj);\n    for (let key of keys) {\n      if (key == \"eventDate\" || key == \"birthDate\" || key == \"deathDate\") {\n        classObj[key] = WtsDate.createFromPlainObject(obj[key]);\n      } else if (key == \"name\") {\n        classObj[key] = WtsName.createFromPlainObject(obj[key]);\n      } else if (key == \"birthPlace\" || key == \"deathPlace\" || key == \"eventPlace\" || key == \"residencePlace\") {\n        classObj[key] = WtsPlace.createFromPlainObject(obj[key]);\n      } else if (key == \"parents\") {\n        classObj[key] = {};\n        if (obj.parents.father) {\n          let father = obj.parents.father;\n          classObj[key].father = {};\n          if (father.name) {\n            classObj[key].father.name = WtsName.createFromPlainObject(father.name);\n          }\n          if (father.lastNameAtBirth) {\n            classObj[key].father.lastNameAtBirth = father.lastNameAtBirth;\n          }\n          if (father.lastNameAtDeath) {\n            classObj[key].father.lastNameAtDeath = father.lastNameAtDeath;\n          }\n        }\n        if (obj.parents.mother) {\n          let mother = obj.parents.mother;\n          classObj[key].mother = {};\n          if (mother.name) {\n            classObj[key].mother.name = WtsName.createFromPlainObject(mother.name);\n          }\n          if (mother.lastNameAtBirth) {\n            classObj[key].mother.lastNameAtBirth = mother.lastNameAtBirth;\n          }\n          if (mother.lastNameAtDeath) {\n            classObj[key].mother.lastNameAtDeath = mother.lastNameAtDeath;\n          }\n        }\n      } else if (key == \"spouses\") {\n        classObj[key] = [];\n        for (let spouse of obj.spouses) {\n          let newSpouse = {};\n          if (spouse.name) {\n            newSpouse.name = WtsName.createFromPlainObject(spouse.name);\n          }\n          if (spouse.lastNameAtBirth) {\n            newSpouse.lastNameAtBirth = spouse.lastNameAtBirth;\n          }\n          if (spouse.lastNameAtBirth) {\n            newSpouse.lastNameAtBirth = spouse.lastNameAtBirth;\n          }\n          if (spouse.marriageDate) {\n            newSpouse.marriageDate = WtsDate.createFromPlainObject(spouse.marriageDate);\n          }\n          if (spouse.marriagePlace) {\n            newSpouse.marriagePlace = WtsPlace.createFromPlainObject(spouse.marriagePlace);\n          }\n          if (spouse.age) {\n            newSpouse.age = spouse.age;\n          }\n          classObj[key].push(newSpouse);\n        }\n      } else {\n        classObj[key] = obj[key];\n      }\n    }\n\n    return classObj;\n  }\n\n  static makeDateStringFromDate(date) {\n    const monthStrings = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n\n    const dateString = \"\" + date.getUTCDate() + \" \" + monthStrings[date.getUTCMonth()] + \" \" + date.getUTCFullYear();\n\n    return dateString;\n  }\n\n  static getAgeAtDate(birthDate, otherDate) {\n    let years = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getWholeYearsBetweenDateStrings(birthDate, otherDate);\n    return years;\n  }\n\n  static getSubtractAgeFromDate(dateString, age) {\n    let parsedDate = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.parseDateString(dateString);\n    if (!parsedDate.isValid) {\n      return dateString;\n    }\n\n    parsedDate.yearNum -= age;\n\n    return _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getStdShortFormDateString(parsedDate);\n  }\n\n  static getSubtractAgeFromDateYear(dateYear, age) {\n    return dateYear - age;\n  }\n\n  extractNamePartsFromForeNames(nameParts) {\n    // we assume that the full name has all white space replaced with single spaces and is trimmed\n    let firstSpaceIndex = nameParts.forenames.indexOf(\" \");\n    if (firstSpaceIndex == -1) {\n      // no spaces,\n      nameParts.firstName = nameParts.forenames;\n      return;\n    }\n\n    nameParts.firstName = nameParts.forenames.substring(0, firstSpaceIndex);\n    nameParts.middleNames = nameParts.forenames.substring(firstSpaceIndex + 1);\n\n    firstSpaceIndex = nameParts.middleNames.indexOf(\" \");\n    if (firstSpaceIndex != -1) {\n      // no spaces,\n      nameParts.middleName = nameParts.middleNames.substring(0, firstSpaceIndex);\n    } else {\n      nameParts.middleName = nameParts.middleNames;\n    }\n  }\n\n  extractNamePartsFromFullName(nameParts) {\n    if (!nameParts.fullName) {\n      return;\n    }\n\n    // we assume that the full name has all white space replaced with single spaces and is trimmed\n    let lastSpaceIndex = nameParts.fullName.lastIndexOf(\" \");\n    if (lastSpaceIndex == -1) {\n      // no spaces,\n      nameParts.lastName = nameParts.fullName;\n      return nameParts;\n    }\n\n    nameParts.forenames = nameParts.fullName.substring(0, lastSpaceIndex);\n    nameParts.lastName = nameParts.fullName.substring(lastSpaceIndex + 1);\n\n    this.extractNamePartsFromForeNames(nameParts);\n\n    return;\n  }\n\n  extractNamesFromForeNames() {\n    this.extractNamePartsFromForeNames(this.name);\n  }\n\n  extractNamesFromFullName() {\n    this.extractNamePartsFromFullName(this.name);\n    this.eventLastName = this.lastName;\n    delete this.lastName; // for the GeneralizedData itself we use eventLastName rather than lastName\n  }\n\n  createNameIfNeeded() {\n    if (!this.name) {\n      this.name = new WtsName();\n    }\n  }\n\n  setFullName(string) {\n    if (string) {\n      this.createNameIfNeeded();\n      this.name.setFullName(string);\n    }\n  }\n\n  setLastNameAndForeNames(lastName, forenames) {\n    if (lastName) {\n      this.createNameIfNeeded();\n      this.name.setLastName(lastName);\n    }\n    if (forenames) {\n      this.createNameIfNeeded();\n      this.name.setForeNames(forenames);\n    }\n  }\n\n  isUsableDateString(string) {\n    if (string) {\n      let lcString = string.toLowerCase().trim();\n      if (lcString != \"unknown\") {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  createBirthDateIfNeeded() {\n    if (!this.birthDate) {\n      this.birthDate = new WtsDate();\n    }\n  }\n\n  setBirthDate(string) {\n    if (this.isUsableDateString(string)) {\n      this.createBirthDateIfNeeded();\n      this.birthDate.setDateAndQualifierFromString(string);\n    }\n  }\n\n  setBirthYear(string) {\n    if (this.isUsableDateString(string)) {\n      this.createBirthDateIfNeeded();\n      this.birthDate.setDateAndQualifierFromString(string, true);\n    }\n  }\n\n  setBirthDateFromYearMonthDay(year, month, day) {\n    let dateString = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getDateStringFromYearMonthDay(year, month, day);\n\n    if (dateString) {\n      this.createBirthDateIfNeeded();\n      this.birthDate.dateString = dateString;\n    }\n  }\n\n  createBirthPlaceIfNeeded() {\n    if (!this.birthPlace) {\n      this.birthPlace = new WtsPlace();\n    }\n  }\n\n  setBirthPlace(value) {\n    if (value) {\n      this.createBirthPlaceIfNeeded();\n      this.birthPlace.placeString = value;\n    }\n  }\n\n  createDeathDateIfNeeded() {\n    if (!this.deathDate) {\n      this.deathDate = new WtsDate();\n    }\n  }\n\n  setDeathDate(string) {\n    if (this.isUsableDateString(string)) {\n      this.createDeathDateIfNeeded();\n      this.deathDate.setDateAndQualifierFromString(string);\n    }\n  }\n\n  setDeathYear(string) {\n    if (this.isUsableDateString(string)) {\n      this.createDeathDateIfNeeded();\n      this.deathDate.setDateAndQualifierFromString(string, true);\n    }\n  }\n\n  createDeathPlaceIfNeeded() {\n    if (!this.deathPlace) {\n      this.deathPlace = new WtsPlace();\n    }\n  }\n\n  setDeathPlace(value) {\n    if (value) {\n      this.createDeathPlaceIfNeeded();\n      this.deathPlace.placeString = value;\n    }\n  }\n\n  createEventDateIfNeeded() {\n    if (!this.eventDate) {\n      this.eventDate = new WtsDate();\n    }\n  }\n\n  setEventDate(string) {\n    if (this.isUsableDateString(string)) {\n      this.createEventDateIfNeeded();\n      this.eventDate.dateString = string;\n    }\n  }\n\n  setEventYear(string) {\n    if (this.isUsableDateString(string)) {\n      this.createEventDateIfNeeded();\n      this.eventDate.yearString = string;\n    }\n  }\n\n  setEventQuarter(value) {\n    if (typeof value !== \"undefined\") {\n      this.createEventDateIfNeeded();\n      this.eventDate.quarter = value;\n    }\n  }\n\n  createEventPlaceIfNeeded() {\n    if (!this.eventPlace) {\n      this.eventPlace = new WtsPlace();\n    }\n  }\n\n  setEventPlace(value) {\n    if (value) {\n      this.createEventPlaceIfNeeded();\n      this.eventPlace.placeString = value;\n    }\n  }\n\n  setEventCountry(value) {\n    if (value) {\n      this.createEventPlaceIfNeeded();\n      this.eventPlace.country = value;\n    }\n  }\n\n  setEventCounty(value) {\n    if (value) {\n      this.createEventPlaceIfNeeded();\n      this.eventPlace.county = value;\n    }\n  }\n\n  createResidencePlaceIfNeeded() {\n    if (!this.residencePlace) {\n      this.residencePlace = new WtsPlace();\n    }\n  }\n\n  setResidencePlace(value) {\n    if (value) {\n      this.createResidencePlaceIfNeeded();\n      this.residencePlace.placeString = value;\n    }\n  }\n\n  setFieldIfValueExists(fieldName, value) {\n    if (fieldName && value) {\n      this[fieldName] = value;\n    }\n  }\n\n  setPersonGender(value) {\n    value = GD.standardizeGender(value);\n    if (value) {\n      this.personGender = value;\n    }\n  }\n\n  setMaritalStatus(value) {\n    value = GD.standardizeMaritalStatus(value);\n    if (value) {\n      this.maritalStatus = value;\n    }\n  }\n\n  setRelationshipToHead(value) {\n    value = GD.standardizeRelationshipToHead(value);\n    if (value) {\n      this.relationshipToHead = value;\n    }\n  }\n\n  setOccupation(value) {\n    value = GD.standardizeOccupation(value);\n    if (value) {\n      this.occupation = value;\n    }\n  }\n\n  addSpouse() {\n    if (this.spouses == undefined) {\n      this.spouses = [];\n    }\n\n    let spouse = {};\n    spouse.name = new WtsName();\n    spouse.marriageDate = new WtsDate();\n    spouse.marriagePlace = new WtsPlace();\n\n    this.spouses.push(spouse);\n\n    return spouse;\n  }\n\n  addMother() {\n    if (this.parents == undefined) {\n      this.parents = {};\n    }\n\n    if (this.parents.mother == undefined) {\n      this.parents.mother = {};\n    }\n\n    if (this.parents.mother.name == undefined) {\n      this.parents.mother.name = new WtsName();\n    }\n\n    return this.parents.mother;\n  }\n\n  addFather() {\n    if (this.parents == undefined) {\n      this.parents = {};\n    }\n\n    if (this.parents.father == undefined) {\n      this.parents.father = {};\n    }\n\n    if (this.parents.father.name == undefined) {\n      this.parents.father.name = new WtsName();\n    }\n\n    return this.parents.father;\n  }\n\n  addSpouseOrParentsForSelectedHouseholdMember() {\n    let members = this.householdArray;\n    if (!members || members.length <= 1) {\n      return;\n    }\n\n    let gd = this;\n\n    function findHouseholdMemberByRelationship(relationship) {\n      for (let member of members) {\n        if (member.relationship == relationship) {\n          return member;\n        }\n      }\n      return undefined;\n    }\n\n    function addParentWithRelationship(relationship, addParent) {\n      let member = findHouseholdMemberByRelationship(relationship);\n      if (member) {\n        let parent = addParent();\n        parent.name.setFullName(member.name);\n      }\n    }\n\n    function addFather() {\n      return gd.addFather();\n    }\n\n    function addMother() {\n      return gd.addMother();\n    }\n\n    if (this.relationshipToHead) {\n      if (this.relationshipToHead == \"head\") {\n        // look for spouse\n        if (!this.maritalStatus || this.maritalStatus == \"married\") {\n          let wife = findHouseholdMemberByRelationship(\"wife\");\n          if (wife) {\n            // could there be more than one member with relationship of wife?\n            // seems like an error but could happen. Might be safest to check this wife member comes\n            // immediately after this person.\n            let thisIndex = this.householdArray.findIndex(function (element) {\n              return element.isSelected;\n            });\n            let wifeIndex = this.householdArray.indexOf(wife);\n\n            if (thisIndex != -1 && wifeIndex == thisIndex + 1) {\n              // add a spouse\n              let spouse = this.addSpouse();\n              spouse.name.setFullName(wife.name);\n            }\n          }\n        }\n\n        addParentWithRelationship(\"father\", addFather);\n        addParentWithRelationship(\"mother\", addMother);\n      } else if (this.relationshipToHead == \"wife\") {\n        // look for spouse\n        if (!this.maritalStatus || this.maritalStatus == \"married\") {\n          let head = findHouseholdMemberByRelationship(\"head\");\n          if (head) {\n            // could there be more than one member with relationship of head or wife?\n            // seems like an error but could happen. Might be safest to check this wife member comes\n            // immediately after the head person.\n            let thisIndex = this.householdArray.findIndex(function (element) {\n              return element.isSelected;\n            });\n            let headIndex = this.householdArray.indexOf(head);\n\n            if (headIndex != -1 && thisIndex == headIndex + 1) {\n              // add a spouse\n              let spouse = this.addSpouse();\n              spouse.name.setFullName(head.name);\n            }\n          }\n        }\n\n        addParentWithRelationship(\"father-in-law\", addFather);\n        addParentWithRelationship(\"mother-in-law\", addMother);\n      } else if (this.relationshipToHead == \"son\" || this.relationshipToHead == \"daughter\") {\n        // we have to be careful, see https://www.findmypast.co.uk/transcript?id=GBC/1851/0016942518&expand=true\n        // for an example of a daughter who is not related to the head\n        // If there are any non-family members before this person in the household then don't add parents.\n        // For now be super restricive. If there is any member who is not a head, wife, son or daughter\n        // before the selected person then do not assume head is a parent.\n        let closeFamilyRelationships = [\"head\", \"wife\", \"son\", \"daughter\"];\n        let isFamilyMember = true;\n        for (let member of members) {\n          if (member.isSelected) {\n            break;\n          }\n          if (!closeFamilyRelationships.includes(member.relationship)) {\n            isFamilyMember = false;\n            break;\n          }\n        }\n\n        if (isFamilyMember) {\n          let head = findHouseholdMemberByRelationship(\"head\");\n          if (head) {\n            if (head.gender == \"male\") {\n              addParentWithRelationship(\"head\", addFather);\n\n              let headIndex = this.householdArray.findIndex(function (element) {\n                return element.relationship == \"head\";\n              });\n              let wifeIndex = this.householdArray.findIndex(function (element) {\n                return element.relationship == \"wife\";\n              });\n              if (wifeIndex != -1 && wifeIndex == headIndex + 1) {\n                addParentWithRelationship(\"wife\", addMother);\n              }\n            } else if (head.gender == \"female\") {\n              addParentWithRelationship(\"head\", addMother);\n            } else {\n              // some census transcriptions (e.g. Ancestry) do not have the gender.\n              // In household tables it digs deeper to get this.\n              // We can't assume which the head is - father or mother - unless there is a wife.\n              let headIndex = this.householdArray.findIndex(function (element) {\n                return element.relationship == \"head\";\n              });\n              let wifeIndex = this.householdArray.findIndex(function (element) {\n                return element.relationship == \"wife\";\n              });\n              if (wifeIndex != -1 && wifeIndex == headIndex + 1) {\n                addParentWithRelationship(\"head\", addFather);\n                addParentWithRelationship(\"wife\", addMother);\n              }\n            }\n          }\n        }\n      } else if (this.relationshipToHead == \"wife's son\" || this.relationshipToHead == \"wife's daughter\") {\n        let closeFamilyRelationships = [\"head\", \"wife\", \"son\", \"daughter\", \"wife's son\", \"wife's daughter\"];\n        let isFamilyMember = true;\n        for (let member of members) {\n          if (member.isSelected) {\n            break;\n          }\n          if (!closeFamilyRelationships.includes(member.relationship)) {\n            isFamilyMember = false;\n            break;\n          }\n        }\n\n        if (isFamilyMember) {\n          let head = findHouseholdMemberByRelationship(\"head\");\n          if (head && head.gender == \"male\") {\n            let headIndex = this.householdArray.findIndex(function (element) {\n              return element.relationship == \"head\";\n            });\n            let wifeIndex = this.householdArray.findIndex(function (element) {\n              return element.relationship == \"wife\";\n            });\n            if (wifeIndex != -1 && wifeIndex == headIndex + 1) {\n              addParentWithRelationship(\"wife\", addMother);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // return an array of last names\n  inferPersonLastNamesArray(person) {\n    var lastNames = [];\n\n    if (person.lastNameAtBirth) {\n      lastNames.push(person.lastNameAtBirth);\n    }\n    if (person.lastNameAtDeath) {\n      if (person.lastNameAtDeath != person.lastNameAtBirth) {\n        lastNames.push(person.lastNameAtDeath);\n      }\n    }\n    if (person.name) {\n      let lastName = person.name.inferLastName();\n      if (lastName && !lastNames.includes(lastName)) {\n        lastNames.push(lastName);\n      }\n    }\n    if (person.spouses && person.personGender == \"female\") {\n      for (let spouse of person.spouses) {\n        if (spouse.name) {\n          let lastName = spouse.name.inferLastName();\n          if (lastName && !lastNames.includes(lastName)) {\n            lastNames.push(lastName);\n          }\n        }\n      }\n    }\n\n    return lastNames;\n  }\n\n  inferLastNames() {\n    return this.inferPersonLastNames(this);\n  }\n\n  inferPersonLastNames(person) {\n    let lastNames = \"\";\n    let lastNamesArray = this.inferPersonLastNamesArray(person);\n    if (lastNamesArray.length > 0) {\n      for (let name of lastNamesArray) {\n        if (lastNames != \"\") {\n          lastNames += \" \";\n        }\n        lastNames += name;\n      }\n    }\n    return lastNames;\n  }\n\n  // return a string of space separated forenames\n  inferForenames() {\n    let forenames = \"\";\n\n    if (this.name) {\n      forenames = this.name.inferForenames();\n    }\n\n    return forenames;\n  }\n\n  inferFullName() {\n    let fullName = \"\";\n\n    if (this.name) {\n      fullName = this.name.inferFullName();\n    }\n\n    return fullName;\n  }\n\n  inferFirstName() {\n    let firstName = \"\";\n\n    if (this.name) {\n      firstName = this.name.inferFirstName();\n    }\n\n    return firstName;\n  }\n\n  inferSecondForename() {\n    let secondForename = \"\";\n\n    if (this.name) {\n      secondForename = this.name.inferSecondForename();\n    }\n\n    return secondForename;\n  }\n\n  inferMiddleName() {\n    let middleName = \"\";\n\n    if (this.name) {\n      middleName = this.name.inferMiddleName();\n    }\n\n    return middleName;\n  }\n\n  inferMiddleNames() {\n    let middleNames = \"\";\n\n    if (this.name) {\n      middleNames = this.name.inferMiddleNames();\n    }\n\n    return middleNames;\n  }\n\n  inferLastName() {\n    let lastName = \"\";\n\n    if (this.name) {\n      return this.name.inferLastName();\n    }\n\n    if (this.lastNameAtBirth) {\n      return this.lastNameAtBirth;\n    }\n    if (this.lastNameAtDeath) {\n      return this.lastNameAtDeath;\n    }\n\n    return lastName;\n  }\n\n  inferLastNameAtBirth() {\n    if (this.lastNameAtBirth) {\n      return this.lastNameAtBirth;\n    }\n\n    if (this.name) {\n      return this.name.inferLastName();\n    }\n\n    return \"\";\n  }\n\n  inferLastNameAtDeath() {\n    function getSpouseLnab(spouse) {\n      if (spouse.lastNameAtBirth) {\n        return spouse.lastNameAtBirth;\n      }\n      if (spouse.name) {\n        return spouse.name.inferLastName();\n      }\n    }\n\n    // this is a woman and had spouses it may be that the CLN has not been set to husband's name\n    let lnabAndLnadPresentAndDifferent = false;\n    if (this.lastNameAtDeath && this.lastNameAtBirth && this.lastNameAtDeath != this.lastNameAtBirth) {\n      lnabAndLnadPresentAndDifferent = true;\n    }\n\n    if (this.personGender == \"female\" && this.spouses && !lnabAndLnadPresentAndDifferent) {\n      let lastSpouseLastName = \"\";\n      let lastMarriageDate = undefined;\n      for (let spouse of this.spouses) {\n        if (spouse.marriageDate) {\n          let marriageDate = spouse.marriageDate.getDateString();\n          let marriageParsedDate = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.parseDateString(marriageDate);\n          if (marriageParsedDate.isValid) {\n            if (!lastMarriageDate) {\n              lastMarriageDate = marriageParsedDate;\n              lastSpouseLastName = getSpouseLnab(spouse);\n            } else {\n              let diff = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getDaysBetweenParsedDates(lastMarriageDate, marriageParsedDate);\n              if (diff > 0) {\n                lastMarriageDate = marriageParsedDate;\n                let spouseLnab = getSpouseLnab(spouse);\n                if (spouseLnab) {\n                  lastSpouseLastName = spouseLnab;\n                } else {\n                  // sometimes an Ancestry profile might have multiple marriages, some with no spouse name\n                  // If this is close to last marriage ignore it as it probably referes to the same one\n                  // (if could be generated from the \"years married\" in the 1911 census for example)\n                  // Otherwise count it and set name to blank\n                  if (diff > 380) {\n                    lastSpouseLastName = \"\";\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (lastSpouseLastName) {\n        return lastSpouseLastName;\n      }\n    }\n\n    if (this.lastNameAtDeath) {\n      return this.lastNameAtDeath;\n    }\n\n    return this.inferLastName();\n  }\n\n  inferPrefix() {\n    let prefix = \"\";\n\n    if (this.name) {\n      prefix = this.name.inferPrefix();\n    }\n\n    return prefix;\n  }\n\n  inferSuffix() {\n    let suffix = \"\";\n\n    if (this.name) {\n      suffix = this.name.inferSuffix();\n    }\n\n    return suffix;\n  }\n\n  inferBirthDateObj() {\n    if (this.birthDate) {\n      return this.birthDate;\n    }\n    if (this.deathDate) {\n      if (this.ageAtDeath) {\n        let deathDateString = this.deathDate.getDateString();\n\n        let dateString = GeneralizedData.getSubtractAgeFromDate(deathDateString, this.ageAtDeath);\n        let yearString = _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getLastWord(dateString);\n        let dateObj = new WtsDate();\n        dateObj.yearString = yearString;\n        dateObj.qualifier = dateQualifiers.ABOUT;\n        return dateObj;\n      }\n    }\n    if (this.eventDate && !this.role) {\n      if (this.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.BirthRegistration || this.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Birth) {\n        return this.eventDate;\n      }\n    }\n    if (this.eventDate && this.ageAtEvent) {\n      let eventDateString = this.eventDate.getDateString();\n      let dateString = GeneralizedData.getSubtractAgeFromDate(eventDateString, this.ageAtEvent);\n      let yearString = _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getLastWord(dateString);\n      let dateObj = new WtsDate();\n      dateObj.yearString = yearString;\n      dateObj.qualifier = dateQualifiers.ABOUT;\n      return dateObj;\n    }\n  }\n\n  inferBirthYear() {\n    let dateObj = this.inferBirthDateObj();\n    if (dateObj) {\n      return dateObj.getYearString();\n    }\n  }\n\n  inferBirthDate() {\n    let dateObj = this.inferBirthDateObj();\n    if (dateObj) {\n      return dateObj.getDateString();\n    }\n  }\n\n  inferBirthDateQualifier() {\n    let dateObj = this.inferBirthDateObj();\n    if (dateObj) {\n      return dateObj.qualifier;\n    }\n  }\n\n  inferDeathDateObj() {\n    if (this.deathDate) {\n      return this.deathDate;\n    }\n    if (this.eventDate && !this.role) {\n      if (this.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Death || this.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.DeathRegistration) {\n        return this.eventDate;\n      }\n    }\n  }\n\n  inferDeathYear() {\n    let dateObj = this.inferDeathDateObj();\n    if (dateObj) {\n      return dateObj.getYearString();\n    }\n  }\n\n  inferDeathDate() {\n    let dateObj = this.inferDeathDateObj();\n    if (dateObj) {\n      return dateObj.getDateString();\n    }\n  }\n\n  inferDeathDateQualifier() {\n    let dateObj = this.inferDeathDateObj();\n    if (dateObj) {\n      return dateObj.qualifier;\n    }\n  }\n\n  inferBirthPlace() {\n    if (this.birthPlace) {\n      return this.birthPlace.placeString;\n    } else if (this.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.BirthRegistration) {\n      // An eventPlace can contain the county/country so is prefered to a registrationDistrict\n      if (this.eventPlace) {\n        return this.eventPlace.placeString;\n      } else if (this.registrationDistrict) {\n        return this.registrationDistrict;\n      }\n    } else if (this.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Baptism || this.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Birth) {\n      if (this.eventPlace && !this.role) {\n        return this.eventPlace.placeString;\n      }\n    }\n  }\n\n  inferBirthCounty() {\n    let birthPlace = undefined;\n    if (this.birthPlace) {\n      birthPlace = this.birthPlace;\n    } else if (\n      this.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.BirthRegistration ||\n      this.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Baptism ||\n      this.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Birth\n    ) {\n      if (this.eventPlace && !this.role) {\n        birthPlace = this.eventPlace;\n      }\n    }\n\n    if (birthPlace) {\n      return birthPlace.inferCounty();\n    }\n\n    return undefined;\n  }\n\n  inferDeathPlace() {\n    if (this.deathPlace) {\n      return this.deathPlace.placeString;\n    } else if (this.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Death || this.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.DeathRegistration) {\n      // An eventPlace can contain the county/country so is prefered to a registrationDistrict\n      if (this.eventPlace && !this.role) {\n        return this.eventPlace.placeString;\n      } else if (this.registrationDistrict) {\n        return this.registrationDistrict;\n      }\n    }\n  }\n\n  inferDeathCounty() {\n    let deathPlace = undefined;\n    if (this.deathPlace) {\n      deathPlace = this.deathPlace;\n    } else if (this.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.DeathRegistration || this.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Burial || this.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Death) {\n      if (this.eventPlace && !this.role) {\n        deathPlace = this.eventPlace;\n      }\n    }\n\n    if (deathPlace) {\n      return deathPlace.inferCounty();\n    }\n\n    return undefined;\n  }\n\n  inferDeathCountry() {\n    let placeNames = [];\n\n    let deathPlace = this.inferDeathPlace();\n    if (deathPlace) {\n      placeNames.push(deathPlace);\n    }\n\n    if (this.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.DeathRegistration || this.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Burial || this.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Death) {\n      if (this.eventPlace && !this.role) {\n        placeNames.push(this.eventPlace);\n      }\n\n      // Collection\n      if (this.collectionData) {\n        let collection = _record_collections_mjs__WEBPACK_IMPORTED_MODULE_1__.RC.findCollection(this.sourceOfData, this.collectionData.id);\n        let country = _record_collections_mjs__WEBPACK_IMPORTED_MODULE_1__.RC.getCountryFromCollection(collection);\n        if (country) {\n          placeNames.push(country);\n        }\n      }\n    }\n\n    return this.inferCountryFromPlaceNames(placeNames);\n  }\n\n  inferResidencePlace() {\n    if (this.residencePlace) {\n      return this.residencePlace.placeString;\n    }\n  }\n\n  inferResidenceCounty() {\n    if (this.residencePlace) {\n      return this.residencePlace.inferCounty();\n    }\n\n    return undefined;\n  }\n\n  inferGeneralPlace() {\n    if (this.sourceType == \"record\") {\n      return this.inferEventPlace();\n    }\n\n    if (this.deathPlace && this.birthPlace) {\n      return this.birthPlace.getCommonPlace(this.deathPlace);\n    }\n\n    if (this.birthPlace) {\n      return this.birthPlace.placeString;\n    }\n\n    if (this.deathPlace) {\n      return this.deathPlace.placeString;\n    }\n\n    if (this.residencePlace) {\n      return this.residencePlace.placeString;\n    }\n\n    return \"\";\n  }\n\n  inferEventDateObj() {\n    if (this.eventDate) {\n      return this.eventDate;\n    }\n  }\n\n  inferEventDate() {\n    if (this.eventDate) {\n      return this.eventDate.getDateString();\n    }\n  }\n\n  inferEventYear() {\n    if (this.eventDate) {\n      return this.eventDate.getYearString();\n    }\n  }\n\n  inferEventDateQualifier() {\n    if (this.eventDate) {\n      return this.eventDate.qualifier;\n    }\n  }\n\n  inferEventQuarter() {\n    if (this.eventDate) {\n      return this.eventDate.quarter;\n    }\n  }\n\n  inferEventPlace() {\n    if (this.eventPlace) {\n      return this.eventPlace.placeString;\n    }\n  }\n\n  inferFullEventPlace() {\n    if (this.eventPlace) {\n      let place = this.eventPlace.placeString;\n      let streetAddress = this.eventPlace.streetAddress;\n      if (streetAddress && place && !place.toLowerCase().startsWith(streetAddress.toLowerCase())) {\n        place = streetAddress + \", \" + place;\n      }\n      return place;\n    }\n  }\n\n  inferAgeAtDeath() {\n    if (this.ageAtDeath) {\n      return this.ageAtDeath;\n    }\n\n    let birthDateString = this.inferBirthDate();\n    let deathDateString = this.inferDeathDate();\n\n    if (birthDateString && deathDateString) {\n      return GeneralizedData.getAgeAtDate(birthDateString, deathDateString);\n    }\n\n    return undefined;\n  }\n\n  inferAgeAtEvent() {\n    if (this.ageAtEvent) {\n      return this.ageAtEvent;\n    }\n\n    if (this.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Death || this.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.DeathRegistration) {\n      if (this.ageAtDeath) {\n        return this.ageAtDeath;\n      }\n\n      let birthDateString = this.inferBirthDate();\n      let deathDateString = this.inferDeathDate();\n\n      if (birthDateString && deathDateString) {\n        return GeneralizedData.getAgeAtDate(birthDateString, deathDateString);\n      }\n    }\n\n    return undefined;\n  }\n\n  inferCountries() {\n    //console.log(\"inferCountries, this is:\");\n    //console.log(this);\n\n    let placeNames = [];\n\n    let birthPlace = this.inferBirthPlace();\n    if (birthPlace) {\n      placeNames.push(birthPlace);\n    }\n\n    let deathPlace = this.inferDeathPlace();\n    if (deathPlace) {\n      placeNames.push(deathPlace);\n    }\n\n    let eventPlace = this.inferEventPlace();\n    if (eventPlace) {\n      placeNames.push(eventPlace);\n    }\n\n    let residencePlace = this.inferResidencePlace();\n    if (residencePlace) {\n      placeNames.push(residencePlace);\n    }\n\n    // Collection\n    if (this.collectionData) {\n      let collection = _record_collections_mjs__WEBPACK_IMPORTED_MODULE_1__.RC.findCollection(this.sourceOfData, this.collectionData.id);\n      let country = _record_collections_mjs__WEBPACK_IMPORTED_MODULE_1__.RC.getCountryFromCollection(collection);\n      if (country) {\n        placeNames.push(country);\n      }\n    }\n\n    // add marriage places\n    if (this.sourceType == \"profile\" && this.spouses) {\n      for (let spouse of this.spouses) {\n        if (spouse.marriagePlace && spouse.marriagePlace.placeString) {\n          placeNames.push(spouse.marriagePlace.placeString);\n        }\n      }\n    }\n\n    // determine the country or countries from placeNames array\n    if (placeNames.length > 0) {\n      let countryArray = _country_data_mjs__WEBPACK_IMPORTED_MODULE_0__.CD.buildCountryArrayFromPlaceArray(placeNames);\n      if (countryArray) {\n        return countryArray;\n      }\n    }\n\n    return [];\n  }\n\n  inferCountryFromPlaceNames(placeNames) {\n    // determine the country from placeNames array\n    if (placeNames.length > 0) {\n      let countryArray = _country_data_mjs__WEBPACK_IMPORTED_MODULE_0__.CD.buildCountryArrayFromPlaceArray(placeNames);\n      if (countryArray && countryArray.length > 0) {\n        if (countryArray.length > 1) {\n          //console.log(\"inferCountryFromPlaceNames, there are \" + countryArray.length + \" countries!\");\n          //console.log(countryArray);\n        }\n        return countryArray[0];\n      }\n    }\n\n    return undefined;\n  }\n\n  inferCountriesFromPlaceNames(placeNames) {\n    // determine the country from placeNames array\n    if (placeNames.length > 0) {\n      let countryArray = _country_data_mjs__WEBPACK_IMPORTED_MODULE_0__.CD.buildCountryArrayFromPlaceArray(placeNames);\n      if (countryArray && countryArray.length > 0) {\n        return countryArray;\n      }\n    }\n\n    return undefined;\n  }\n\n  inferEventCountry() {\n    let placeNames = [];\n\n    let eventPlace = this.inferEventPlace();\n    if (eventPlace) {\n      placeNames.push(eventPlace);\n    }\n\n    // Collection\n    if (this.collectionData) {\n      let collection = _record_collections_mjs__WEBPACK_IMPORTED_MODULE_1__.RC.findCollection(this.sourceOfData, this.collectionData.id);\n      let country = _record_collections_mjs__WEBPACK_IMPORTED_MODULE_1__.RC.getCountryFromCollection(collection);\n      if (country) {\n        placeNames.push(country);\n      }\n    }\n\n    return this.inferCountryFromPlaceNames(placeNames);\n  }\n\n  inferEventCounty() {\n    let eventCounty = \"\";\n\n    if (this.eventPlace) {\n      eventCounty = this.eventPlace.inferCounty();\n    }\n\n    return eventCounty;\n  }\n\n  inferLastNameGivenParametersAndCollection(parameters, collection, allowMultiple = false) {\n    let lastNamesArray = this.inferPersonLastNamesArray(this);\n    if (lastNamesArray.length < 1) {\n      return \"\";\n    }\n    if (lastNamesArray.length == 1) {\n      return lastNamesArray[0];\n    }\n\n    if (parameters && lastNamesArray.length > parameters.lastNameIndex) {\n      return lastNamesArray[parameters.lastNameIndex];\n    }\n\n    if (collection) {\n      if (collection.isDeath && this.lastNameAtDeath) {\n        return this.lastNameAtDeath;\n      } else if (collection.isBirth && this.lastNameAtBirth) {\n        return this.lastNameAtBirth;\n      }\n\n      if (collection.dates && (collection.dates.year || collection.dates.exactDate)) {\n        // this collection is for a specific year\n        if (this.personGender == \"female\" && this.spouses) {\n          let targetDate = collection.dates.exactDate;\n          if (!targetDate) {\n            targetDate = collection.dates.year.toString();\n          }\n          let targetParsedDate = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.parseDateString(targetDate);\n          let bestMatchName = \"\";\n          let howCloseIsBestMatch = -1;\n          for (let spouse of this.spouses) {\n            if (spouse.marriageDate) {\n              let marriageDate = spouse.marriageDate.getDateString();\n              let marriageParsedDate = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.parseDateString(marriageDate);\n              let diff = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getDaysBetweenParsedDates(marriageParsedDate, targetParsedDate);\n              if (diff >= 0) {\n                let howClose = diff;\n                if (!bestMatchName || howClose <= howCloseIsBestMatch) {\n                  bestMatchName = spouse.lastNameAtBirth;\n                  howCloseIsBestMatch = howClose;\n                }\n              }\n            }\n          }\n\n          if (bestMatchName) {\n            return bestMatchName;\n          } else if (this.lastNameAtBirth) {\n            // there are some marriages and this collection seems to be before all of them\n            return this.lastNameAtBirth;\n          }\n        }\n      }\n    }\n\n    if (allowMultiple) {\n      return this.inferLastNames();\n    }\n\n    return lastNamesArray[0];\n  }\n\n  inferLastNamesArrayGivenParametersAndCollection(parameters, collection) {\n    let lastNamesArray = this.inferPersonLastNamesArray(this);\n    if (lastNamesArray.length < 1) {\n      return [];\n    }\n    if (lastNamesArray.length == 1) {\n      return lastNamesArray;\n    }\n\n    if (parameters && lastNamesArray.length > parameters.lastNameIndex) {\n      return [lastNamesArray[parameters.lastNameIndex]];\n    }\n\n    if (collection) {\n      if (collection.isDeath && this.lastNameAtDeath) {\n        return [this.lastNameAtDeath];\n      } else if (collection.isBirth && this.lastNameAtBirth) {\n        return [this.lastNameAtBirth];\n      }\n\n      if (collection.dates && (collection.dates.year || collection.dates.exactDate)) {\n        // this collection is for a specific year\n        if (this.personGender == \"female\" && this.spouses) {\n          let targetDate = collection.dates.exactDate;\n          if (!targetDate) {\n            targetDate = collection.dates.year.toString();\n          }\n          let targetParsedDate = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.parseDateString(targetDate);\n          let bestMatchName = \"\";\n          let howCloseIsBestMatch = -1;\n          for (let spouse of this.spouses) {\n            if (spouse.marriageDate) {\n              let marriageDate = spouse.marriageDate.getDateString();\n              let marriageParsedDate = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.parseDateString(marriageDate);\n              let diff = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getDaysBetweenParsedDates(marriageParsedDate, targetParsedDate);\n              if (diff >= 0) {\n                let howClose = diff;\n                if (!bestMatchName || howClose <= howCloseIsBestMatch) {\n                  bestMatchName = spouse.lastNameAtBirth;\n                  howCloseIsBestMatch = howClose;\n                }\n              }\n            }\n          }\n\n          if (bestMatchName) {\n            return [bestMatchName];\n          } else if (this.lastNameAtBirth) {\n            // there are some marriages and this collection seems to be before all of them\n            return [this.lastNameAtBirth];\n          }\n        }\n      }\n    }\n\n    return lastNamesArray;\n  }\n\n  getRelationshipOfPrimaryPersonToThisPerson() {\n    let relationship = \"\";\n    if (this.role) {\n      if (this.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.Role.Parent) {\n        relationship = \"child\";\n        if (this.primaryPersonGender) {\n          if (this.primaryPersonGender == \"male\") {\n            relationship = \"son\";\n          } else if (this.primaryPersonGender == \"female\") {\n            relationship = \"daughter\";\n          }\n        }\n      } else if (this.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.Role.Child) {\n        relationship = \"parent\";\n        if (this.primaryPersonGender) {\n          if (this.primaryPersonGender == \"male\") {\n            relationship = \"father\";\n          } else if (this.primaryPersonGender == \"female\") {\n            relationship = \"mother\";\n          }\n        }\n      } else if (this.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.Role.Spouse) {\n        relationship = \"spouse\";\n        if (this.primaryPersonGender) {\n          if (this.primaryPersonGender == \"male\") {\n            relationship = \"husband\";\n          } else if (this.primaryPersonGender == \"female\") {\n            relationship = \"wife\";\n          }\n        }\n      } else if (this.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.Role.Sibling) {\n        relationship = \"sibling\";\n        if (this.primaryPersonGender) {\n          if (this.primaryPersonGender == \"male\") {\n            relationship = \"brother\";\n          } else if (this.primaryPersonGender == \"female\") {\n            relationship = \"sister\";\n          }\n        }\n      }\n    }\n    return relationship;\n  }\n\n  getRefTitle(collectionTitle, overrideTable) {\n    //console.log(\"generalised_data_utils getRefTitle, this is:\");\n    //console.log(this);\n\n    const defaultTable = [\n      {\n        type: undefined,\n        defaultTitle: \"Unclassified\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Unclassified,\n        defaultTitle: \"Unclassified\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.BirthRegistration,\n        defaultTitle: \"Birth Registration\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Birth,\n        defaultTitle: \"Birth\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.MarriageRegistration,\n        defaultTitle: \"Marriage Registration\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Death,\n        defaultTitle: \"Death\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.DeathRegistration,\n        defaultTitle: \"Death Registration\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Baptism,\n        defaultTitle: \"Baptism\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Burial,\n        defaultTitle: \"Burial\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Certificate,\n        defaultTitle: \"Certificate\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Cremation,\n        defaultTitle: \"Cremation\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Marriage,\n        defaultTitle: \"Marriage\",\n        titleMatches: [\n          { title: \"Marriage Banns\", matches: [\"Marriage Banns\"] },\n          { title: \"Marriage Bond\", matches: [\"Marriage Bond\"] },\n        ],\n        subtypes: [{ title: \"Marriage Banns\", subtype: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RecordSubtype.Banns }],\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.BirthOrBaptism,\n        defaultTitle: \"Birth or Baptism\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.DeathOrBurial,\n        defaultTitle: \"Death or Burial\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Census,\n        defaultTitle: \"Census\",\n        addYear: true,\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.NonpopulationCensus,\n        defaultTitle: \"Non-population Census\",\n        addYear: true,\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.ElectoralRegister,\n        defaultTitle: \"Electoral Register\",\n        addYear: true,\n        titleMatches: [{ title: \"Voter Register\", matches: [\"Voter Register\"] }],\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Probate,\n        defaultTitle: \"Probate\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Will,\n        defaultTitle: \"Will\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Divorce,\n        defaultTitle: \"Divorce\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Memorial,\n        defaultTitle: \"Memorial\",\n      },\n\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.CriminalRegister,\n        defaultTitle: \"Criminal Register\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.FreemasonMembership,\n        defaultTitle: \"Freemason Membership\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Directory,\n        defaultTitle: \"Directory\",\n        addYear: true,\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Employment,\n        defaultTitle: \"Employment\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.WorkhouseRecord,\n        defaultTitle: \"Workhouse Record\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.CrewList,\n        defaultTitle: \"Crew List\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.PassengerList,\n        defaultTitle: \"Passenger List\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.ConvictTransportation,\n        defaultTitle: \"Convict Transportation\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Military,\n        defaultTitle: \"Military\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.MedicalPatient,\n        defaultTitle: \"Medical Patient\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.QuarterSession,\n        defaultTitle: \"Quarter Session\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.LandTax,\n        defaultTitle: \"Land Tax\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Tax,\n        defaultTitle: \"Tax Record\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.ValuationRoll,\n        defaultTitle: \"Valuation Roll\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Apprenticeship,\n        defaultTitle: \"Apprenticeship\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.SocialSecurity,\n        defaultTitle: \"Social Security\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.SchoolRecords,\n        defaultTitle: \"School Records\",\n        addYear: true,\n        titleMatches: [{ title: \"School Yearbook\", matches: [\"School Yearbook\"] }],\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Residence,\n        defaultTitle: \"Residence\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Obituary,\n        defaultTitle: \"Obituary\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Immigration,\n        defaultTitle: \"Immigration\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Pension,\n        defaultTitle: \"Pension\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.PassportApplication,\n        defaultTitle: \"Passport Application\",\n        addYear: true,\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Newspaper,\n        addYear: true,\n        defaultTitle: \"Newspaper\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.LegalRecord,\n        addYear: true,\n        defaultTitle: \"Legal Record\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.RateBook,\n        addYear: true,\n        defaultTitle: \"Rate Book\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.FamHistOrPedigree,\n        defaultTitle: \"Family History or Pedigree\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.Heraldry,\n        defaultTitle: \"Heraldic Record\",\n      },\n      {\n        type: _record_type_mjs__WEBPACK_IMPORTED_MODULE_4__.RT.OtherChurchEvent,\n        defaultTitle: \"Other Church Event\",\n      },\n    ];\n\n    function lookup(gd, collectionTitle, table) {\n      for (let obj of table) {\n        if (gd.recordType == obj.type) {\n          if (obj.subtypes) {\n            for (let subtype of obj.subtypes) {\n              if (gd.recordSubtype && gd.recordSubtype == subtype.subtype) {\n                let title = subtype.title;\n                // if we would like to add a year to this title\n                if (obj.addYear) {\n                  let year = gd.inferEventYear();\n                  if (year) {\n                    title = year + \" \" + title;\n                  }\n                }\n                return title;\n              }\n            }\n          }\n          if (obj.titleMatches) {\n            for (let titleMatch of obj.titleMatches) {\n              for (let match of titleMatch.matches) {\n                if (collectionTitle && collectionTitle.includes(match)) {\n                  let title = titleMatch.title;\n                  // if we would like to add a year to this title\n                  if (obj.addYear) {\n                    let year = gd.inferEventYear();\n                    if (year) {\n                      title = year + \" \" + title;\n                    }\n                  }\n                  return title;\n                }\n              }\n            }\n          }\n          let title = obj.defaultTitle;\n          // if we would like to add a year to this title\n          if (title) {\n            if (obj.addYear) {\n              let year = gd.inferEventYear();\n              if (year) {\n                title = year + \" \" + title;\n              }\n            }\n            return title;\n          }\n        }\n      }\n    }\n\n    let refTitle = undefined;\n\n    if (this.overrideRefTitle) {\n      refTitle = this.overrideRefTitle;\n    }\n\n    if (!refTitle && overrideTable) {\n      refTitle = lookup(this, collectionTitle, overrideTable);\n    }\n\n    if (!refTitle) {\n      refTitle = lookup(this, collectionTitle, defaultTable);\n    }\n\n    if (this.role) {\n      let relationship = this.getRelationshipOfPrimaryPersonToThisPerson();\n      if (refTitle == \"Unclassified\" || !refTitle) {\n        refTitle = \"Record\";\n      }\n\n      refTitle += \" of \" + relationship;\n      if (this.primaryPerson) {\n        refTitle += \" \" + this.primaryPerson;\n      }\n    }\n\n    return refTitle;\n  }\n\n  isRecordInCountry(stdCountryName) {\n    let country = this.inferEventCountry();\n    if (country) {\n      if (country == stdCountryName || _country_data_mjs__WEBPACK_IMPORTED_MODULE_0__.CD.isPartOf(country, stdCountryName)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  inferParentNamesForDataString() {\n    // we used to only use the forenames if the last names were the same, this can be confusing for an example\n    // like: https://www.ancestry.com/discoveryui-content/view/12946595:60143\n    // Where the mother has a middle name (possibly maiden name) that looks like a surname.\n    // Also, user's may want to make the parent links to their profiles so a full name is better for that.\n\n    let fatherName = \"\";\n    let motherName = \"\";\n\n    if (this.parents) {\n      if (this.parents.father && this.parents.father.name) {\n        fatherName = this.parents.father.name.inferFullName();\n      }\n      if (this.parents.mother && this.parents.mother.name) {\n        motherName = this.parents.mother.name.inferFullName();\n      }\n    }\n\n    return { fatherName: fatherName, motherName: motherName };\n  }\n\n  setDatesUsingQualifierAndYearNum(dates, yearNum, dateQualifier) {\n    if (!yearNum) {\n      return;\n    }\n\n    var fromYear = yearNum;\n    var toYear = yearNum;\n\n    switch (dateQualifier) {\n      case dateQualifiers.NONE:\n        fromYear = yearNum - 2;\n        toYear = yearNum + 2;\n        break;\n      case dateQualifiers.EXACT:\n        fromYear = yearNum;\n        toYear = yearNum;\n        break;\n      case dateQualifiers.ABOUT:\n        fromYear = yearNum - 5;\n        toYear = yearNum + 5;\n        break;\n      case dateQualifiers.BEFORE:\n        fromYear = yearNum - 5;\n        toYear = yearNum;\n        break;\n      case dateQualifiers.AFTER:\n        fromYear = yearNum;\n        toYear = yearNum + 5;\n        break;\n    }\n\n    // add an extra 1 year either side because the target records that we are searching for\n    // can have inaccuracies\n    fromYear = fromYear - 1;\n    toYear = toYear + 1;\n\n    dates.startYear = fromYear;\n    dates.endYear = toYear;\n  }\n\n  setDatesUsingQualifier(dates, yearString, dateQualifier) {\n    if (!yearString || yearString == \"\") {\n      return;\n    }\n\n    let yearNum = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getYearNumFromYearString(yearString);\n    if (!yearNum) {\n      return;\n    }\n\n    var fromYear = yearNum;\n    var toYear = yearNum;\n\n    switch (dateQualifier) {\n      case dateQualifiers.NONE:\n        fromYear = yearNum - 2;\n        toYear = yearNum + 2;\n        break;\n      case dateQualifiers.EXACT:\n        fromYear = yearNum;\n        toYear = yearNum;\n        break;\n      case dateQualifiers.ABOUT:\n        fromYear = yearNum - 5;\n        toYear = yearNum + 5;\n        break;\n      case dateQualifiers.BEFORE:\n        fromYear = yearNum - 5;\n        toYear = yearNum;\n        break;\n      case dateQualifiers.AFTER:\n        fromYear = yearNum;\n        toYear = yearNum + 5;\n        break;\n    }\n\n    // add an extra 1 year either side because the target records that we are searching for\n    // can have inaccuracies\n    fromYear = fromYear - 1;\n    toYear = toYear + 1;\n\n    dates.startYear = fromYear;\n    dates.endYear = toYear;\n  }\n\n  couldPersonHaveBeenBornInDateRange(startYear, endYear, maxLifeSpan = possibleLifeSpan) {\n    if (!startYear) {\n      startYear = 0;\n    }\n    if (!endYear) {\n      endYear = 3000;\n    }\n\n    let birthYearNum = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getYearNumFromYearString(this.inferBirthYear());\n    if (birthYearNum) {\n      return birthYearNum >= startYear && birthYearNum <= endYear;\n    }\n\n    let deathYearNum = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getYearNumFromYearString(this.inferDeathYear());\n    if (deathYearNum) {\n      let lastestBirthYearNum = deathYearNum;\n      let earliestBirthYearNum = deathYearNum - maxLifeSpan;\n      return lastestBirthYearNum >= startYear && earliestBirthYearNum <= endYear;\n    }\n\n    let eventYearNum = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getYearNumFromYearString(this.inferEventYear());\n    if (eventYearNum) {\n      let lastestBirthYearNum = eventYearNum + maxLifeSpan;\n      let earliestBirthYearNum = eventYearNum - maxLifeSpan;\n      return lastestBirthYearNum >= startYear && earliestBirthYearNum <= endYear;\n    }\n\n    return true; // if we don't know the birth year then it could be in range\n  }\n\n  couldPersonHaveMarriedInDateRange(startYear, endYear, maxLifeSpan = possibleLifeSpan) {\n    if (!startYear) {\n      startYear = 0;\n    }\n    if (!endYear) {\n      endYear = 3000;\n    }\n\n    let birthYearNum = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getYearNumFromYearString(this.inferBirthYear());\n    let deathYearNum = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getYearNumFromYearString(this.inferDeathYear());\n    let ageAtDeath = this.inferAgeAtDeath();\n\n    //console.log(\"couldPersonHaveMarriedInDateRange: birthYearNum is: \" + birthYearNum + \", deathYearNum is: \" + deathYearNum);\n    //console.log(\"couldPersonHaveMarriedInDateRange: ageAtDeath is: \" + ageAtDeath);\n    //console.log(\"couldPersonHaveMarriedInDateRange: startYear is: \" + startYear + \", endYear is: \" + endYear);\n\n    if (ageAtDeath && ageAtDeath < 14) {\n      //console.log(\"couldPersonHaveMarriedInDateRange: ageAtDeath < 14\");\n      return false;\n    }\n\n    if (birthYearNum && deathYearNum) {\n      return deathYearNum >= startYear + 16 && birthYearNum <= endYear - 16;\n    } else if (birthYearNum) {\n      return birthYearNum <= endYear - 16;\n    } else if (deathYearNum) {\n      return deathYearNum >= startYear + 16;\n    }\n\n    let eventYearNum = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getYearNumFromYearString(this.inferEventYear());\n    //console.log(\"couldPersonHaveMarriedInDateRange: eventYearNum is: \" + eventYearNum);\n\n    if (eventYearNum) {\n      let lastestDeathYearNum = eventYearNum + maxLifeSpan;\n      let earliestBirthYearNum = eventYearNum - maxLifeSpan;\n      return lastestDeathYearNum >= startYear && earliestBirthYearNum <= endYear;\n    }\n\n    return true; // if we don't know the birth or death year then it could be in range\n  }\n\n  couldPersonHaveDiedInDateRange(startYear, endYear, maxLifespan = possibleLifeSpan) {\n    if (!startYear) {\n      startYear = 0;\n    }\n    if (!endYear) {\n      endYear = 3000;\n    }\n\n    let deathYearNum = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getYearNumFromYearString(this.inferDeathYear());\n    if (deathYearNum) {\n      return deathYearNum >= startYear && deathYearNum <= endYear;\n    }\n\n    let birthYearNum = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getYearNumFromYearString(this.inferBirthYear());\n    if (birthYearNum) {\n      let lastestDeathYearNum = birthYearNum + maxLifespan;\n      let earliestDeathYearNum = birthYearNum;\n      return lastestDeathYearNum >= startYear && earliestDeathYearNum <= endYear;\n    }\n\n    let eventYearNum = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getYearNumFromYearString(this.inferEventYear());\n    if (eventYearNum) {\n      let lastestDeathYearNum = eventYearNum + maxLifespan;\n      let earliestDeathYearNum = eventYearNum - maxLifespan;\n      return lastestDeathYearNum >= startYear && earliestDeathYearNum <= endYear;\n    }\n\n    return true; // if we don't know the death year then it could be in range\n  }\n\n  couldPersonHaveLivedInDateRange(startYear, endYear, maxLifespan = possibleLifeSpan) {\n    if (!startYear) {\n      startYear = 0;\n    }\n    if (!endYear) {\n      endYear = 3000;\n    }\n\n    let birthYearNum = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getYearNumFromYearString(this.inferBirthYear());\n    let deathYearNum = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getYearNumFromYearString(this.inferDeathYear());\n\n    //console.log(\"couldPersonHaveLivedInDateRange: birthYearNum is: \" + birthYearNum + \", deathYearNum is: \" + deathYearNum);\n    //console.log(\"couldPersonHaveLivedInDateRange: startYear is: \" + startYear + \", endYear is: \" + endYear);\n\n    if (birthYearNum && deathYearNum) {\n      return deathYearNum >= startYear && birthYearNum <= endYear;\n    } else if (birthYearNum) {\n      return birthYearNum <= endYear;\n    } else if (deathYearNum) {\n      return deathYearNum >= startYear;\n    }\n\n    let eventYearNum = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getYearNumFromYearString(this.inferEventYear());\n    //console.log(\"couldPersonHaveLivedInDateRange: eventYearNum is: \" + eventYearNum);\n\n    if (eventYearNum) {\n      let lastestDeathYearNum = eventYearNum + maxLifespan;\n      let earliestBirthYearNum = eventYearNum - maxLifespan;\n      return lastestDeathYearNum >= startYear && earliestBirthYearNum <= endYear;\n    }\n\n    return true; // if we don't know the birth or death year then it could be in range\n  }\n\n  inferPossibleLifeYearRange(maxLifespan = possibleLifeSpan) {\n    let birthYear = this.inferBirthYear();\n    let deathYear = this.inferDeathYear();\n    let eventYear = this.inferEventYear();\n\n    let currentDate = new Date();\n    let currentYear = currentDate.getFullYear();\n\n    let birthYearNum = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getYearNumFromYearString(birthYear);\n    let deathYearNum = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getYearNumFromYearString(deathYear);\n    let eventYearNum = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getYearNumFromYearString(eventYear);\n\n    let range = {\n      startYear: undefined,\n      endYear: undefined,\n    };\n\n    if (birthYearNum) {\n      range.startYear = birthYearNum;\n\n      if (deathYearNum) {\n        range.endYear = deathYearNum;\n      } else {\n        range.endYear = birthYearNum + maxLifespan;\n      }\n    } else if (deathYearNum && deathYearNum > maxLifespan) {\n      range.startYear = deathYearNum - maxLifespan;\n      range.endYear = deathYearNum;\n    } else if (eventYearNum) {\n      range.startYear = eventYearNum - maxLifespan;\n      range.endYear = eventYearNum + maxLifespan;\n    }\n\n    if (range.endYear > currentYear) {\n      range.endYear = currentYear;\n    }\n\n    return range;\n  }\n\n  didPersonLiveInCountryList(searchCountryArray) {\n    let countryArray = this.inferCountries();\n\n    //console.log(\"didPersonLiveInCountryList: searchCountryArray is: \");\n    //console.log(searchCountryArray);\n    //console.log(\"didPersonLiveInCountryList: countryArray is: \");\n    //console.log(countryArray);\n\n    if (countryArray.length > 0) {\n      for (let country of countryArray) {\n        for (let searchCountry of searchCountryArray) {\n          if (country == searchCountry || _country_data_mjs__WEBPACK_IMPORTED_MODULE_0__.CD.isPartOf(country, searchCountry)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  getTermForUnmarried() {\n    let term = \"single\";\n    if (this.isRecordInCountry(\"United Kingdom\")) {\n      let eventYear = this.inferEventYear();\n      let yearNum = parseInt(eventYear);\n      if (!isNaN(yearNum) && yearNum < 1891) {\n        // In UK the term Unmarried was used until it was replace with single in 1891\n        term = \"unmarried\";\n      }\n    } else if (this.isRecordInCountry(\"United States\")) {\n      let eventYear = this.inferEventYear();\n      let yearNum = parseInt(eventYear);\n      if (!isNaN(yearNum) && yearNum == 1950) {\n        // In US 1950 census the term Nev (for Never Married) was used (as was \"Separated\")\n        term = \"never married\";\n      }\n    }\n    return term;\n  }\n\n  hasHouseholdTable() {\n    let fieldNames = this.householdArrayFields;\n    let objectArray = this.householdArray;\n\n    if (fieldNames && objectArray) {\n      return true;\n    }\n\n    return false;\n  }\n\n  getNarrativeDateFormat(dateObj, format, highlightOption, addPreposition, prepSuffix = \"\") {\n    let newFormat = format;\n    if (format == \"country\" || format == \"countryNth\") {\n      let countryArray = this.inferCountries();\n      if (countryArray.length == 1 && countryArray[0] == \"United States\") {\n        if (format == \"country\") {\n          newFormat = \"monthComma\";\n        } else {\n          newFormat = \"monthCommaNth\";\n        }\n      } else {\n        if (format == \"country\") {\n          newFormat = \"long\";\n        } else {\n          newFormat = \"theNth\";\n        }\n      }\n    }\n\n    return dateObj.getNarrativeFormat(newFormat, highlightOption, addPreposition, prepSuffix);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/base/core/generalize_data_utils.mjs\n");

/***/ }),

/***/ "./extension/base/core/narrative_builder.mjs":
/*!***************************************************!*\
  !*** ./extension/base/core/narrative_builder.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NarrativeBuilder\": () => (/* binding */ NarrativeBuilder),\n/* harmony export */   \"buildNarrative\": () => (/* binding */ buildNarrative)\n/* harmony export */ });\n/* harmony import */ var _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./record_type.mjs */ \"./extension/base/core/record_type.mjs\");\n/* harmony import */ var _generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./generalize_data_utils.mjs */ \"./extension/base/core/generalize_data_utils.mjs\");\n/* harmony import */ var _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./wts_string.mjs */ \"./extension/base/core/wts_string.mjs\");\n/* harmony import */ var _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./wts_date.mjs */ \"./extension/base/core/wts_date.mjs\");\n/* harmony import */ var _narrative_or_sentence_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./narrative_or_sentence_utils.mjs */ \"./extension/base/core/narrative_or_sentence_utils.mjs\");\n/* harmony import */ var _record_collections_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./record_collections.mjs */ \"./extension/base/core/record_collections.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\n\n\n\n\n\n\nclass NarrativeBuilder {\n  constructor(options) {\n    this.options = options;\n\n    this.recordType = _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Unclassified;\n\n    this.eventDate = \"\";\n    this.eventPlace = \"\";\n  }\n\n  getOptions() {\n    return this.options;\n  }\n\n  getSubcatOption(leafOptionName, subsectionOverride) {\n    let value = undefined;\n    if (this.optionsSubcategory) {\n      let subsection = subsectionOverride;\n      if (!subsection) {\n        subsection = this.optionsSubsection;\n      }\n      if (subsection) {\n        value = this.options[\"narrative_\" + this.optionsSubcategory + subsection + \"_\" + leafOptionName];\n      }\n      if (value == undefined) {\n        value = this.options[\"narrative_\" + this.optionsSubcategory + \"_\" + leafOptionName];\n      }\n    }\n    if (value == undefined || value == \"default\") {\n      value = this.options[\"narrative_general_\" + leafOptionName];\n    }\n    return value;\n  }\n\n  getCollection() {\n    let gd = this.eventGd;\n    let collection = undefined;\n    if (gd.collectionData && gd.collectionData.id) {\n      collection = _record_collections_mjs__WEBPACK_IMPORTED_MODULE_5__.RC.findCollection(gd.sourceOfData, gd.collectionData.id);\n    }\n    return collection;\n  }\n\n  getNarrativeAgeString(ageString) {\n    let result = \"\";\n    if (ageString) {\n      result = ageString.replace(/years?/i, \"\").trim();\n      if (/^\\d+\\/12$/.test(result)) {\n        result = result.replace(/\\/12/, \"\").trim();\n        if (result == \"1\") {\n          result += \" month\";\n        } else {\n          result += \" months\";\n        }\n      }\n    }\n    return result;\n  }\n\n  improveAndAbbreviatePlaceString(placeString) {\n    let gd = this.eventGd;\n    let options = this.options;\n\n    const countryStrings = [\n      [\", England\", \", England, United Kingdom\"],\n      [\", Wales\", \", Wales, United Kingdom\"],\n      [\", Scotland\", \", Scotland, United Kingdom\"],\n      [\n        \", Jersey\",\n        \", Jersey, United Kingdom\",\n        \", Jersey, Channel Islands\",\n        \", Jersey, Channel Islands, United Kingdom\",\n      ],\n      [\n        \", Guernsey\",\n        \", Guernsey, United Kingdom\",\n        \", Guernsey, Channel Islands\",\n        \", Guernsey, Channel Islands, United Kingdom\",\n      ],\n      [\", United Kingdom\", \"UK\"], // must come after the above countires that make up the UK\n      [\", Ireland\"],\n      [\", United States\", \", United States of America\", \", USA\"],\n      [\", Canada\"],\n      [\", New Zealand\"],\n      [\", Australia\"],\n      [\", France\"],\n      [\", Germany\"],\n      [\", Austria\"],\n      [\", Italy\"],\n      [\", Spain\"],\n      [\", Switzerland\"],\n      [\", Netherlands\"],\n      [\", Sweden\"],\n      [\", Norway\"],\n      [\", Denmark\"],\n      [\", Czech Republic\"],\n      [\", Hungary\"],\n      [\", Mexico\"],\n      [\", Peru\"],\n      [\", China\"],\n      [\", Japan\"],\n      [\", Thailand\"],\n      [\", Vietnam\"],\n      [\", Taiwan\"],\n      [\", French Polynesia\"],\n      [\", South Africa\"],\n      [\", Zimbabwe\"],\n    ];\n\n    // remove trailing . or spaces\n    while (placeString[placeString.length - 1] == \".\" || placeString[placeString.length - 1] == \" \") {\n      if (placeString.length > 1) {\n        placeString = placeString.substring(0, placeString.length - 1);\n      }\n    }\n\n    // if there is a word character immediately after a comma then add a space\n    placeString = placeString.replace(/,(\\w)/g, \", $1\");\n\n    // optionally remove, abbreviate or standardize country\n    if (options.narrative_general_country != \"full\") {\n      var countryIndex = -1;\n      var countryString = null;\n      var stdCountryString = null;\n      for (var country = 0; country < countryStrings.length; country++) {\n        let firstVariant = true;\n        let firstVariantName = null;\n        for (var variant of countryStrings[country]) {\n          if (firstVariant) {\n            firstVariant = false;\n            firstVariantName = variant;\n          }\n\n          if (placeString.endsWith(variant)) {\n            countryIndex = country;\n            countryString = variant;\n            if (firstVariantName && firstVariantName != variant) {\n              stdCountryString = firstVariantName;\n            }\n            break;\n          }\n        }\n        if (countryIndex != -1) {\n          break;\n        }\n      }\n      if (countryIndex != -1) {\n        // we found a country, decide whether to remove it\n        var removeCountry = false;\n\n        if (options.narrative_general_country == \"none\") {\n          removeCountry = true;\n        }\n\n        if (removeCountry) {\n          placeString = placeString.substring(0, placeString.length - countryString.length);\n        } else if (options.narrative_general_country == \"standard\" && stdCountryString) {\n          placeString = placeString.substring(0, placeString.length - countryString.length);\n          placeString += stdCountryString;\n        }\n      }\n    }\n\n    if (options.narrative_general_placeChurchFirst == \"yes\") {\n      const recordTypesWithChurchNames = [_record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Baptism, _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Marriage, _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Burial];\n      const siteNamesWhereChurchCanBeAfterTown = [\"ancestry\"];\n\n      if (\n        recordTypesWithChurchNames.includes(gd.recordType) &&\n        siteNamesWhereChurchCanBeAfterTown.includes(gd.sourceOfData)\n      ) {\n        // attempt to change \"Huddersfield, St Peter,\" to \"St. Peter's church, Huddersfield,\"\n        let firstCommaIndex = placeString.indexOf(\",\");\n        if (firstCommaIndex != -1 && placeString.length > firstCommaIndex + 2) {\n          let secondCommaIndex = placeString.indexOf(\",\", firstCommaIndex + 1);\n          if (secondCommaIndex != -1) {\n            let churchName = placeString.substring(firstCommaIndex + 1, secondCommaIndex).trim();\n            let placeNoChurch =\n              placeString.substring(0, firstCommaIndex) + \", \" + placeString.substring(secondCommaIndex + 1).trim();\n\n            if (/^St[ \\.]+/.test(churchName) || /^All Saints/i.test(churchName)) {\n              if (churchName.endsWith(\"s\")) {\n                churchName += \"'\";\n              } else {\n                churchName += \"'s\";\n              }\n              churchName += \" church\";\n              placeString = churchName + \", \" + placeNoChurch;\n            }\n          }\n        }\n      }\n    }\n\n    return placeString;\n  }\n\n  getPlaceWithPreposition(placeString) {\n    if (!placeString) {\n      return placeString;\n    }\n\n    placeString = this.improveAndAbbreviatePlaceString(placeString);\n    let preposition = _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getPrepositionForPlaceString(placeString);\n    return preposition + \" \" + placeString;\n  }\n\n  getNameOrPronounOption() {\n    return this.getSubcatOption(\"nameOrPronoun\");\n  }\n\n  getPersonNameOrPronounWithFlag(isMidSentence = false) {\n    let gd = this.eventGd;\n\n    let nameOption = this.getNameOrPronounOption();\n    let result = { isValid: false };\n    result.isPronoun = false;\n\n    function tryFirstName() {\n      let name = gd.inferFirstName();\n      if (name) {\n        result.nameOrPronoun = name;\n        return true;\n      }\n      return false;\n    }\n\n    function tryForenames() {\n      let name = gd.inferForenames();\n      if (name) {\n        result.nameOrPronoun = name;\n        return true;\n      }\n      return false;\n    }\n\n    function tryFullName() {\n      let name = gd.inferFullName();\n      if (name) {\n        result.nameOrPronoun = name;\n        return true;\n      }\n      return false;\n    }\n\n    function tryPronoun() {\n      let gender = gd.personGender;\n      if (gender == \"male\") {\n        result.nameOrPronoun = \"He\";\n        result.isPronoun = true;\n        return true;\n      } else if (gender == \"female\") {\n        result.nameOrPronoun = \"She\";\n        result.isPronoun = true;\n        return true;\n      }\n      return false;\n    }\n\n    if (nameOption == \"firstName\") {\n      if (!tryFirstName()) {\n        if (!tryFullName()) {\n          tryPronoun();\n        }\n      }\n    } else if (nameOption == \"forenames\") {\n      if (!tryForenames()) {\n        if (!tryFullName()) {\n          tryPronoun();\n        }\n      }\n    } else if (nameOption == \"fullName\") {\n      if (!tryFullName()) {\n        tryPronoun();\n      }\n    } else if (nameOption == \"pronoun\") {\n      if (!tryPronoun()) {\n        if (!tryFirstName()) {\n          tryFullName();\n        }\n      }\n    }\n\n    if (!result.nameOrPronoun) {\n      return result;\n    }\n\n    if (result.isPronoun) {\n      if (isMidSentence) {\n        result.nameOrPronoun = result.nameOrPronoun.toLowerCase();\n      }\n    } else {\n      // In narrative we always want names in initial caps (note might need special case\n      // for mixed cased names like McLeod or MacLeod, the prefname can be a surname if no known first name)\n      // However, sometimes the generalize has already done a better job of this so it should not be done again\n      // NOTE: we could perhaps centralise the code in scotp that does name casing.\n      if (gd.sourceOfData != \"scotp\") {\n        result.nameOrPronoun = _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.toInitialCapsEachWord(result.nameOrPronoun, true);\n      }\n    }\n\n    result.isValid = true;\n    return result;\n  }\n\n  getPersonNameOrPronoun(isMidSentence = false) {\n    let nameOrPronounObj = this.getPersonNameOrPronounWithFlag(isMidSentence);\n    if (nameOrPronounObj.isValid) {\n      return nameOrPronounObj.nameOrPronoun;\n    }\n    if (isMidSentence) {\n      return \"unknown\";\n    } else {\n      return \"Unknown\";\n    }\n  }\n\n  getPossessiveName(isMidSentence = false) {\n    const gd = this.eventGd;\n    let nameOrPronounObj = this.getPersonNameOrPronounWithFlag(isMidSentence);\n    if (nameOrPronounObj.isValid) {\n      if (nameOrPronounObj.isPronoun) {\n        let gender = gd.personGender;\n        if (gender == \"male\") {\n          return isMidSentence ? \"his\" : \"His\";\n        } else if (gender == \"female\") {\n          return isMidSentence ? \"her\" : \"Her\";\n        }\n      }\n      // http://www.sussex.ac.uk/informatics/punctuation/apostrophe/possessives\n      return nameOrPronounObj.nameOrPronoun + \"'s\";\n    }\n    return isMidSentence ? \"their\" : \"Their\";\n  }\n\n  getPossessiveNamePlusChild(isMidSentence = false) {\n    const gd = this.eventGd;\n    let string = this.getPossessiveName(isMidSentence);\n    string += \" \" + (0,_narrative_or_sentence_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.getPrimaryPersonChildTerm)(gd);\n    if (gd.primaryPerson) {\n      string += \" \" + gd.primaryPerson;\n    }\n    return string;\n  }\n\n  getPossessiveNamePlusSpouse(isMidSentence = false) {\n    const gd = this.eventGd;\n    let string = this.getPossessiveName(isMidSentence);\n    string += \" \" + (0,_narrative_or_sentence_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.getPrimaryPersonSpouseTerm)(gd);\n    if (gd.primaryPerson) {\n      string += \" \" + gd.primaryPerson;\n    }\n    return string;\n  }\n\n  getPronounInitialCaps() {\n    if (this.personGender == \"male\") {\n      return \"He\";\n    } else if (this.personGender == \"female\") {\n      return \"She\";\n    } else {\n      return \"They\";\n    }\n  }\n\n  getPronounAndPastTenseInitialCaps() {\n    if (this.personGender == \"male\") {\n      return \"He was\";\n    } else if (this.personGender == \"female\") {\n      return \"She was\";\n    } else {\n      return \"They were\";\n    }\n  }\n\n  getPossessivePronounForGenderInitialCaps(gender) {\n    if (gender == \"male\") {\n      return \"His\";\n    } else if (gender == \"female\") {\n      return \"Her\";\n    } else {\n      return \"Their\";\n    }\n  }\n\n  getPossessivePronounInitialCaps() {\n    return this.getPossessivePronounForGenderInitialCaps(this.personGender);\n  }\n\n  getPersonPronounOrNameIfNoGender(isMidSentence = false) {\n    let result = this.getPronounInitialCaps();\n\n    if (result == \"They\") {\n      const gd = this.eventGd;\n      let name = gd.inferFirstName();\n      if (name) {\n        return name;\n      }\n      name = gd.inferForenames();\n      if (name) {\n        return name;\n      }\n      name = gd.inferFullName();\n      if (name) {\n        return name;\n      }\n    }\n\n    if (isMidSentence) {\n      result = result.toLowerCase();\n    }\n\n    return result;\n  }\n\n  highlightDate(dateString) {\n    return _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.highlightString(dateString, this.options.narrative_general_dateHighlight);\n  }\n\n  getParentSeparator() {\n    if (this.options.narrative_general_parentsUseAmpOrAnd == \"amp\") {\n      return \" & \";\n    } else {\n      return \" and \";\n    }\n  }\n\n  addParentageForMainSentence() {\n    let includeParentage = this.getSubcatOption(\"includeParentage\");\n    let parentageFormat = this.getSubcatOption(\"parentageFormat\");\n\n    if (includeParentage == \"inMainSentence\") {\n      let parentNames = this.eventGd.inferParentNamesForDataString();\n\n      if (parentNames.fatherName || parentNames.motherName) {\n        if (!this.narrative.endsWith(\",\")) {\n          this.narrative += \",\";\n        }\n        this.narrative += \" \";\n        if (parentageFormat == \"theTwoCommas\") {\n          this.narrative += \"the \";\n        }\n        this.narrative += (0,_narrative_or_sentence_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.getChildTerm)(this.eventGd.personGender) + \" of \";\n        if (parentNames.fatherName) {\n          this.narrative += parentNames.fatherName;\n        }\n        if (parentNames.motherName) {\n          if (parentNames.fatherName) {\n            this.narrative += this.getParentSeparator();\n          }\n          this.narrative += parentNames.motherName;\n        }\n        this.narrative += \",\";\n      }\n    }\n  }\n\n  addParentageAsSeparateSentence() {\n    let includeParentage = this.getSubcatOption(\"includeParentage\");\n\n    if (includeParentage == \"inSeparateSentence\") {\n      let parentNames = this.eventGd.inferParentNamesForDataString();\n\n      if (parentNames.fatherName || parentNames.motherName) {\n        this.narrative += \" \" + this.getPronounAndPastTenseInitialCaps() + \" the \";\n        this.narrative += (0,_narrative_or_sentence_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.getChildTerm)(this.eventGd.personGender) + \" of \";\n        if (parentNames.fatherName) {\n          this.narrative += parentNames.fatherName;\n        }\n        if (parentNames.motherName) {\n          if (parentNames.fatherName) {\n            this.narrative += this.getParentSeparator();\n          }\n          this.narrative += parentNames.motherName;\n        }\n        this.narrative += \".\";\n      }\n    }\n  }\n\n  formatDate(dateString, addPreposition, prepSuffix = \"\") {\n    // for cases where we don't have a date object\n    let dateObj = new _generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.WtsDate();\n    dateObj.dateString = dateString;\n    let format = this.options.narrative_general_dateFormat;\n    let highlight = this.options.narrative_general_dateHighlight;\n    return this.eventGd.getNarrativeDateFormat(dateObj, format, highlight, addPreposition, prepSuffix);\n  }\n\n  formatDateObj(dateObj, addPreposition, prepSuffix = \"\") {\n    if (dateObj) {\n      let format = this.options.narrative_general_dateFormat;\n      let highlight = this.options.narrative_general_dateHighlight;\n      return this.eventGd.getNarrativeDateFormat(dateObj, format, highlight, addPreposition, prepSuffix);\n    }\n    return \"\";\n  }\n\n  getQuarterName(quarterNumber) {\n    const quarterNames = [\"Jan-Feb-Mar\", \"Apr-May-Jun\", \"Jul-Aug-Sep\", \"Oct-Nov-Dec\"];\n    if (quarterNumber != undefined && quarterNumber >= 1 && quarterNumber <= 4) {\n      return quarterNames[quarterNumber - 1];\n    }\n\n    return \"\";\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Age\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  addAgePartForMainSentence(age) {\n    if (age) {\n      let includeAgeText = true;\n      if (typeof age == \"string\" && age.toLowerCase().indexOf(\"age\") != -1) {\n        // it could be something like \"of Full Age\"\n        includeAgeText = false;\n        age = age.toLowerCase();\n      }\n\n      let format = this.getSubcatOption(\"ageFormat\");\n      if (includeAgeText) {\n        if (format == \"parensAge\") {\n          this.narrative += \" (age \" + age + \")\";\n        } else if (format == \"commasAge\") {\n          if (!this.narrative.endsWith(\",\")) {\n            this.narrative += \",\";\n          }\n          this.narrative += \" age \" + age + \",\";\n        } else if (format == \"plainAge\") {\n          this.narrative += \" age \" + age;\n        } else if (format == \"parensAged\") {\n          this.narrative += \" (aged \" + age + \")\";\n        } else if (format == \"commasAged\") {\n          if (!this.narrative.endsWith(\",\")) {\n            this.narrative += \",\";\n          }\n          this.narrative += \" aged \" + age + \",\";\n        } else if (format == \"plainAged\") {\n          this.narrative += \" aged \" + age;\n        }\n      } else {\n        if (format == \"parensAge\" || format == \"parensAged\") {\n          this.narrative += \" (\" + age + \")\";\n        } else if (format == \"commasAge\" || format == \"commasAged\") {\n          if (!this.narrative.endsWith(\",\")) {\n            this.narrative += \",\";\n          }\n          this.narrative += \" \" + age + \",\";\n        } else if (format == \"plainAge\" || format == \"plainAged\") {\n          this.narrative += \" \" + age;\n        }\n      }\n    }\n  }\n\n  addAgeForMainSentence(age) {\n    if (this.getSubcatOption(\"includeAge\") == \"inMainSentence\") {\n      this.addAgePartForMainSentence(age);\n    }\n  }\n\n  addAgeAsSeparateSentence(age) {\n    if (this.getSubcatOption(\"includeAge\") == \"inSeparateSentence\") {\n      if (age) {\n        this.narrative += \" \" + this.getPronounAndPastTenseInitialCaps() + \" \";\n\n        if (age.search(/[^0-9]/) != -1) {\n          // the age has non numerical characters, it could be something like \"of Full Age\"\n          let lcAge = age.toLowerCase();\n          this.narrative += lcAge;\n        } else {\n          this.narrative += age + \" years old\";\n        }\n\n        this.narrative += \".\";\n      }\n    }\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Occupation helpers\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  getCleanOccupation() {\n    let occupation = this.eventGd.occupation;\n    if (occupation) {\n      let lcOccupation = occupation.toLowerCase();\n      if (lcOccupation == \"none\" || lcOccupation == \"no occupation\") {\n        occupation = \"\";\n      }\n    }\n    return occupation;\n  }\n\n  getOccupationPart(occupation) {\n    let occupationText = occupation;\n    if (this.options.narrative_general_occupationFormat == \"lowerCase\") {\n      occupationText = occupationText.toLowerCase();\n    } else if (this.options.narrative_general_occupationFormat == \"titleCase\") {\n      // Sometimes there are parens like this: \"Pattern Maker (Artz)\"\n      // toInitialCapsEachWord keeps that OK now\n      occupationText = _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.toInitialCapsEachWord(occupationText);\n    }\n\n    return occupationText;\n  }\n\n  addOccupationForMainSentence(occupation, optionsSubcategory) {\n    let includeOption = this.getSubcatOption(\"includeOccupation\");\n\n    if (occupation && includeOption == \"inMainSentence\") {\n      let occupationText = this.getOccupationPart(occupation);\n      if (occupationText) {\n        if (!this.narrative.endsWith(\",\")) {\n          this.narrative += \",\";\n        }\n        this.narrative += \" \" + occupationText + \",\";\n      }\n    }\n  }\n\n  addOccupationAsSeparateSentence(occupation, relationship) {\n    let gd = this.eventGd;\n    let occupationText = \"\";\n    let headRelation = \"\";\n\n    let includeOption = this.getSubcatOption(\"includeOccupation\");\n\n    if (includeOption == \"inSeparateSentence\") {\n      if (occupation) {\n        occupationText = this.getOccupationPart(occupation);\n      }\n    } else if (includeOption == \"inSeparateSentenceHead\") {\n      if (occupation) {\n        occupationText = this.getOccupationPart(occupation);\n      } else if (relationship && gd.householdArray) {\n        // try to get parent occupation\n        const childRelationships = [\"son\", \"daughter\"];\n        if (childRelationships.includes(relationship)) {\n          for (let member of gd.householdArray) {\n            if (member.relationship && member.relationship.includes(\"head\")) {\n              if (member.gender == \"male\") {\n                headRelation = \"father\";\n              }\n              if (member.gender == \"female\") {\n                headRelation = \"mother\";\n              }\n              occupationText = this.getOccupationPart(member.occupation);\n              break;\n            }\n          }\n        } else if (relationship == \"wife\") {\n          for (let member of gd.householdArray) {\n            if (member.relationship && member.relationship.includes(\"head\")) {\n              headRelation = \"husband\";\n              occupationText = this.getOccupationPart(member.occupation);\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (occupationText) {\n      if (headRelation) {\n        this.narrative += \" \" + this.getPossessivePronounInitialCaps() + \" \" + headRelation + \" was \";\n        this.narrative += _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getIndefiniteArticle(occupationText);\n        this.narrative += \" \" + occupationText;\n        this.narrative += \".\";\n      } else {\n        this.narrative += \" \" + this.getPronounInitialCaps() + \" was \";\n        this.narrative += _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getIndefiniteArticle(occupationText);\n        this.narrative += \" \" + occupationText;\n        this.narrative += \".\";\n      }\n    }\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Functions to build narrative for each record type\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  buildRegistrationStringOfType(typeString) {\n    let quarter = this.getQuarterName(this.eventGd.inferEventQuarter());\n\n    let year = this.eventGd.inferEventYear();\n    let dateObj = this.eventGd.inferEventDateObj();\n    let dateString = this.eventGd.inferEventDate();\n    let registrationDistrict = this.eventGd.registrationDistrict;\n    let eventPlace = this.eventGd.inferFullEventPlace();\n\n    let ageAtEvent = this.eventGd.inferAgeAtEvent();\n\n    let gd = this.eventGd;\n\n    this.optionsSubcategory = typeString + \"Reg\";\n\n    // Note - we may need a better way to distinguish between the date being the birth/marriage/death date and\n    // it being the registration date/quarter.\n    // It might require either a separate record type or a flag in the GD\n    let isDateTheRegistrationDate = false;\n    if (registrationDistrict && (this.eventGd.isRecordInCountry(\"United Kingdom\") || !eventPlace)) {\n      isDateTheRegistrationDate = true;\n    } else if ((quarter || year == dateString) && year) {\n      isDateTheRegistrationDate = true;\n    }\n\n    if (!isDateTheRegistrationDate) {\n      // sometimes there is no event date but there is a marriage date\n      if (!dateObj) {\n        if (typeString == \"marriage\" && this.eventGd.marriageDate) {\n          dateObj = new _generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.WtsDate();\n          dateObj.dateString = this.eventGd.marriageDate;\n          dateString = this.eventGd.marriageDate;\n          year = dateObj.getYearString();\n        }\n      }\n    }\n\n    let spouseName = \"\";\n    let spouseAge = \"\";\n    if (this.eventGd.spouses && this.eventGd.spouses.length == 1) {\n      let spouse = this.eventGd.spouses[0];\n      if (spouse.name) {\n        spouseName = spouse.name.inferFullName();\n      }\n      if (spouse.age) {\n        spouseAge = spouse.age;\n      }\n    }\n    const toPast = { birth: \"was born\", marriage: \"married\", death: \"died\" };\n\n    if (isDateTheRegistrationDate) {\n      this.optionsSubsection = \"Reg\";\n      let sentenceStructure = this.getSubcatOption(\"sentenceStructure\");\n\n      if (sentenceStructure == \"oneSentence\") {\n        // One sentence format\n        if (gd.role && gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Parent) {\n          this.narrative += \"The \" + typeString + \" of \" + this.getPossessiveNamePlusChild();\n        } else if (gd.role && gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Spouse) {\n          this.narrative += \"The \" + typeString + \" of \" + this.getPossessiveNamePlusSpouse();\n        } else {\n          let possessiveName = this.getPossessiveName();\n          this.narrative += possessiveName + \" \" + typeString;\n          this.addAgeForMainSentence(ageAtEvent);\n        }\n\n        if (spouseName) {\n          this.narrative += \" to \" + spouseName;\n          this.addAgeForMainSentence(spouseAge);\n        }\n      } else {\n        // Two sentence format\n        let pastTense = toPast[typeString];\n        if (gd.role && gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Parent) {\n          this.narrative += this.getPossessiveNamePlusChild();\n        } else if (gd.role && gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Spouse) {\n          this.narrative += this.getPossessiveNamePlusSpouse();\n        } else {\n          this.narrative += this.getPersonNameOrPronoun();\n          this.addAgeForMainSentence(ageAtEvent);\n        }\n\n        this.narrative += \" \" + pastTense;\n        if (spouseName) {\n          this.narrative += \" \" + spouseName;\n          this.addAgeForMainSentence(spouseAge);\n        }\n        let year = this.eventGd.inferEventYear();\n        if (year) {\n          if (quarter == \"Jan-Feb-Mar\") {\n            let yearNum = _wts_date_mjs__WEBPACK_IMPORTED_MODULE_3__.WTS_Date.getYearNumFromYearString(year);\n            if (yearNum) {\n              yearNum -= 1;\n              this.narrative += \" in late \" + yearNum + \"/early \" + year;\n            } else {\n              this.narrative += \" in \" + year;\n            }\n          } else {\n            this.narrative += \" in \" + year;\n          }\n        }\n        this.narrative += \". \";\n        let pronoun = \"Their\";\n        if (!spouseName) {\n          if (this.eventGd.role) {\n            pronoun = this.getPossessivePronounForGenderInitialCaps(this.eventGd.primaryPersonGender);\n          } else {\n            pronoun = this.getPossessivePronounInitialCaps();\n          }\n          if (pronoun == \"Their\") {\n            pronoun = \"The\";\n          }\n        }\n        this.narrative += pronoun + \" \" + typeString;\n      }\n\n      this.narrative += \" was registered\";\n\n      if (sentenceStructure == \"oneSentence\" || sentenceStructure == \"twoSentencesDate\") {\n        if (quarter) {\n          this.narrative += \" in the \" + quarter + \" quarter of \" + this.highlightDate(year);\n        } else {\n          this.narrative += \" in \" + this.highlightDate(year);\n        }\n      }\n    } else {\n      this.optionsSubsection = \"Evt\";\n\n      let pastTense = toPast[typeString];\n\n      if (gd.role && gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Parent) {\n        this.narrative += this.getPossessiveNamePlusChild();\n        this.narrative += \" \" + pastTense;\n      } else if (gd.role && gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Spouse) {\n        this.narrative += this.getPossessiveNamePlusSpouse();\n        this.narrative += \" \" + pastTense;\n      } else {\n        this.narrative += this.getPersonNameOrPronoun();\n        this.addParentageForMainSentence();\n\n        if (ageAtEvent && typeString == \"marriage\") {\n          this.addAgeForMainSentence(ageAtEvent);\n        }\n        this.narrative += \" \" + pastTense;\n        if (ageAtEvent && typeString != \"marriage\") {\n          this.addAgeForMainSentence(ageAtEvent);\n        }\n      }\n\n      if (typeString == \"marriage\") {\n        if (spouseName) {\n          this.narrative += \" \" + spouseName;\n          this.addAgeForMainSentence(spouseAge);\n        }\n      }\n\n      if (dateObj) {\n        this.narrative += \" \" + this.formatDateObj(dateObj, true);\n      }\n    }\n\n    if (isDateTheRegistrationDate && registrationDistrict) {\n      let districtFormat = this.getSubcatOption(\"regDistrictFormat\", \"Reg\");\n\n      if (districtFormat == \"theDistrict\") {\n        this.narrative += \" in the \" + registrationDistrict + \" district\";\n      } else if (districtFormat == \"districtName\") {\n        this.narrative += \" in \" + registrationDistrict;\n      } else if (districtFormat == \"districtCounty\") {\n        this.narrative += \" in \" + registrationDistrict;\n        let county = this.eventGd.inferEventCounty();\n        if (county) {\n          this.narrative += \", \" + county;\n        }\n      }\n    } else if (eventPlace) {\n      this.narrative += \" \" + this.getPlaceWithPreposition(eventPlace);\n    }\n\n    this.narrative += \".\";\n\n    this.addParentageAsSeparateSentence();\n    this.addAgeAsSeparateSentence(ageAtEvent);\n  }\n\n  buildBirthRegistrationString() {\n    this.buildRegistrationStringOfType(\"birth\");\n  }\n\n  buildDeathRegistrationString() {\n    this.buildRegistrationStringOfType(\"death\");\n  }\n\n  buildMarriageRegistrationString() {\n    this.buildRegistrationStringOfType(\"marriage\");\n  }\n\n  buildBirthString() {\n    let gd = this.eventGd;\n    let dateObj = gd.inferBirthDateObj();\n    let place = gd.inferBirthPlace();\n    this.optionsSubcategory = \"birth\";\n\n    this.narrative = this.getPersonNameOrPronoun();\n\n    if (gd.role && gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Parent && gd.primaryPerson) {\n      // This is a record for one of the parents\n      // \"X and X's child Z\"\n      if (gd.spouses && gd.spouses[0] && gd.spouses[0].name && gd.spouses[0].name.name) {\n        this.narrative += \" and \" + gd.spouses[0].name.name;\n      }\n      this.narrative += \"'s \" + (0,_narrative_or_sentence_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.getPrimaryPersonChildTerm)(gd) + \" \" + gd.primaryPerson;\n      // inferBirthDate will not return the date of the primary person's birth\n      dateObj = gd.inferEventDateObj();\n      place = gd.inferEventPlace();\n    } else {\n      this.addParentageForMainSentence();\n    }\n\n    this.narrative += \" was born\"; // \"was\" is OK because we never use \"They\" at start\n\n    if (dateObj) {\n      this.narrative += \" \" + this.formatDateObj(dateObj, true);\n    }\n    if (place) {\n      this.narrative += \" \" + this.getPlaceWithPreposition(place);\n    }\n    this.narrative += \".\";\n\n    this.addParentageAsSeparateSentence();\n  }\n\n  buildDeathString() {\n    let gd = this.eventGd;\n    let dateObj = gd.inferDeathDateObj();\n    let place = gd.inferDeathPlace();\n    this.optionsSubcategory = \"death\";\n\n    if (gd.role && gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Parent) {\n      this.narrative += this.getPossessiveNamePlusChild();\n      // inferDeathDate will not return the date of the primary person's death\n      dateObj = gd.inferEventDateObj();\n      place = gd.inferEventPlace();\n    } else if (gd.role && gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Spouse) {\n      this.narrative += this.getPossessiveNamePlusSpouse();\n      // inferDeathDate will not return the date of the primary person's death\n      dateObj = gd.inferEventDateObj();\n      place = gd.inferEventPlace();\n    } else {\n      this.narrative += this.getPersonNameOrPronoun();\n      this.addParentageForMainSentence();\n    }\n\n    this.narrative += \" died\";\n\n    let ageAtEvent = this.eventGd.inferAgeAtEvent();\n    this.addAgeForMainSentence(ageAtEvent);\n\n    if (dateObj) {\n      this.narrative += \" \" + this.formatDateObj(dateObj, true);\n    }\n    if (place) {\n      this.narrative += \" \" + this.getPlaceWithPreposition(place);\n    } else {\n      let residencePlace = this.eventGd.inferResidencePlace();\n      if (residencePlace) {\n        this.narrative += \" residing \" + this.getPlaceWithPreposition(residencePlace);\n      }\n    }\n    this.narrative += \".\";\n\n    this.addAgeAsSeparateSentence(ageAtEvent);\n    this.addParentageAsSeparateSentence();\n  }\n\n  buildBaptismString() {\n    let gd = this.eventGd;\n    let dateObj = gd.inferEventDateObj();\n    let place = gd.inferFullEventPlace();\n    this.optionsSubcategory = \"baptism\";\n\n    let baptisedString = \"baptised\";\n    if (this.options.narrative_general_spelling == \"en_us\") {\n      baptisedString = \"baptized\";\n    }\n\n    if (gd.role && gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Parent) {\n      this.narrative += this.getPossessiveNamePlusChild();\n      this.narrative += \" was \";\n    } else {\n      this.narrative += this.getPersonNameOrPronoun();\n      this.addParentageForMainSentence();\n      this.narrative += \" was \";\n    }\n\n    if (gd.birthDate && this.options.narrative_baptism_includeBirthDate) {\n      this.narrative += \"born \" + this.formatDateObj(gd.birthDate, true);\n      if (this.options.narrative_baptism_sentenceStructure == \"parentsBornAndBap\") {\n        this.narrative += \" and \";\n      } else {\n        this.narrative += \"; \";\n      }\n    }\n\n    this.narrative += baptisedString;\n\n    if (dateObj) {\n      this.narrative += \" \" + this.formatDateObj(dateObj, true);\n    }\n    if (place) {\n      this.narrative += \" \" + this.getPlaceWithPreposition(place);\n    }\n\n    // sometimes a baptism has a death date. (e.g. germany_baptism_1840_johanna_hartmann)\n    if (this.options.narrative_baptism_includeDeathDate) {\n      let deathDateObj = gd.inferDeathDateObj();\n      if (deathDateObj) {\n        this.narrative += \" and died \" + this.formatDateObj(deathDateObj, true);\n      }\n    }\n\n    this.narrative += \".\";\n\n    this.addParentageAsSeparateSentence();\n  }\n\n  buildMarriageString() {\n    let gd = this.eventGd;\n    let dateObj = this.eventGd.inferEventDateObj();\n    let place = this.eventGd.inferFullEventPlace();\n    let ageAtEvent = this.eventGd.inferAgeAtEvent();\n\n    this.optionsSubcategory = \"marriage\";\n\n    let spouseName = \"\";\n    let spouseAge = \"\";\n    if (this.eventGd.spouses && gd.spouses.length == 1) {\n      let spouse = gd.spouses[0];\n      if (spouse.name) {\n        spouseName = spouse.name.inferFullName();\n      }\n      if (spouse.age) {\n        spouseAge = spouse.age;\n      }\n    }\n\n    if (gd.role && gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Parent) {\n      this.narrative += this.getPossessiveNamePlusChild();\n      this.narrative += \" married\";\n    } else {\n      this.narrative += this.getPersonNameOrPronoun();\n      this.addAgeForMainSentence(ageAtEvent);\n      this.addParentageForMainSentence();\n      this.narrative += \" married\";\n    }\n\n    if (spouseName) {\n      spouseName = _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.toInitialCapsEachWord(spouseName, true);\n      this.narrative += \" \" + spouseName;\n      this.addAgeForMainSentence(spouseAge);\n    }\n\n    if (gd.recordSubtype && gd.recordSubtype == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RecordSubtype.Banns && (dateObj || place)) {\n      this.narrative += \". The banns were read\";\n    }\n\n    if (this.eventGd.marriageDate) {\n      // sometimes there is a specific marriage date\n      dateObj = new _generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.WtsDate();\n      dateObj.dateString = this.eventGd.marriageDate;\n      this.narrative += \" \" + this.formatDateObj(dateObj, true);\n    } else if (dateObj) {\n      let prepSuffix = \"\";\n      if (gd.recordSubtype && gd.recordSubtype == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RecordSubtype.MarriageOrBanns) {\n        prepSuffix = \"or after\";\n      }\n      this.narrative += \" \" + this.formatDateObj(dateObj, true, prepSuffix);\n    }\n    if (place) {\n      this.narrative += \" \" + this.getPlaceWithPreposition(place);\n    }\n    this.narrative += \".\";\n\n    this.addAgeAsSeparateSentence(ageAtEvent);\n    this.addParentageAsSeparateSentence();\n  }\n\n  buildBurialString() {\n    let gd = this.eventGd;\n    this.optionsSubcategory = \"burial\";\n\n    let burialDate = gd.eventDate;\n    let deathDate = gd.deathDate;\n\n    let place = gd.inferFullEventPlace();\n\n    if (gd.role && gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Parent) {\n      this.narrative += this.getPossessiveNamePlusChild();\n    } else {\n      this.narrative += this.getPersonNameOrPronoun();\n    }\n\n    let age = this.eventGd.ageAtDeath;\n    if (!age) {\n      age = this.eventGd.ageAtEvent;\n    }\n    this.addAgeForMainSentence(age);\n\n    if (!gd.role) {\n      this.addParentageForMainSentence();\n    }\n\n    if (deathDate && burialDate && deathDate.dateString != burialDate.dateString) {\n      this.narrative += \" died\";\n      this.narrative += \" \" + this.formatDateObj(deathDate, true);\n      this.narrative += \" and was buried\";\n      this.narrative += \" \" + this.formatDateObj(burialDate, true);\n    } else if (gd.recordType == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.DeathOrBurial) {\n      this.narrative += \" died or was buried\";\n      this.narrative += \" \" + this.formatDateObj(burialDate, true);\n    } else if (burialDate) {\n      this.narrative += \" was buried\";\n      this.narrative += \" \" + this.formatDateObj(burialDate, true);\n    } else if (deathDate) {\n      this.narrative += \" died\";\n      this.narrative += \" \" + this.formatDateObj(deathDate, true);\n      this.narrative += \" and was buried\";\n    } else {\n      this.narrative += \" was buried\";\n    }\n\n    if (place) {\n      this.narrative += \" \" + this.getPlaceWithPreposition(place);\n    }\n    this.narrative += \".\";\n\n    this.addAgeAsSeparateSentence(age);\n    this.addParentageAsSeparateSentence();\n  }\n\n  buildCremationString() {\n    let cremationDate = this.eventGd.eventDate;\n    let deathDate = this.eventGd.deathDate;\n    this.optionsSubcategory = \"cremation\";\n\n    let place = this.eventGd.inferFullEventPlace();\n\n    this.narrative = this.getPersonNameOrPronoun();\n\n    if (deathDate && cremationDate) {\n      this.narrative += \" died\";\n      this.narrative += \" \" + this.formatDateObj(deathDate, true);\n      this.narrative += \" and was cremated\";\n      this.narrative += \" \" + this.formatDateObj(cremationDate, true);\n    } else if (cremationDate) {\n      this.narrative += \" was cremated\";\n      this.narrative += \" \" + this.formatDateObj(cremationDate, true);\n    } else if (deathDate) {\n      this.narrative += \" died\";\n      this.narrative += \" \" + this.formatDateObj(deathDate, true);\n      this.narrative += \" and was cremated\";\n    } else {\n      this.narrative += \" was cremated\";\n    }\n\n    if (place) {\n      this.narrative += \" \" + this.getPlaceWithPreposition(place);\n    }\n    this.narrative += \".\";\n  }\n\n  buildMemorialString() {\n    let gd = this.eventGd;\n    this.optionsSubcategory = \"memorial\";\n\n    let place = gd.inferFullEventPlace();\n\n    let deathDate = gd.inferDeathDate();\n\n    this.narrative += this.getPersonNameOrPronoun();\n    this.narrative += \" was mentioned on a memorial\";\n\n    if (place) {\n      this.narrative += \" \" + this.getPlaceWithPreposition(place);\n    }\n    if (deathDate) {\n      this.narrative += \" with a death date of \" + this.formatDate(deathDate, false);\n    }\n    this.narrative += \".\";\n  }\n\n  buildObituaryString() {\n    let gd = this.eventGd;\n    this.optionsSubcategory = \"obituary\";\n\n    let eventPlace = gd.inferFullEventPlace();\n    let eventDateObj = gd.inferEventDateObj();\n    let deathDateObj = gd.inferDeathDateObj();\n    let deathPlace = gd.inferDeathPlace();\n    let age = \"\";\n\n    this.narrative += this.getPersonNameOrPronoun();\n    this.addParentageForMainSentence();\n\n    if (gd.role) {\n      let relationship = gd.getRelationshipOfPrimaryPersonToThisPerson();\n      let otherName = gd.primaryPerson;\n      if (relationship || otherName) {\n        this.narrative += \" was mentioned in the obituary of\";\n\n        if (relationship) {\n          let pronoun = this.getPossessivePronounInitialCaps().toLowerCase();\n          this.narrative += \" \" + pronoun + \" \" + relationship;\n        }\n\n        if (otherName) {\n          this.narrative += \" \" + otherName;\n        }\n      } else {\n        this.narrative += \" was mentioned in an obituary\";\n      }\n    } else {\n      this.narrative += \" was in an obituary\";\n    }\n\n    if (eventDateObj && (!deathDateObj || eventDateObj.getDateString() != deathDateObj.getDateString())) {\n      this.narrative += \" \" + this.formatDateObj(eventDateObj, true);\n    }\n    if (eventPlace && eventPlace != deathPlace) {\n      this.narrative += \" \" + this.getPlaceWithPreposition(eventPlace);\n    }\n\n    if (deathDateObj) {\n      this.narrative += \". \" + this.getPersonPronounOrNameIfNoGender() + \" died\";\n\n      age = this.eventGd.ageAtDeath;\n      if (!age) {\n        age = this.eventGd.ageAtEvent;\n      }\n      this.addAgeForMainSentence(age);\n\n      this.narrative += \" \" + this.formatDateObj(deathDateObj, true);\n\n      if (deathPlace) {\n        this.narrative += \" \" + this.getPlaceWithPreposition(deathPlace);\n      }\n    }\n    this.narrative += \".\";\n\n    this.addAgeAsSeparateSentence(age);\n    this.addParentageAsSeparateSentence();\n  }\n\n  buildBirthOrBaptismString() {\n    // This can happen in Ancestry, especially for child births or baptisms\n    let gd = this.eventGd;\n    let dateObj = gd.inferEventDateObj();\n    let place = gd.inferFullEventPlace();\n    this.optionsSubcategory = \"birthOrBaptism\";\n\n    let baptisedString = \"baptised\";\n    if (this.options.narrative_general_spelling == \"en_us\") {\n      baptisedString = \"baptized\";\n    }\n\n    if (gd.role && gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Parent) {\n      this.narrative += this.getPossessiveNamePlusChild();\n      this.narrative += \" was born or \" + baptisedString;\n    } else {\n      this.narrative += this.getPersonNameOrPronoun();\n      this.addParentageForMainSentence();\n      this.narrative += \" was born or \" + baptisedString;\n    }\n\n    if (dateObj) {\n      this.narrative += \" \" + this.formatDateObj(dateObj, true);\n    }\n    if (place) {\n      this.narrative += \" \" + this.getPlaceWithPreposition(place);\n    }\n\n    // sometimes a baptism has a death date. (e.g. germany_baptism_1840_johanna_hartmann)\n    if (gd.deathDate) {\n      this.narrative += \" and died \" + this.formatDateObj(gd.inferDeathDateObj(), true);\n    }\n\n    this.narrative += \".\";\n\n    this.addParentageAsSeparateSentence();\n  }\n\n  buildCensusString() {\n    let gd = this.eventGd;\n    let options = this.options;\n    let builder = this;\n    let collection = this.getCollection();\n    this.optionsSubcategory = \"census\";\n\n    function getHeadOfHouseholdMemberIfNotSelected(household) {\n      let hasRelationships = false;\n      if (household && household.length > 1) {\n        for (let member of household) {\n          if (!member.isSelected && member.relationship) {\n            hasRelationships = true; // the selected person can have a relationship when the rest do not\n          }\n          if (!member.isSelected && member.relationship == \"head\") {\n            return member;\n          }\n        }\n\n        if (hasRelationships) {\n          // There is no head (this should not be called if this person is the head)\n          // Occasionally the first person of the household has a relationship of \"wife\" or \"widow\"\n          if (!household[0].isSelected) {\n            if (household[0].relationship == \"wife\" || household[0].relationship == \"widow\") {\n              return household[0];\n            }\n          }\n        } else {\n          if (!household[0].isSelected) {\n            return household[0];\n          }\n        }\n      }\n      return undefined;\n    }\n\n    function getHeadOfHouseholdNameIfNotSelected(household) {\n      let member = getHeadOfHouseholdMemberIfNotSelected(household);\n      if (member) {\n        return member.name;\n      }\n      return \"\";\n    }\n\n    function getCensusDatePart(year) {\n      let part1Option = options.narrative_census_censusDatePartFormat;\n      let result = \"\";\n      if (part1Option == \"inCensusTitle\") {\n        if (collection && collection.title) {\n          result = \"In the \" + collection.title;\n        } else {\n          result = \"In the \" + builder.highlightDate(year);\n          if (year == \"1939\") {\n            result += \" register\";\n          } else {\n            result += \" census\";\n          }\n        }\n      } else if (part1Option == \"inYearCensus\") {\n        result = \"In the \" + builder.highlightDate(year);\n        if (year == \"1939\") {\n          result += \" register\";\n        } else {\n          result += \" census\";\n        }\n      } else if (part1Option == \"inYear\") {\n        result = \"In \" + builder.highlightDate(year);\n      } else if (part1Option == \"onDate\") {\n        let date = \"\";\n        if (collection && collection.dates && collection.dates.exactDate) {\n          date = collection.dates.exactDate;\n        } else {\n          date = gd.inferEventDate();\n        }\n        if (date) {\n          let dateString = builder.formatDate(date, true);\n          // want to start with an upper cae letter\n          if (dateString && dateString.length > 1) {\n            dateString = dateString[0].toUpperCase() + dateString.substring(1);\n          }\n          result = dateString;\n        }\n      }\n      return result;\n    }\n\n    function getHouseholdPart() {\n      let result = \"\";\n      if (options.narrative_census_householdPartFormat == \"relationship\") {\n        if (relationship && maritalStatus) {\n          if (relationship.includes(\"head\")) {\n            result += \" the \" + maritalStatus + \" head of household\";\n          } else {\n            let headName = getHeadOfHouseholdNameIfNotSelected(gd.householdArray);\n            if (headName) {\n              if (relationship.includes(\"wife\")) {\n                result += \" the \" + relationship + \" of \" + headName;\n              } else {\n                result += \" the \" + maritalStatus + \" \" + relationship + \" of \" + headName;\n              }\n            } else {\n              result += \" a \" + maritalStatus + \" \" + relationship;\n            }\n          }\n        } else if (relationship) {\n          if (relationship.includes(\"head\")) {\n            result += \" the head of household\";\n          } else {\n            let headName = getHeadOfHouseholdNameIfNotSelected(gd.householdArray);\n            if (headName) {\n              result += \" the \" + relationship + \" of \" + headName;\n            } else {\n              result += \" a \" + relationship;\n            }\n          }\n        } else if (maritalStatus) {\n          result += \" recorded as \" + maritalStatus;\n        }\n      } else {\n        let listParts = [];\n\n        if (relationship && gd.householdArray) {\n          let hasWife = false;\n          let hasHusband = false;\n          let childCount = 0;\n          let childType = \"none\";\n          let childMaritalStatus = \"none\";\n          let siblingCount = 0;\n          let firstSiblingType = \"\";\n          let hasFather = false;\n          let hasMother = false;\n          let isHeadOrWife = false;\n\n          let headMember = getHeadOfHouseholdMemberIfNotSelected(gd.householdArray);\n\n          if (relationship.includes(\"head\") || relationship == \"wife\") {\n            isHeadOrWife = true;\n\n            for (let member of gd.householdArray) {\n              if (member.isSelected) continue;\n              let thisMemberIsHead = false;\n              if ((member.relationship && member.relationship.includes(\"head\")) || member == headMember) {\n                thisMemberIsHead = true;\n              }\n\n              if (relationship == \"wife\") {\n                if (thisMemberIsHead) {\n                  hasHusband = true;\n                } else if (member.relationship == \"father-in-law\") {\n                  hasFather = true;\n                } else if (member.relationship == \"mother-in-law\") {\n                  hasMother = true;\n                }\n              } else {\n                if (member.relationship == \"wife\") {\n                  hasWife = true;\n                } else if (member.relationship == \"father\") {\n                  hasFather = true;\n                } else if (member.relationship == \"mother\") {\n                  hasMother = true;\n                }\n              }\n\n              if (member.relationship == \"son\" || member.relationship == \"daughter\") {\n                childCount++;\n                if (childType == \"none\") {\n                  childType = member.relationship;\n                } else if (childType != member.relationship) {\n                  childType = \"mixed\"; // not all children are sons or daughters\n                }\n\n                if (member.maritalStatus) {\n                  if (childMaritalStatus == \"none\") {\n                    childMaritalStatus = member.maritalStatus;\n                  } else if (childMaritalStatus != member.maritalStatus) {\n                    childMaritalStatus = \"mixed\";\n                  }\n                } else {\n                  if (childMaritalStatus != \"none\") {\n                    childMaritalStatus = \"mixed\";\n                  }\n                }\n              }\n            }\n          } else if (relationship == \"son\" || relationship == \"daughter\") {\n            for (let member of gd.householdArray) {\n              if (member.isSelected) continue;\n              let thisMemberIsHead = false;\n              if ((member.relationship && member.relationship.includes(\"head\")) || member == headMember) {\n                thisMemberIsHead = true;\n              }\n\n              if (thisMemberIsHead) {\n                if (member.gender == \"male\") {\n                  hasFather = true;\n                } else if (member.gender == \"female\") {\n                  hasMother = true;\n                }\n              } else if (member.relationship == \"wife\") {\n                hasMother = true;\n              } else if (member.relationship == \"son\") {\n                if (!firstSiblingType) {\n                  firstSiblingType = \"brother\";\n                }\n                siblingCount++;\n              } else if (member.relationship == \"daughter\") {\n                if (!firstSiblingType) {\n                  firstSiblingType = \"sister\";\n                }\n                siblingCount++;\n              }\n            }\n          }\n\n          if (isHeadOrWife) {\n            if (hasWife) {\n              listParts.push(\"wife\");\n            }\n            if (hasHusband) {\n              listParts.push(\"husband\");\n            }\n          } else {\n            if (hasFather && hasMother) {\n              listParts.push(\"parents\");\n            } else if (hasFather) {\n              listParts.push(\"father\");\n            } else if (hasMother) {\n              listParts.push(\"mother\");\n            }\n          }\n          if (childCount) {\n            if (childMaritalStatus == \"single\") {\n              childMaritalStatus = \"unmarried\"; // \"with her unmarried son\" is clearer than \"with her single son\"\n            }\n            if (childCount == 1) {\n              let text = \"\";\n              if (childMaritalStatus != \"none\" && childMaritalStatus != \"mixed\") {\n                text += childMaritalStatus + \" \";\n              }\n              if (childType != \"none\" && childType != \"mixed\") {\n                text += childType;\n              } else {\n                text += \"child\";\n              }\n              listParts.push(text);\n            } else {\n              let text = \"\" + childCount;\n\n              if (childMaritalStatus != \"none\" && childMaritalStatus != \"mixed\") {\n                text += \" \" + childMaritalStatus;\n              }\n\n              if (childType != \"none\" && childType != \"mixed\") {\n                text += \" \" + childType + \"s\";\n              } else {\n                text += \" children\";\n              }\n              listParts.push(text);\n            }\n          }\n          if (siblingCount) {\n            if (siblingCount == 1) {\n              listParts.push(firstSiblingType);\n            } else {\n              listParts.push(siblingCount + \" \" + \"siblings\");\n            }\n          }\n          if (isHeadOrWife) {\n            if (hasFather && hasMother) {\n              listParts.push(\"parents\");\n            } else if (hasFather) {\n              listParts.push(\"father\");\n            } else if (hasMother) {\n              listParts.push(\"mother\");\n            }\n          }\n\n          let numParts = listParts.length;\n          if (numParts > 0) {\n            let pronoun = builder.getPossessivePronounInitialCaps().toLowerCase();\n            result += \" with \" + pronoun + \" \";\n            if (numParts == 1) {\n              result += listParts[0];\n            } else {\n              for (let partIndex = 0; partIndex < numParts; partIndex++) {\n                if (partIndex == numParts - 1) {\n                  result += \" and \";\n                } else if (partIndex > 0) {\n                  result += \", \";\n                }\n                result += listParts[partIndex];\n              }\n            }\n          } else if (relationship) {\n            // fall back to \"a visitor in the household of ...\"\n            if (options.narrative_census_wasPartFormat != \"was\") {\n              result += \" as\";\n            }\n\n            let headName = getHeadOfHouseholdNameIfNotSelected(gd.householdArray);\n\n            if (relationship.includes(\"head\")) {\n              result += \" the head of household\";\n            } else if (headName) {\n              result += \" a \" + relationship + \" in the household of \" + headName;\n            } else {\n              result += \" a \" + relationship;\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    function addHouseholdPartForMainSentence() {\n      if (options.narrative_census_includeHousehold == \"inMainSentence\") {\n        if (\n          options.narrative_census_wasPartFormat != \"was\" &&\n          options.narrative_census_householdPartFormat == \"relationship\"\n        ) {\n          builder.narrative += \" as\";\n        }\n\n        builder.narrative += getHouseholdPart();\n      }\n    }\n\n    function addHouseholdPartAsSeparateSentence() {\n      if (options.narrative_census_includeHousehold == \"inSeparateSentence\") {\n        builder.narrative += \" \" + builder.getPronounInitialCaps() + \" was\";\n        builder.narrative += getHouseholdPart();\n        builder.narrative += \".\";\n      }\n    }\n\n    let year = this.eventGd.inferEventYear();\n    let place = this.eventGd.inferFullEventPlace();\n\n    if (!place) {\n      place = this.eventGd.registrationDistrict;\n    }\n\n    if (!year || !place) {\n      this.narrative = \"\";\n      return; // do default generate\n    }\n\n    this.narrative = getCensusDatePart(year);\n    if (options.narrative_census_sentenceStructure == \"comma\") {\n      this.narrative += \",\";\n    }\n    this.narrative += \" \";\n\n    this.narrative += this.getPersonNameOrPronoun(true);\n\n    let ageNum = undefined;\n    let ageAtEvent = \"\";\n    if (year == \"1939\" && this.eventGd.birthDate && this.eventGd.birthDate.dateString) {\n      // 1939 register was taken on 29 September 1939 (could store this in collections)\n      ageNum = _generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.GeneralizedData.getAgeAtDate(this.eventGd.birthDate.dateString, \"9 September 1939\");\n      if (ageNum != undefined && ageNum != NaN) {\n        ageAtEvent = ageNum.toString();\n      }\n    } else {\n      ageAtEvent = this.getNarrativeAgeString(this.eventGd.ageAtEvent);\n      if (ageAtEvent) {\n        if (/^\\d+$/.test(ageAtEvent)) {\n          ageNum = parseInt(ageAtEvent);\n        } else {\n          ageNum = 0; // could be \"1/12\" for example or \"1 month\"\n        }\n      }\n    }\n\n    let occupation = this.getCleanOccupation();\n\n    let relationship = this.eventGd.relationshipToHead;\n    if (relationship) {\n      relationship = relationship.toLowerCase();\n    }\n\n    let maritalStatus = this.eventGd.maritalStatus;\n    if (maritalStatus == \"widow\") {\n      maritalStatus = \"widowed\";\n    } else if (maritalStatus == \"single\") {\n      maritalStatus = this.eventGd.getTermForUnmarried();\n\n      if (ageNum != undefined && ageNum != NaN && ageNum <= 14) {\n        // if less than marriageble age it seems odd to describe them as single\n        maritalStatus = \"\";\n      }\n    }\n\n    this.addAgeForMainSentence(ageAtEvent);\n    this.addOccupationForMainSentence(occupation);\n\n    this.narrative += \" was\";\n    if (options.narrative_census_wasPartFormat == \"wasEnumerated\") {\n      this.narrative += \" enumerated\";\n    } else if (options.narrative_census_wasPartFormat == \"wasRecorded\") {\n      this.narrative += \" recorded\";\n    }\n\n    addHouseholdPartForMainSentence();\n\n    this.narrative += \" \" + this.getPlaceWithPreposition(place) + \".\";\n\n    addHouseholdPartAsSeparateSentence();\n    this.addAgeAsSeparateSentence(ageAtEvent);\n    this.addOccupationAsSeparateSentence(occupation, relationship);\n  }\n\n  buildProbateString() {\n    let eventDateObj = this.eventGd.inferEventDateObj();\n    let deathDateObj = this.eventGd.inferDeathDateObj();\n    let eventPlace = this.eventGd.inferFullEventPlace();\n    let deathPlace = this.eventGd.inferDeathPlace();\n    let residencePlace = this.eventGd.inferResidencePlace();\n\n    let possessiveName = this.getPossessiveName();\n\n    if (deathDateObj && eventDateObj) {\n      let pronoun = this.getPossessivePronounInitialCaps().toLowerCase();\n      this.narrative += this.getPersonNameOrPronoun() + \" died \" + this.formatDateObj(deathDateObj, true);\n      if (deathPlace) {\n        this.narrative += \" \" + this.getPlaceWithPreposition(deathPlace);\n      } else if (residencePlace) {\n        this.narrative += \" residing \" + this.getPlaceWithPreposition(residencePlace);\n      }\n      this.narrative += \" and \" + pronoun + \" estate passed probate\";\n      if (eventDateObj) {\n        this.narrative += \" \" + this.formatDateObj(eventDateObj, true);\n      }\n      if (eventPlace) {\n        this.narrative += \" \" + this.getPlaceWithPreposition(eventPlace);\n      }\n    } else if (deathDateObj) {\n      this.narrative += this.getPersonNameOrPronoun() + \" died\";\n      if (deathDateObj) {\n        this.narrative += \" \" + this.formatDateObj(deathDateObj, true);\n      }\n      if (deathPlace) {\n        this.narrative += \" \" + this.getPlaceWithPreposition(deathPlace);\n      } else if (residencePlace) {\n        this.narrative += \" residing \" + this.getPlaceWithPreposition(residencePlace);\n      }\n    } else {\n      this.narrative += possessiveName + \" estate passed probate\";\n      if (eventDateObj) {\n        this.narrative += \" \" + this.formatDateObj(eventDateObj, true);\n      }\n      if (eventPlace) {\n        this.narrative += \" \" + this.getPlaceWithPreposition(eventPlace);\n      } else if (residencePlace) {\n        this.narrative += \". \" + this.getPossessivePronounInitialCaps() + \" last residence was \" + residencePlace;\n      }\n    }\n\n    this.narrative += \".\";\n  }\n\n  buildScottishWillString() {\n    let gd = this.eventGd;\n    let dateObj = gd.inferEventDateObj();\n    let place = gd.inferFullEventPlace();\n\n    let possessiveName = this.getPossessiveName();\n\n    let role = gd.role;\n\n    if (!gd.recordSubtype || gd.recordSubtype == \"Probate\") {\n      if (role && role != _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Primary) {\n        if (role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Child) {\n          this.narrative = possessiveName + \" parent's will passed probate\";\n        } else if (role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Parent) {\n          this.narrative = possessiveName + \" child's will passed probate\";\n        } else if (role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Spouse) {\n          this.narrative = possessiveName + \" spouse's will passed probate\";\n        } else if (role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Witness) {\n          this.narrative = this.getPersonNameOrPronoun() + \" witnessed a will that passed probate\";\n        }\n      } else {\n        if (gd.courtName && gd.courtName != \"non-Scottish Court\") {\n          this.narrative = \"Probate of \" + possessiveName + \" estate endorsed\";\n        } else {\n          this.narrative = \"Probate of \" + possessiveName + \" estate recorded\";\n        }\n      }\n    } else if (gd.recordSubtype == \"Testament\") {\n      if (gd.originalConfirmationGrantedDate) {\n        this.narrative = \"Confirmation was originally granted on \" + possessiveName + \" estate\";\n        this.narrative += \" \" + this.formatDate(gd.originalConfirmationGrantedDate, true);\n        this.narrative += \" and an additional confirmation was granted\";\n      } else {\n        this.narrative = \"Confirmation was granted on \" + possessiveName + \" estate\";\n      }\n    } else if (gd.recordSubtype == \"Inventory\" || gd.recordSubtype == \"AdditionalInventory\") {\n      this.narrative = \"Confirmation was granted on \" + possessiveName + \" estate\";\n      if (gd.originalConfirmationGrantedDate) {\n        this.narrative += \" \" + this.formatDate(gd.originalConfirmationGrantedDate, true);\n        this.narrative += \" and an additional inventory was granted\";\n      }\n    } else {\n      this.narrative = \"Confirmation was granted on \" + possessiveName + \" estate\";\n    }\n\n    if (dateObj) {\n      this.narrative += \" \" + this.formatDateObj(dateObj, true);\n    }\n\n    if (gd.recordSubtype == \"AdditionalInventory\") {\n      if (gd.grantedDate) {\n        this.narrative += \", additional inventory granted on \" + this.formatDate(gd.grantedDate, false);\n      } else if (gd.givenUpDate) {\n        this.narrative += \", additional inventory given up on \" + this.formatDate(gd.givenUpDate, false);\n      }\n    }\n\n    if (gd.courtName) {\n      if (gd.courtName.startsWith(\"non-Scot\")) {\n        this.narrative += \" at a non-Scottish court\";\n      } else {\n        this.narrative += \" at \" + gd.courtName;\n      }\n    } else if (place) {\n      this.narrative += \" \" + this.getPlaceWithPreposition(place);\n    }\n\n    this.narrative += \".\";\n  }\n\n  buildWillString() {\n    let gd = this.eventGd;\n    this.optionsSubcategory = \"will\";\n\n    if (gd.inferEventCountry() == \"Scotland\" || (gd.courtName && gd.courtName.startsWith(\"non-Scot\"))) {\n      this.buildScottishWillString();\n      return;\n    }\n\n    let dateObj = gd.inferEventDateObj();\n    let deathDateObj = gd.inferDeathDateObj();\n    let place = gd.inferFullEventPlace();\n    let residencePlace = gd.inferResidencePlace();\n\n    let possessiveName = this.getPossessiveName();\n\n    let role = gd.role;\n\n    if (deathDateObj) {\n      if (role && role != _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Primary) {\n        if (role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Child) {\n          this.narrative = possessiveName + \" parent died\";\n        } else if (role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Parent) {\n          this.narrative = possessiveName + \" child died\";\n        } else if (role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Spouse) {\n          this.narrative = possessiveName + \" spouse died\";\n        }\n      } else {\n        this.narrative += this.getPersonNameOrPronoun(true);\n        this.narrative += \" died\";\n      }\n\n      let hasProbateDate = false;\n      if (dateObj) {\n        if (dateObj.getDateString() != deathDateObj.getDateString()) {\n          // there is a probate date (probably)\n          hasProbateDate = true;\n        }\n      }\n\n      this.narrative += \" \" + this.formatDateObj(deathDateObj, true);\n\n      let deathPlace = gd.inferDeathPlace();\n\n      if (deathPlace) {\n        this.narrative += \" \" + this.getPlaceWithPreposition(deathPlace);\n      } else if (residencePlace) {\n        this.narrative += \" residing \" + this.getPlaceWithPreposition(residencePlace);\n      } else if (place && !hasProbateDate) {\n        this.narrative += \" \" + this.getPlaceWithPreposition(place);\n      }\n\n      if (hasProbateDate) {\n        this.narrative += \". \" + this.getPossessivePronounInitialCaps() + \" will passed probate\";\n\n        if (dateObj) {\n          this.narrative += \" \" + this.formatDateObj(dateObj, true);\n        }\n        if (place) {\n          this.narrative += \" \" + this.getPlaceWithPreposition(place);\n        }\n      }\n    } else {\n      if (role && role != _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Primary) {\n        if (role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Child) {\n          this.narrative = possessiveName + \" parent's will passed probate\";\n        } else if (role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Parent) {\n          this.narrative = possessiveName + \" child's will passed probate\";\n        } else if (role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Spouse) {\n          this.narrative = possessiveName + \" spouse's will passed probate\";\n        } else if (role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Witness) {\n          this.narrative = this.getPersonNameOrPronoun() + \" witnessed a will that passed probate\";\n        }\n      } else {\n        this.narrative = possessiveName + \" will passed probate\";\n      }\n\n      if (dateObj) {\n        this.narrative += \" \" + this.formatDateObj(dateObj, true);\n      }\n      if (place) {\n        this.narrative += \" \" + this.getPlaceWithPreposition(place);\n      }\n    }\n\n    this.narrative += \".\";\n  }\n\n  buildDivorceString() {\n    let dateObj = this.eventGd.inferEventDateObj();\n    let place = this.eventGd.inferFullEventPlace();\n\n    this.narrative = this.getPersonNameOrPronoun();\n\n    let spouseName = \"\";\n    if (this.eventGd.spouses && this.eventGd.spouses.length == 1) {\n      let spouse = this.eventGd.spouses[0];\n      if (spouse.name) {\n        spouseName = spouse.name.inferFullName();\n      }\n    }\n\n    if (spouseName) {\n      spouseName = _wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.toInitialCapsEachWord(spouseName, true);\n\n      this.narrative += \" was divorced from \" + spouseName;\n    } else {\n      this.narrative += \" was in a divorce record\";\n    }\n\n    if (dateObj) {\n      this.narrative += \" \" + this.formatDateObj(dateObj, true);\n    }\n    if (place) {\n      this.narrative += \" \" + this.getPlaceWithPreposition(place);\n    }\n    this.narrative += \".\";\n  }\n\n  buildMilitaryString() {\n    let eventDate = this.eventGd.inferEventDate();\n    let deathDate = this.eventGd.inferDeathDate();\n    let place = this.eventGd.inferFullEventPlace();\n    this.optionsSubcategory = \"military\";\n\n    this.narrative = this.getPersonNameOrPronoun();\n    if (deathDate) {\n      let branch = this.eventGd.militaryBranch;\n      if (!branch) {\n        if (this.eventGd.militaryRegiment) {\n          branch = this.eventGd.militaryRegiment;\n        } else {\n          branch = \"military\";\n        }\n      } else {\n        branch = branch.toLowerCase();\n      }\n      this.narrative += \" was in the \" + branch + \" and died\";\n      this.narrative += \" \" + this.formatDate(deathDate, true);\n\n      let deathPlace = this.eventGd.inferDeathPlace();\n      if (deathPlace) {\n        place = deathPlace;\n      }\n    } else {\n      this.narrative += \" was in a military record\";\n      if (eventDate) {\n        this.narrative += \" \" + this.formatDate(eventDate, true);\n      }\n    }\n\n    if (place) {\n      this.narrative += \" \" + this.getPlaceWithPreposition(place);\n    }\n    this.narrative += \".\";\n\n    let number = this.eventGd.serviceNumber;\n    let unit = this.eventGd.unit;\n    if (unit) {\n      this.narrative += \" \" + this.getPronounAndPastTenseInitialCaps() + \" in the \" + unit;\n      if (number) {\n        this.narrative += \" (service number \" + number + \")\";\n      }\n      this.narrative += \".\";\n    } else if (number) {\n      this.narrative += \" \" + this.getPossessivePronounInitialCaps() + \" service number was \" + number + \".\";\n    }\n  }\n\n  buildPassengerListString() {\n    this.optionsSubcategory = \"passengerList\";\n\n    let eventDate = this.eventGd.inferEventDate();\n    let eventPlace = this.eventGd.inferFullEventPlace();\n\n    let arrivalDate = this.eventGd.arrivalDate;\n    let arrivalPlace = this.eventGd.arrivalPlace;\n    let departureDate = this.eventGd.departureDate;\n    let departurePlace = this.eventGd.departurePlace;\n\n    let isArrival = false;\n    let isDeparture = false;\n    if (eventDate) {\n      if (arrivalDate && arrivalDate == eventDate) {\n        isArrival = true;\n      } else if (departureDate && departureDate == eventDate) {\n        isDeparture = true;\n      }\n    }\n\n    if (isArrival) {\n      this.narrative = this.getPersonNameOrPronoun() + \" arrived\";\n\n      if (this.eventGd.shipName) {\n        this.narrative += \" on the ship \" + this.eventGd.shipName;\n      }\n\n      if (arrivalDate) {\n        this.narrative += \" \" + this.formatDate(arrivalDate, true);\n      }\n\n      if (arrivalPlace) {\n        this.narrative += \" \" + this.getPlaceWithPreposition(arrivalPlace);\n      }\n\n      if (departurePlace) {\n        this.narrative += \" having departed from \" + departurePlace;\n        if (departureDate) {\n          this.narrative += \" \" + this.formatDate(departureDate, true);\n        }\n      }\n    } else if (isDeparture) {\n      this.narrative = this.getPersonNameOrPronoun() + \" departed\";\n\n      if (departurePlace) {\n        this.narrative += \" from \" + departurePlace;\n      }\n\n      if (this.eventGd.shipName) {\n        this.narrative += \" on the ship \" + this.eventGd.shipName;\n      }\n\n      if (departureDate) {\n        this.narrative += \" \" + this.formatDate(departureDate, true);\n      }\n    } else {\n      this.narrative = this.getPersonNameOrPronoun() + \" was a passenger\";\n\n      if (this.eventGd.shipName) {\n        this.narrative += \" on the ship \" + this.eventGd.shipName;\n      }\n\n      if (eventDate) {\n        this.narrative += \" \" + this.formatDate(eventDate, true);\n      }\n\n      if (eventPlace) {\n        this.narrative += \" \" + this.getPlaceWithPreposition(eventPlace);\n      }\n    }\n  }\n\n  buildDefaultString() {\n    const narratives = [\n      {\n        recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.NonpopulationCensus,\n        string: \"was enumerated in a non-population schedule\",\n      },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.ElectoralRegister, string: \"was registered to vote\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.CriminalRegister, string: \"was in a criminal register\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.FreemasonMembership, string: \"was a freemason\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Certificate, string: \"was issued a certificate\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Directory, string: \"was in a directory\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Employment, string: \"was employed\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.WorkhouseRecord, string: \"was in a workhouse record\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.CrewList, string: \"was in a crew\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.ConvictTransportation, string: \"was transported\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.MedicalPatient, string: \"was a patient\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.QuarterSession, string: \"was in quarter session\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Tax, string: \"was in a tax record\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.ValuationRoll, string: \"was in a valuation roll\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.LandTax, string: \"was in a land tax record\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Apprenticeship, string: \"was a master or apprentice\" },\n      {\n        recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.SocialSecurity,\n        string: \"was in a Social Security record\",\n      },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.SchoolRecords, string: \"was at school\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Residence, string: \"was recorded as a resident\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Immigration, string: \"immigrated\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Emigration, string: \"emigrated\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Pension, string: \"was in a pension record\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.PassportApplication, string: \"applied for a passport\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Newspaper, string: \"was in a newspaper\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.LegalRecord, string: \"was in a legal record\" },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.RateBook, string: \"was in a rate book\" },\n      {\n        recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.FamHistOrPedigree,\n        string: \"was in a family history or pedigree\",\n      },\n      {\n        recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Naturalization,\n        string: \"was in a naturalization record\",\n      },\n      {\n        recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.OtherChurchEvent,\n        string: \"was recorded in a church event\",\n      },\n      { recordType: _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Heraldry, string: \"was in a heraldic record\" },\n    ];\n\n    let gd = this.eventGd;\n\n    let narrativeCore = \"was in a record\";\n    for (let entry of narratives) {\n      if (entry.recordType == gd.recordType) {\n        narrativeCore = entry.string;\n        break;\n      }\n    }\n\n    let dateObj = gd.inferEventDateObj();\n    let place = gd.inferFullEventPlace();\n\n    if (gd.role && gd.role == _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.Role.Parent) {\n      this.narrative += this.getPossessiveNamePlusChild();\n    } else {\n      this.narrative += this.getPersonNameOrPronoun();\n    }\n\n    this.narrative += \" \" + narrativeCore;\n    if (dateObj) {\n      let formattedDate = this.formatDateObj(dateObj, true);\n      if (formattedDate) {\n        this.narrative += \" \" + formattedDate;\n      }\n    }\n\n    if (place) {\n      this.narrative += \" \" + this.getPlaceWithPreposition(place);\n    }\n\n    this.narrative += \".\";\n  }\n\n  buildNarrativeString() {\n    // The problem with using apostrophe after the name is that there are rules for when the name\n    // ends in s. If we are going to substitute the pref name on insertion then we do not know whether\n    // it ends in s. There could be a special code like {prefName} vs {prefNamePossessive}\n\n    this.narrative = \"\";\n\n    switch (this.eventGd.recordType) {\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.BirthRegistration: {\n        this.buildBirthRegistrationString();\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Birth: {\n        this.buildBirthString();\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.DeathRegistration: {\n        this.buildDeathRegistrationString();\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Death: {\n        this.buildDeathString();\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.MarriageRegistration: {\n        this.buildMarriageRegistrationString();\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Baptism: {\n        this.buildBaptismString();\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Marriage: {\n        this.buildMarriageString();\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Burial:\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.DeathOrBurial: {\n        this.buildBurialString();\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Cremation: {\n        this.buildCremationString();\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Memorial: {\n        this.buildMemorialString();\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Obituary: {\n        this.buildObituaryString();\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.BirthOrBaptism: {\n        this.buildBirthOrBaptismString();\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Census: {\n        this.buildCensusString();\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Probate: {\n        this.buildProbateString();\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Will: {\n        this.buildWillString();\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Divorce: {\n        this.buildDivorceString();\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.Military: {\n        this.buildMilitaryString();\n        break;\n      }\n      case _record_type_mjs__WEBPACK_IMPORTED_MODULE_0__.RT.PassengerList: {\n        this.buildPassengerListString();\n        break;\n      }\n    }\n\n    if (!this.narrative) {\n      this.buildDefaultString();\n    }\n  }\n}\n\nfunction buildNarrative(input) {\n  if (!input || !input.eventGeneralizedData) {\n    return \"\";\n  }\n\n  let eventGd = input.eventGeneralizedData;\n  let options = input.options;\n\n  //console.log(\"buildNarrative: eventGd is\");\n  //console.log(eventGd);\n\n  let eventGeneralizedData = _generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.GeneralizedData.createFromPlainObject(eventGd);\n  let wtGeneralizedData = _generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.GeneralizedData.createFromPlainObject(input.wtGeneralizedData);\n\n  let builder = new NarrativeBuilder(options);\n  builder.profileGd = wtGeneralizedData;\n  builder.eventGd = eventGeneralizedData;\n\n  if (wtGeneralizedData && wtGeneralizedData.personGender) {\n    builder.personGender = wtGeneralizedData.personGender;\n  } else if (eventGeneralizedData.personGender) {\n    builder.personGender = eventGeneralizedData.personGender;\n  }\n\n  builder.buildNarrativeString();\n\n  return builder.narrative;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/base/core/narrative_builder.mjs\n");

/***/ }),

/***/ "./extension/base/core/narrative_or_sentence_utils.mjs":
/*!*************************************************************!*\
  !*** ./extension/base/core/narrative_or_sentence_utils.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getChildTerm\": () => (/* binding */ getChildTerm),\n/* harmony export */   \"getParentTerm\": () => (/* binding */ getParentTerm),\n/* harmony export */   \"getPrimaryPersonChildTerm\": () => (/* binding */ getPrimaryPersonChildTerm),\n/* harmony export */   \"getPrimaryPersonParentTerm\": () => (/* binding */ getPrimaryPersonParentTerm),\n/* harmony export */   \"getPrimaryPersonSpouseTerm\": () => (/* binding */ getPrimaryPersonSpouseTerm),\n/* harmony export */   \"getSpouseTerm\": () => (/* binding */ getSpouseTerm)\n/* harmony export */ });\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\nfunction getChildTerm(gender) {\n  if (!gender) {\n    return \"child\";\n  } else if (gender == \"male\") {\n    return \"son\";\n  } else if (gender == \"female\") {\n    return \"daughter\";\n  }\n}\n\nfunction getPrimaryPersonChildTerm(gd) {\n  return getChildTerm(gd.primaryPersonGender);\n}\n\nfunction getParentTerm(gender) {\n  if (!gender) {\n    return \"parent\";\n  } else if (gender == \"male\") {\n    return \"father\";\n  } else if (gender == \"female\") {\n    return \"mother\";\n  }\n}\n\nfunction getPrimaryPersonParentTerm(gd) {\n  return getParentTerm(gd.primaryPersonGender);\n}\n\nfunction getSpouseTerm(gender) {\n  if (!gender) {\n    return \"spouse\";\n  } else if (gender == \"male\") {\n    return \"husband\";\n  } else if (gender == \"female\") {\n    return \"wife\";\n  }\n}\n\nfunction getPrimaryPersonSpouseTerm(gd) {\n  return getSpouseTerm(gd.primaryPersonGender);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb24vYmFzZS9jb3JlL25hcnJhdGl2ZV9vcl9zZW50ZW5jZV91dGlscy5tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQVNFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQ2l0YXRpb25FeHRyYWN0b3IvLi9leHRlbnNpb24vYmFzZS9jb3JlL25hcnJhdGl2ZV9vcl9zZW50ZW5jZV91dGlscy5tanM/YzZhOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIFJvYmVydCBNIFBhdmV5XG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmZ1bmN0aW9uIGdldENoaWxkVGVybShnZW5kZXIpIHtcbiAgaWYgKCFnZW5kZXIpIHtcbiAgICByZXR1cm4gXCJjaGlsZFwiO1xuICB9IGVsc2UgaWYgKGdlbmRlciA9PSBcIm1hbGVcIikge1xuICAgIHJldHVybiBcInNvblwiO1xuICB9IGVsc2UgaWYgKGdlbmRlciA9PSBcImZlbWFsZVwiKSB7XG4gICAgcmV0dXJuIFwiZGF1Z2h0ZXJcIjtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRQcmltYXJ5UGVyc29uQ2hpbGRUZXJtKGdkKSB7XG4gIHJldHVybiBnZXRDaGlsZFRlcm0oZ2QucHJpbWFyeVBlcnNvbkdlbmRlcik7XG59XG5cbmZ1bmN0aW9uIGdldFBhcmVudFRlcm0oZ2VuZGVyKSB7XG4gIGlmICghZ2VuZGVyKSB7XG4gICAgcmV0dXJuIFwicGFyZW50XCI7XG4gIH0gZWxzZSBpZiAoZ2VuZGVyID09IFwibWFsZVwiKSB7XG4gICAgcmV0dXJuIFwiZmF0aGVyXCI7XG4gIH0gZWxzZSBpZiAoZ2VuZGVyID09IFwiZmVtYWxlXCIpIHtcbiAgICByZXR1cm4gXCJtb3RoZXJcIjtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRQcmltYXJ5UGVyc29uUGFyZW50VGVybShnZCkge1xuICByZXR1cm4gZ2V0UGFyZW50VGVybShnZC5wcmltYXJ5UGVyc29uR2VuZGVyKTtcbn1cblxuZnVuY3Rpb24gZ2V0U3BvdXNlVGVybShnZW5kZXIpIHtcbiAgaWYgKCFnZW5kZXIpIHtcbiAgICByZXR1cm4gXCJzcG91c2VcIjtcbiAgfSBlbHNlIGlmIChnZW5kZXIgPT0gXCJtYWxlXCIpIHtcbiAgICByZXR1cm4gXCJodXNiYW5kXCI7XG4gIH0gZWxzZSBpZiAoZ2VuZGVyID09IFwiZmVtYWxlXCIpIHtcbiAgICByZXR1cm4gXCJ3aWZlXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UHJpbWFyeVBlcnNvblNwb3VzZVRlcm0oZ2QpIHtcbiAgcmV0dXJuIGdldFNwb3VzZVRlcm0oZ2QucHJpbWFyeVBlcnNvbkdlbmRlcik7XG59XG5cbmV4cG9ydCB7XG4gIGdldENoaWxkVGVybSxcbiAgZ2V0UHJpbWFyeVBlcnNvbkNoaWxkVGVybSxcbiAgZ2V0UGFyZW50VGVybSxcbiAgZ2V0UHJpbWFyeVBlcnNvblBhcmVudFRlcm0sXG4gIGdldFNwb3VzZVRlcm0sXG4gIGdldFByaW1hcnlQZXJzb25TcG91c2VUZXJtLFxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./extension/base/core/narrative_or_sentence_utils.mjs\n");

/***/ }),

/***/ "./extension/base/core/options/options_database.mjs":
/*!**********************************************************!*\
  !*** ./extension/base/core/options/options_database.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getDefaultOptions\": () => (/* binding */ getDefaultOptions),\n/* harmony export */   \"getUnitTestOptions\": () => (/* binding */ getUnitTestOptions),\n/* harmony export */   \"optionsRegistry\": () => (/* reexport safe */ _options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.optionsRegistry)\n/* harmony export */ });\n/* harmony import */ var _options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./options_registry.mjs */ \"./extension/base/core/options/options_registry.mjs\");\n/* harmony import */ var _register_base_options_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./register_base_options.mjs */ \"./extension/base/core/options/register_base_options.mjs\");\n/* harmony import */ var _site_all_core_register_site_options_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../site/all/core/register_site_options.mjs */ \"./extension/site/all/core/register_site_options.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\n\n\nfunction getDefaultOptions() {\n  // build the options structure from the optionsRegistry\n\n  let defaultOptions = {};\n\n  defaultOptions.options_version = 6;\n\n  for (let optionsGroup of _options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.optionsRegistry.optionsGroups) {\n    let optionNamePrefix = optionsGroup.category + \"_\" + optionsGroup.subcategory + \"_\";\n\n    for (let option of optionsGroup.options) {\n      let fullOptionName = optionNamePrefix + option.optionName;\n      defaultOptions[fullOptionName] = option.defaultValue;\n    }\n  }\n\n  return defaultOptions;\n}\n\nfunction getUnitTestOptions() {\n  // build the options structure from the optionsRegistry\n\n  let unitTestOptions = {};\n\n  unitTestOptions.options_version = 5;\n\n  for (let optionsGroup of _options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.optionsRegistry.optionsGroups) {\n    let optionNamePrefix = optionsGroup.category + \"_\" + optionsGroup.subcategory + \"_\";\n\n    for (let option of optionsGroup.options) {\n      let fullOptionName = optionNamePrefix + option.optionName;\n      let value = undefined;\n      if (typeof option.unitTestValue === \"undefined\") {\n        value = option.defaultValue;\n      } else {\n        value = option.unitTestValue;\n      }\n      unitTestOptions[fullOptionName] = value;\n    }\n  }\n\n  return unitTestOptions;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb24vYmFzZS9jb3JlL29wdGlvbnMvb3B0aW9uc19kYXRhYmFzZS5tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV5RDtBQUNwQjtBQUNxQjs7QUFFMUQ7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSwyQkFBMkIsZ0ZBQTZCO0FBQ3hEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLDJCQUEyQixnRkFBNkI7QUFDeEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRWtFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQ2l0YXRpb25FeHRyYWN0b3IvLi9leHRlbnNpb24vYmFzZS9jb3JlL29wdGlvbnMvb3B0aW9uc19kYXRhYmFzZS5tanM/ZGZiNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIFJvYmVydCBNIFBhdmV5XG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCB7IG9wdGlvbnNSZWdpc3RyeSB9IGZyb20gXCIuL29wdGlvbnNfcmVnaXN0cnkubWpzXCI7XG5pbXBvcnQgXCIuL3JlZ2lzdGVyX2Jhc2Vfb3B0aW9ucy5tanNcIjtcbmltcG9ydCBcIi4uLy4uLy4uL3NpdGUvYWxsL2NvcmUvcmVnaXN0ZXJfc2l0ZV9vcHRpb25zLm1qc1wiO1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0T3B0aW9ucygpIHtcbiAgLy8gYnVpbGQgdGhlIG9wdGlvbnMgc3RydWN0dXJlIGZyb20gdGhlIG9wdGlvbnNSZWdpc3RyeVxuXG4gIGxldCBkZWZhdWx0T3B0aW9ucyA9IHt9O1xuXG4gIGRlZmF1bHRPcHRpb25zLm9wdGlvbnNfdmVyc2lvbiA9IDY7XG5cbiAgZm9yIChsZXQgb3B0aW9uc0dyb3VwIG9mIG9wdGlvbnNSZWdpc3RyeS5vcHRpb25zR3JvdXBzKSB7XG4gICAgbGV0IG9wdGlvbk5hbWVQcmVmaXggPSBvcHRpb25zR3JvdXAuY2F0ZWdvcnkgKyBcIl9cIiArIG9wdGlvbnNHcm91cC5zdWJjYXRlZ29yeSArIFwiX1wiO1xuXG4gICAgZm9yIChsZXQgb3B0aW9uIG9mIG9wdGlvbnNHcm91cC5vcHRpb25zKSB7XG4gICAgICBsZXQgZnVsbE9wdGlvbk5hbWUgPSBvcHRpb25OYW1lUHJlZml4ICsgb3B0aW9uLm9wdGlvbk5hbWU7XG4gICAgICBkZWZhdWx0T3B0aW9uc1tmdWxsT3B0aW9uTmFtZV0gPSBvcHRpb24uZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZWZhdWx0T3B0aW9ucztcbn1cblxuZnVuY3Rpb24gZ2V0VW5pdFRlc3RPcHRpb25zKCkge1xuICAvLyBidWlsZCB0aGUgb3B0aW9ucyBzdHJ1Y3R1cmUgZnJvbSB0aGUgb3B0aW9uc1JlZ2lzdHJ5XG5cbiAgbGV0IHVuaXRUZXN0T3B0aW9ucyA9IHt9O1xuXG4gIHVuaXRUZXN0T3B0aW9ucy5vcHRpb25zX3ZlcnNpb24gPSA1O1xuXG4gIGZvciAobGV0IG9wdGlvbnNHcm91cCBvZiBvcHRpb25zUmVnaXN0cnkub3B0aW9uc0dyb3Vwcykge1xuICAgIGxldCBvcHRpb25OYW1lUHJlZml4ID0gb3B0aW9uc0dyb3VwLmNhdGVnb3J5ICsgXCJfXCIgKyBvcHRpb25zR3JvdXAuc3ViY2F0ZWdvcnkgKyBcIl9cIjtcblxuICAgIGZvciAobGV0IG9wdGlvbiBvZiBvcHRpb25zR3JvdXAub3B0aW9ucykge1xuICAgICAgbGV0IGZ1bGxPcHRpb25OYW1lID0gb3B0aW9uTmFtZVByZWZpeCArIG9wdGlvbi5vcHRpb25OYW1lO1xuICAgICAgbGV0IHZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb24udW5pdFRlc3RWYWx1ZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICB2YWx1ZSA9IG9wdGlvbi5kZWZhdWx0VmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IG9wdGlvbi51bml0VGVzdFZhbHVlO1xuICAgICAgfVxuICAgICAgdW5pdFRlc3RPcHRpb25zW2Z1bGxPcHRpb25OYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bml0VGVzdE9wdGlvbnM7XG59XG5cbmV4cG9ydCB7IGdldERlZmF1bHRPcHRpb25zLCBnZXRVbml0VGVzdE9wdGlvbnMsIG9wdGlvbnNSZWdpc3RyeSB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./extension/base/core/options/options_database.mjs\n");

/***/ }),

/***/ "./extension/base/core/options/options_registry.mjs":
/*!**********************************************************!*\
  !*** ./extension/base/core/options/options_registry.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"optionsRegistry\": () => (/* binding */ optionsRegistry),\n/* harmony export */   \"registerOptionsGroup\": () => (/* binding */ registerOptionsGroup),\n/* harmony export */   \"registerSiteSearchPopupOptionsGroup\": () => (/* binding */ registerSiteSearchPopupOptionsGroup),\n/* harmony export */   \"registerSubheadingForOptions\": () => (/* binding */ registerSubheadingForOptions),\n/* harmony export */   \"registerSubsectionForOptions\": () => (/* binding */ registerSubsectionForOptions)\n/* harmony export */ });\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\nvar optionsRegistry = {\n  tabs: [\n    { name: \"search\", label: \"Search\", subsections: [] },\n    { name: \"citation\", label: \"Citation\", subsections: [] },\n    {\n      name: \"narrative\",\n      label: \"Narrative\",\n      subsections: [],\n      comment:\n        \"These options apply to the narrative sentence that is generated before \" +\n        'the inline citation by the \"Build Narrative with Citation\" menu option.',\n    },\n    {\n      name: \"table\",\n      label: \"Household Table\",\n      subsections: [],\n      comment:\n        \"These options apply to Household Tables. \" +\n        \"A Household Table can be generated when you are on a census record. \" +\n        \"It is separate from the citation.\",\n    },\n    {\n      name: \"addMerge\",\n      label: \"Add/Merge\",\n      subsections: [],\n      comment:\n        \"These options apply to filling fields in the Add Person screen or the Merge/Edit screen \" +\n        \"from person data or a citation.\\n\" +\n        \"Person data can be saved when you are on a person page in Ancestry, FamilySearch, etc. \" +\n        \"It is separate from the citation.\",\n    },\n  ],\n  optionsGroups: [],\n};\n\nfunction registerSubsectionForOptions(tabName, name, label) {\n  //console.log(\"registerSubsectionForOptions: tabName is: \" + tabName + \", name is: \" + name + \", label is: \" + label);\n\n  let tab = undefined;\n  for (let thisTab of optionsRegistry.tabs) {\n    if (thisTab.name == tabName) {\n      tab = thisTab;\n    }\n  }\n  //console.log(\"registerSubsectionForOptions: tab is: \");\n  //console.log(tab);\n\n  if (tab) {\n    let existingSubsection = undefined;\n    for (let subsection of tab.subsections) {\n      if (subsection.name == name) {\n        existingSubsection = subsection;\n      }\n    }\n\n    if (existingSubsection) {\n      console.log(\"registerSubsectionForOptions, subsection already exists: \" + name);\n      return;\n    }\n\n    tab.subsections.push({ name: name, label: label, subheadings: [] });\n  }\n}\n\nfunction registerSubheadingForOptions(tabName, subsectionName, name, label) {\n  //console.log(\"registerSubheadingForOptions: tabName is: \" + tabName + \", name is: \" + name + \", label is: \" + label);\n\n  let tab = undefined;\n  for (let thisTab of optionsRegistry.tabs) {\n    if (thisTab.name == tabName) {\n      tab = thisTab;\n    }\n  }\n  //console.log(\"registerSubheadingForOptions: tab is: \");\n  //console.log(tab);\n\n  if (tab) {\n    let existingSubsection = undefined;\n    for (let subsection of tab.subsections) {\n      if (subsection.name == subsectionName) {\n        existingSubsection = subsection;\n      }\n    }\n\n    if (existingSubsection) {\n      let existingSubheading = undefined;\n      for (let subheading of existingSubsection.subheadings) {\n        if (subheading.name == name) {\n          existingSubheading = subsection;\n        }\n      }\n\n      if (existingSubheading) {\n        console.log(\"registerSubheadingForOptions, subheading already exists: \" + name);\n        return;\n      }\n\n      existingSubsection.subheadings.push({ name: name, label: label });\n    }\n  }\n}\n\nfunction registerOptionsGroup(optionsGroup) {\n  optionsRegistry.optionsGroups.push(optionsGroup);\n}\n\nfunction registerSiteSearchPopupOptionsGroup(siteName, topMenuPriority, subMenuPriority) {\n  const optionsGroup = {\n    category: \"search\",\n    subcategory: siteName,\n    tab: \"search\",\n    subsection: siteName,\n    subheading: \"popup\",\n    options: [\n      {\n        optionName: \"popup_priorityOnTopMenu\",\n        type: \"number\",\n        label: \"Priority of the search menu item for this site on the top-level popup menu\",\n        defaultValue: topMenuPriority,\n      },\n      {\n        optionName: \"popup_priorityOnSubMenu\",\n        type: \"number\",\n        label: \"Priority of the search menu item for this site on the search submenu\",\n        defaultValue: subMenuPriority,\n        comment: \"NOTE: One is highest priority. A priority of zero or less means never show this menu item.\",\n      },\n    ],\n  };\n\n  registerSubheadingForOptions(\"search\", siteName, \"popup\", \"Popup Menu\");\n  registerOptionsGroup(optionsGroup);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/base/core/options/options_registry.mjs\n");

/***/ }),

/***/ "./extension/base/core/options/register_base_options.mjs":
/*!***************************************************************!*\
  !*** ./extension/base/core/options/register_base_options.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./options_registry.mjs */ \"./extension/base/core/options/options_registry.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n// Search options groups\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst searchOptionsGroup = {\n  category: \"search\",\n  subcategory: \"general\",\n  tab: \"search\",\n  subsection: \"general\",\n  options: [\n    {\n      optionName: \"new_window\",\n      type: \"checkbox\",\n      label: \"Open search results in a new window rather than a new tab\",\n      defaultValue: false,\n    },\n    {\n      optionName: \"popup_showSameSite\",\n      type: \"checkbox\",\n      label: \"On the popup show a search menu item for the site that you are currently on\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"popup_maxSearchItemsInTopMenu\",\n      type: \"number\",\n      label: \"Maximum number of search menu items to show on top-level popup (0 means just show search submenu)\",\n      defaultValue: 8,\n    },\n    {\n      optionName: \"maxLifespan\",\n      type: \"number\",\n      label: \"Maximum lifespan to consider when building search date/age ranges\",\n      defaultValue: 120,\n    },\n  ],\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n// Citation options groups\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst citationOptionsGroup = {\n  category: \"citation\",\n  subcategory: \"general\",\n  tab: \"citation\",\n  subsection: \"general\",\n  options: [\n    {\n      optionName: \"meaningfulNames\",\n      type: \"select\",\n      label: 'Add a label at the start of each reference (this shows up in the \"Sources\" section)',\n      values: [\n        { value: \"none\", text: \"None\" },\n        { value: \"normal\", text: \"In normal text\" },\n        { value: \"bold\", text: \"In bold text\" },\n        { value: \"italic\", text: \"In italic text\" },\n      ],\n      defaultValue: \"bold\",\n    },\n    {\n      optionName: \"commaInsideQuotes\",\n      type: \"checkbox\",\n      label: \"Put commas inside quotation marks (old US typographical convention) [EE style]\",\n      defaultValue: false,\n    },\n    {\n      optionName: \"addEeItemType\",\n      type: \"checkbox\",\n      label: 'Add \"database\" or \"database with images\" after the database/collection title [EE style]',\n      defaultValue: false,\n    },\n    {\n      optionName: \"referencePosition\",\n      type: \"select\",\n      label: \"Place the source reference data\",\n      values: [\n        {\n          value: \"afterSourceTitle\",\n          text: \"After the database/collection title\",\n        },\n        {\n          value: \"atEnd\",\n          text: \"At the end of the citation (disables data table) [EE Style]\",\n        },\n      ],\n      defaultValue: \"afterSourceTitle\",\n    },\n    {\n      optionName: \"addAccessedDate\",\n      type: \"select\",\n      label: \"Add an accessed date to citation\",\n      values: [\n        { value: \"none\", text: \"None\" },\n        {\n          value: \"parenAfterLink\",\n          text: \"In form '<link> (accessed 15 June 2022)'\",\n        },\n        {\n          value: \"parenBeforeLink\",\n          text: \"In form '(<link> : accessed 15 June 2022)' [EE style]\",\n        },\n      ],\n      defaultValue: \"parenAfterLink\",\n    },\n    {\n      optionName: \"sourceReferenceSeparator\",\n      type: \"select\",\n      label: \"Separators to use between parts of the source reference data\",\n      values: [\n        {\n          value: \"semicolon\",\n          text: \"Semi-colon (and colon if key/value pair) (; Page: 2)\",\n        },\n        {\n          value: \"commaColon\",\n          text: \"Comma and (and colon if key/value pair) (, Page: 2)\",\n        },\n        { value: \"commaSpace\", text: \"Comma only (, Page 2) [EE style?]\" },\n        {\n          value: \"siteStyle\",\n          text: \"Follow the style of the site being cited (if any, else semi-colon)\",\n        },\n      ],\n      defaultValue: \"semicolon\",\n    },\n    {\n      optionName: \"dataListSeparator\",\n      type: \"select\",\n      label: \"Separators to use for key/value pairs in data list (if list used rather than sentence or table)\",\n      values: [\n        { value: \"semicolon\", text: \"Semi-colon and colon (; Age: 20)\" },\n        { value: \"commaColon\", text: \"Comma and colon (, Age: 20)\" },\n        { value: \"commaSpace\", text: \"Comma only (, Age 20) [EE style?]\" },\n      ],\n      defaultValue: \"semicolon\",\n    },\n    {\n      optionName: \"addNewlinesWithinRefs\",\n      type: \"checkbox\",\n      label:\n        \"Add newlines after the <ref> and before the </ref> (for readability in edit mode, no effect in read mode)\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"addNewlinesWithinBody\",\n      type: \"checkbox\",\n      label: \"Add newlines within the citation between sections (for readability in edit mode, no effect in read mode)\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"addBreaksWithinBody\",\n      type: \"checkbox\",\n      label: \"Add <br/>s within the citation between sections (for readability in read mode)\",\n      defaultValue: true,\n    },\n  ],\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n// Narrative options groups\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst narrativeOptionsGroup = {\n  category: \"narrative\",\n  subcategory: \"general\",\n  tab: \"narrative\",\n  subsection: \"general\",\n  options: [\n    {\n      optionName: \"spelling\",\n      type: \"select\",\n      label: \"Spelling\",\n      values: [\n        { value: \"en_uk\", text: \"UK English\" },\n        { value: \"en_us\", text: \"US English\" },\n      ],\n      defaultValue: \"en_uk\",\n    },\n    {\n      optionName: \"nameOrPronoun\",\n      type: \"select\",\n      label: \"Name/pronoun to use in narrative events\",\n      values: [\n        {\n          value: \"firstName\",\n          text: \"First name (single word), if not known use last name\",\n        },\n        { value: \"forenames\", text: \"Forenames, if not known use last name\" },\n        { value: \"fullName\", text: \"Full name\" },\n        {\n          value: \"pronoun\",\n          text: \"Pronoun (he/she), if not known use first name\",\n        },\n      ],\n      defaultValue: \"firstName\",\n    },\n    {\n      optionName: \"country\",\n      type: \"select\",\n      label: \"Include country in place names in narrative events (if known)\",\n      values: [\n        { value: \"full\", text: \"Include country as recorded in record\" },\n        { value: \"standard\", text: \"Use standardized or abbreviated country\" },\n        { value: \"none\", text: \"Omit country from place name\" },\n      ],\n      defaultValue: \"standard\",\n      unitTestValue: \"full\",\n    },\n    {\n      optionName: \"dateFormat\",\n      type: \"select\",\n      label: \"Date format in narrative string\",\n      values: [\n        { value: \"long\", text: \"dd Month yyyy (e.g. '12 September 1845')\" },\n        { value: \"short\", text: \"dd Mmm yyyy (e.g. '12 Sep 1845')\" },\n        {\n          value: \"theNth\",\n          text: \"the ddth of Month yyyy (e.g. 'the 12th of September 1845')\",\n        },\n        {\n          value: \"monthComma\",\n          text: \"Month dd, yyyy (e.g. 'September 12, 1845')\",\n        },\n        {\n          value: \"monthCommaNth\",\n          text: \"Month ddth, yyyy (e.g. 'September 12th, 1845')\",\n        },\n        {\n          value: \"country\",\n          text: \"Country specific (e.g. 'September 12, 1845' in US, '12 September 1845' elsewhere)\",\n        },\n        {\n          value: \"countryNth\",\n          text: \"Country specific, long (e.g. 'September 12th, 1845' in US, 'the 12th of September 1845' elsewhere)\",\n        },\n      ],\n      defaultValue: \"long\",\n    },\n    {\n      optionName: \"dateHighlight\",\n      type: \"select\",\n      label: \"Highlight the date in a narrative string\",\n      values: [\n        { value: \"none\", text: \"No highlight\" },\n        { value: \"bold\", text: \"Bold\" },\n        { value: \"italic\", text: \"Italic\" },\n      ],\n      defaultValue: \"none\",\n    },\n    {\n      optionName: \"parentsUseAmpOrAnd\",\n      type: \"select\",\n      label: \"Separator to use between parents\",\n      values: [\n        { value: \"amp\", text: \" & \" },\n        { value: \"and\", text: \" and \" },\n      ],\n      defaultValue: \"amp\",\n    },\n    {\n      optionName: \"occupationFormat\",\n      type: \"select\",\n      label: \"Case/format to use for occupations\",\n      values: [\n        {\n          value: \"keepCase\",\n          text: \"Keep case from record (with some cleanup)\",\n        },\n        { value: \"titleCase\", text: \"Title Case (e.g. 'Coal Miner')\" },\n        { value: \"lowerCase\", text: \"Lower Case (e.g. 'coal miner')\" },\n      ],\n      defaultValue: \"keepCase\",\n    },\n    {\n      optionName: \"placeChurchFirst\",\n      type: \"select\",\n      label: \"Attempt to put church name before town name (for certain sites and countries)\",\n      values: [\n        { value: \"no\", text: \"No\" },\n        { value: \"yes\", text: \"Yes\" },\n      ],\n      defaultValue: \"no\",\n    },\n  ],\n};\n\nconst narrativeRecordTypeNameOrPronounOption = {\n  optionName: \"nameOrPronoun\",\n  type: \"select\",\n  label: \"Name/pronoun to use in narrative events\",\n  values: [\n    {\n      value: \"default\",\n      text: \"Use default specified in the 'General' subsection\",\n    },\n    {\n      value: \"firstName\",\n      text: \"First name (single word), if not known use last name\",\n    },\n    { value: \"forenames\", text: \"Forenames, if not known use last name\" },\n    { value: \"fullName\", text: \"Full name\" },\n    {\n      value: \"pronoun\",\n      text: \"Pronoun (he/she), if gender not known use first name\",\n    },\n  ],\n  defaultValue: \"default\",\n};\n\nconst narrativeIncludeParentageOption = {\n  optionName: \"includeParentage\",\n  type: \"select\",\n  label: \"Include parentage if known\",\n  values: [\n    { value: \"no\", text: \"No\" },\n    { value: \"inMainSentence\", text: \"In the main sentence\" },\n    { value: \"inSeparateSentence\", text: \"In a separate following sentence\" },\n  ],\n  defaultValue: \"inMainSentence\",\n};\n\nconst narrativeParentageFormatOption = {\n  optionName: \"parentageFormat\",\n  type: \"select\",\n  label: \"Parentage format if in main sentence\",\n  values: [\n    {\n      value: \"twoCommas\",\n      text: \", <son/daughter/child> of <parentName1>[ & <parentName2>],\",\n    },\n    {\n      value: \"theTwoCommas\",\n      text: \", the <son/daughter/child> of <parentName1>[ & <parentName2>],\",\n    },\n  ],\n  defaultValue: \"twoCommas\",\n  comment:\n    \"NOTE: [square brackets] in options above denote optional parts that are only present if that data is known.\",\n};\n\nconst narrativeRegistrationDistrictFormatOption = {\n  optionName: \"regDistrictFormat\",\n  type: \"select\",\n  label: \"Registration district format\",\n  values: [\n    { value: \"theDistrict\", text: \"the <district name> district\" },\n    { value: \"districtName\", text: \"<district name>\" },\n    { value: \"districtCounty\", text: \"<district name>[, <county name>]\" },\n  ],\n  defaultValue: \"theDistrict\",\n};\n\nconst narrativeIncludeAgeOption = {\n  optionName: \"includeAge\",\n  type: \"select\",\n  label: \"Include age if known\",\n  values: [\n    { value: \"no\", text: \"No\" },\n    { value: \"inMainSentence\", text: \"In the main sentence\" },\n    { value: \"inSeparateSentence\", text: \"In a separate following sentence\" },\n  ],\n  defaultValue: \"inMainSentence\",\n};\n\nconst narrativeAgeFormatOption = {\n  optionName: \"ageFormat\",\n  type: \"select\",\n  label: \"Age format\",\n  values: [\n    { value: \"parensAge\", text: \"(age <age>)\" },\n    { value: \"commasAge\", text: \", age <age>,\" },\n    { value: \"plainAge\", text: \" age <age>\" },\n    { value: \"parensAged\", text: \"(aged <age>)\" },\n    { value: \"commasAged\", text: \", aged <age>,\" },\n    { value: \"plainAged\", text: \" aged <age>\" },\n  ],\n  defaultValue: \"parensAge\",\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n// Record type specific narrative options groups\n////////////////////////////////////////////////////////////////////////////////////////////////////\nconst narrativeBirthOptionsGroup = {\n  category: \"narrative\",\n  subcategory: \"birth\",\n  tab: \"narrative\",\n  subsection: \"birth\",\n  options: [narrativeRecordTypeNameOrPronounOption, narrativeIncludeParentageOption, narrativeParentageFormatOption],\n};\n\nconst narrativeBirthRegOptionsGroup = {\n  category: \"narrative\",\n  subcategory: \"birthReg\",\n  tab: \"narrative\",\n  subsection: \"birthReg\",\n  options: [narrativeRecordTypeNameOrPronounOption],\n};\n\nconst narrativeBirthRegEvtOptionsGroup = {\n  category: \"narrative\",\n  subcategory: \"birthRegEvt\",\n  tab: \"narrative\",\n  subsection: \"birthReg\",\n  subheading: \"evt\",\n  options: [\n    {\n      optionName: \"sentenceStructure\",\n      type: \"select\",\n      label: \"Sentence structure\",\n      values: [\n        {\n          value: \"oneSentence\",\n          text: \"<name/pronoun> was born <date> <place>.\",\n        },\n      ],\n      defaultValue: \"oneSentence\",\n    },\n    narrativeIncludeParentageOption,\n    narrativeParentageFormatOption,\n  ],\n};\n\nconst narrativeBirthRegRegOptionsGroup = {\n  category: \"narrative\",\n  subcategory: \"birthRegReg\",\n  tab: \"narrative\",\n  subsection: \"birthReg\",\n  subheading: \"reg\",\n  options: [\n    {\n      optionName: \"sentenceStructure\",\n      type: \"select\",\n      label: \"Sentence structure\",\n      values: [\n        {\n          value: \"oneSentence\",\n          text: \"<possessive name/pronoun> birth was registered <date> in <place>.\",\n        },\n        {\n          value: \"twoSentences\",\n          text: \"<name/pronoun> was born <date>. <possessive pronoun> birth was registered in <place>.\",\n        },\n        {\n          value: \"twoSentencesDate\",\n          text: \"<name/pronoun> was born <date>. <possessive pronoun> birth was registered <date> in <place>.\",\n        },\n      ],\n      defaultValue: \"oneSentence\",\n    },\n    narrativeRegistrationDistrictFormatOption,\n  ],\n};\n\nconst narrativeBaptismOptionsGroup = {\n  category: \"narrative\",\n  subcategory: \"baptism\",\n  tab: \"narrative\",\n  subsection: \"baptism\",\n  options: [\n    narrativeRecordTypeNameOrPronounOption,\n    {\n      optionName: \"sentenceStructure\",\n      type: \"select\",\n      label: \"Sentence structure\",\n      values: [\n        {\n          value: \"parentsBornAndBap\",\n          text: \"<name/pronoun>[<parentage>] was[ born on <date> and] baptised on <date> in <place>.\",\n        },\n        {\n          value: \"parentsBornSemiBap\",\n          text: \"<name/pronoun>[<parentage>] was[ born on <date>;] baptised on <date> in <place>.\",\n        },\n      ],\n      defaultValue: \"parentsBornAndBap\",\n    },\n    narrativeIncludeParentageOption,\n    narrativeParentageFormatOption,\n    {\n      optionName: \"includeBirthDate\",\n      type: \"checkbox\",\n      label: \"Include birth date if known\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"includeDeathDate\",\n      type: \"checkbox\",\n      label: \"Include death date if known\",\n      defaultValue: true,\n    },\n  ],\n};\n\nconst narrativeBirthOrBaptismOptionsGroup = {\n  category: \"narrative\",\n  subcategory: \"birthOrBaptism\",\n  tab: \"narrative\",\n  subsection: \"birthOrBaptism\",\n  options: [narrativeRecordTypeNameOrPronounOption, narrativeIncludeParentageOption, narrativeParentageFormatOption],\n};\n\nconst narrativeMarriageOptionsGroup = {\n  category: \"narrative\",\n  subcategory: \"marriage\",\n  tab: \"narrative\",\n  subsection: \"marriage\",\n  options: [\n    narrativeRecordTypeNameOrPronounOption,\n    narrativeIncludeParentageOption,\n    narrativeParentageFormatOption,\n    narrativeIncludeAgeOption,\n    narrativeAgeFormatOption,\n  ],\n};\n\nconst narrativeMarriageRegOptionsGroup = {\n  category: \"narrative\",\n  subcategory: \"marriageReg\",\n  tab: \"narrative\",\n  subsection: \"marriageReg\",\n  options: [\n    narrativeRecordTypeNameOrPronounOption,\n    narrativeIncludeParentageOption,\n    narrativeParentageFormatOption,\n    narrativeIncludeAgeOption,\n    narrativeAgeFormatOption,\n  ],\n};\n\nconst narrativeMarriageRegEvtOptionsGroup = {\n  category: \"narrative\",\n  subcategory: \"marriageRegEvt\",\n  tab: \"narrative\",\n  subsection: \"marriageReg\",\n  subheading: \"evt\",\n  options: [\n    {\n      optionName: \"sentenceStructure\",\n      type: \"select\",\n      label: \"Sentence structure\",\n      values: [\n        {\n          value: \"oneSentence\",\n          text: \"<name/pronoun> married[ <spouse>] <date> <place>.\",\n        },\n      ],\n      defaultValue: \"oneSentence\",\n    },\n  ],\n};\n\nconst narrativeMarriageRegRegOptionsGroup = {\n  category: \"narrative\",\n  subcategory: \"marriageRegReg\",\n  tab: \"narrative\",\n  subsection: \"marriageReg\",\n  subheading: \"reg\",\n  options: [\n    {\n      optionName: \"sentenceStructure\",\n      type: \"select\",\n      label: \"Sentence structure\",\n      values: [\n        {\n          value: \"oneSentence\",\n          text: \"<name/pronoun> marriage[ to <spouse>] was registered <date> in <place>.\",\n        },\n        {\n          value: \"twoSentences\",\n          text: \"<name/pronoun> married[ <spouse>] <year(s)>. Their marriage was registered in <place>.\",\n        },\n        {\n          value: \"twoSentencesDate\",\n          text: \"<name/pronoun> married[ <spouse>] <year(s)>. Their marriage was registered <date> in <place>.\",\n        },\n      ],\n      defaultValue: \"oneSentence\",\n    },\n    narrativeRegistrationDistrictFormatOption,\n  ],\n};\n\nconst narrativeDeathOptionsGroup = {\n  category: \"narrative\",\n  subcategory: \"death\",\n  tab: \"narrative\",\n  subsection: \"death\",\n  options: [\n    narrativeRecordTypeNameOrPronounOption,\n    narrativeIncludeParentageOption,\n    narrativeParentageFormatOption,\n    narrativeIncludeAgeOption,\n    narrativeAgeFormatOption,\n  ],\n};\n\nconst narrativeDeathRegOptionsGroup = {\n  category: \"narrative\",\n  subcategory: \"deathReg\", // abbreviated to keep storage size of options down\n  tab: \"narrative\",\n  subsection: \"deathReg\",\n  options: [narrativeRecordTypeNameOrPronounOption, narrativeIncludeAgeOption, narrativeAgeFormatOption],\n};\n\nconst narrativeDeathRegEvtOptionsGroup = {\n  category: \"narrative\",\n  subcategory: \"deathRegEvt\", // abbreviated to keep storage size of options down\n  tab: \"narrative\",\n  subsection: \"deathReg\",\n  subheading: \"evt\",\n  options: [\n    {\n      optionName: \"sentenceStructure\",\n      type: \"select\",\n      label: \"Sentence structure\",\n      values: [{ value: \"oneSentence\", text: \"<name/pronoun> died <date> <place>.\" }],\n      defaultValue: \"oneSentence\",\n    },\n    narrativeIncludeParentageOption,\n    narrativeParentageFormatOption,\n  ],\n};\n\nconst narrativeDeathRegRegOptionsGroup = {\n  category: \"narrative\",\n  subcategory: \"deathRegReg\", // abbreviated to keep storage size of options down\n  tab: \"narrative\",\n  subsection: \"deathReg\",\n  subheading: \"reg\",\n  options: [\n    {\n      optionName: \"sentenceStructure\",\n      type: \"select\",\n      label: \"Sentence structure\",\n      values: [\n        {\n          value: \"oneSentence\",\n          text: \"<possessive name/pronoun> death was registered <date> in <place>.\",\n        },\n        {\n          value: \"twoSentences\",\n          text: \"<name/pronoun> died <date>. <possessive pronoun> death was registered in <place>.\",\n        },\n        {\n          value: \"twoSentencesDate\",\n          text: \"<name/pronoun> died <date>. <possessive pronoun> death was registered <date> in <place>.\",\n        },\n      ],\n      defaultValue: \"oneSentence\",\n    },\n    narrativeRegistrationDistrictFormatOption,\n  ],\n};\n\nconst narrativeBurialOptionsGroup = {\n  category: \"narrative\",\n  subcategory: \"burial\",\n  tab: \"narrative\",\n  subsection: \"burial\",\n  options: [\n    narrativeRecordTypeNameOrPronounOption,\n    narrativeIncludeParentageOption,\n    narrativeParentageFormatOption,\n    narrativeIncludeAgeOption,\n    narrativeAgeFormatOption,\n  ],\n};\n\nconst narrativeObituaryOptionsGroup = {\n  category: \"narrative\",\n  subcategory: \"obituary\",\n  tab: \"narrative\",\n  subsection: \"obituary\",\n  options: [\n    narrativeRecordTypeNameOrPronounOption,\n    narrativeIncludeParentageOption,\n    narrativeParentageFormatOption,\n    narrativeIncludeAgeOption,\n    narrativeAgeFormatOption,\n  ],\n};\n\nconst narrativeCensusOptionsGroup = {\n  category: \"narrative\",\n  subcategory: \"census\",\n  tab: \"narrative\",\n  subsection: \"census\",\n  options: [\n    narrativeRecordTypeNameOrPronounOption,\n    {\n      optionName: \"sentenceStructure\",\n      type: \"select\",\n      label: \"Main sentence structure\",\n      values: [\n        {\n          value: \"noComma\",\n          text: \"<census/date part> <name/pronoun>[ <agePart>][, <occupation>,] <was part> [<household part>] <in/on/at> <place>\",\n        },\n        {\n          value: \"comma\",\n          text: \"<census/date part>, <name/pronoun>[ <agePart>][, <occupation>,] <was part> [<household part>] <in/on/at> <place>\",\n        },\n      ],\n      defaultValue: \"noComma\",\n    },\n    {\n      optionName: \"censusDatePartFormat\",\n      type: \"select\",\n      label: \"Census/date part format\",\n      values: [\n        { value: \"inCensusTitle\", text: \"In the <census title>\" },\n        { value: \"inYearCensus\", text: \"In the <year> census\" },\n        { value: \"inYear\", text: \"In <year>\" },\n        { value: \"onDate\", text: \"On <date>\" },\n      ],\n      defaultValue: \"inYearCensus\",\n    },\n    narrativeIncludeAgeOption,\n    narrativeAgeFormatOption,\n    {\n      optionName: \"includeOccupation\",\n      type: \"select\",\n      label: \"Include occupation if known\",\n      values: [\n        { value: \"no\", text: \"No\" },\n        { value: \"inMainSentence\", text: \"In the main sentence\" },\n        {\n          value: \"inSeparateSentence\",\n          text: \"In a separate following sentence\",\n        },\n        {\n          value: \"inSeparateSentenceHead\",\n          text: \"In a separate following sentence. If no occupation give head's\",\n        },\n      ],\n      defaultValue: \"inMainSentence\",\n    },\n    {\n      optionName: \"wasPartFormat\",\n      type: \"select\",\n      label: \"Was part format\",\n      values: [\n        { value: \"was\", text: \"was\" },\n        { value: \"wasEnumerated\", text: \"was enumerated\" },\n        { value: \"wasRecorded\", text: \"was recorded\" },\n      ],\n      defaultValue: \"was\",\n    },\n    {\n      optionName: \"includeHousehold\",\n      type: \"select\",\n      label: \"Include household part in narrative\",\n      values: [\n        { value: \"no\", text: \"No\" },\n        { value: \"inMainSentence\", text: \"In the main sentence\" },\n        {\n          value: \"inSeparateSentence\",\n          text: \"In a separate following sentence\",\n        },\n      ],\n      defaultValue: \"inMainSentence\",\n    },\n    {\n      optionName: \"householdPartFormat\",\n      type: \"select\",\n      label: \"Household part format\",\n      values: [\n        { value: \"relationship\", text: \"the <relationship> of <name of head>\" },\n        { value: \"withFamily\", text: \"[with <describe close family members>]\" },\n      ],\n      defaultValue: \"relationship\",\n    },\n  ],\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n// Household Table options groups\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst tableGeneralOptionsGroup = {\n  category: \"table\",\n  subcategory: \"general\",\n  tab: \"table\",\n  subsection: \"general\",\n  options: [\n    {\n      optionName: \"autoGenerate\",\n      type: \"select\",\n      label: \"Automatically add household table in census citations\",\n      values: [\n        { value: \"none\", text: \"No\" },\n        {\n          value: \"afterRef\",\n          text: \"After the ref (so it shows up in the biography)\",\n        },\n        {\n          value: \"afterRefBlankLine\",\n          text: \"After the ref with a blank line preceding it (so it shows up in the biography)\",\n        },\n        {\n          value: \"withinRefOrSource\",\n          text: \"Within the ref or source (so it shows up in sources section)\",\n        },\n        {\n          value: \"citationInTableCaption\",\n          text: \"Instead include the citation ref in the household table caption (requires caption option)\",\n        },\n      ],\n      defaultValue: \"none\",\n    },\n    {\n      optionName: \"format\",\n      type: \"select\",\n      label: \"How to layout the household data\",\n      values: [\n        { value: \"table\", text: \"Table\" },\n        { value: \"list\", text: \"List\" },\n        { value: \"sentence\", text: \"Sentence\" },\n      ],\n      defaultValue: \"table\",\n    },\n  ],\n};\n\nconst tableTableOptionsGroup = {\n  category: \"table\",\n  subcategory: \"table\",\n  tab: \"table\",\n  subsection: \"general\",\n  subheading: \"table\",\n  options: [\n    {\n      optionName: \"heading\",\n      type: \"select\",\n      label: \"Heading row\",\n      values: [\n        { value: \"none\", text: \"No heading row\" },\n        { value: \"plain\", text: \"Heading row with no highlight\" },\n        {\n          value: \"bgGreen\",\n          text: \"Heading row with *heading* background color\",\n        },\n        { value: \"boldCentered\", text: \"Heading row with bold centered text\" },\n        {\n          value: \"bgGreenBoldCentered\",\n          text: \"Heading row with *heading* background color and bold centered text\",\n        },\n      ],\n      defaultValue: \"bgGreen\",\n    },\n    {\n      optionName: \"selectedPerson\",\n      type: \"select\",\n      label: \"Selected person row\",\n      values: [\n        { value: \"plain\", text: \"No highlight for selected person\" },\n        { value: \"boldRow\", text: \"Selected person row in bold text\" },\n        {\n          value: \"boldCenteredRow\",\n          text: \"Selected person row in bold centered text\",\n        },\n        { value: \"boldName\", text: \"Selected person name in bold text\" },\n        {\n          value: \"bgYellowRow\",\n          text: \"Selected person row with *selected* background color\",\n        },\n        {\n          value: \"bgYellowBoldRow\",\n          text: \"Selected person row with *selected* background color and bold text\",\n        },\n        {\n          value: \"bgYellowBoldCenteredRow\",\n          text: \"Selected person row with *selected* background color and bold centered text\",\n        },\n        {\n          value: \"bgYellowBoldName\",\n          text: \"Selected person row with *selected* background color and name in bold text\",\n        },\n      ],\n      defaultValue: \"boldRow\",\n    },\n    {\n      optionName: \"headingColor\",\n      type: \"color\",\n      label: \"Background color for heading row (if chosen above)\",\n      defaultValue: \"#E1F0B4\",\n    },\n    {\n      optionName: \"selectedColor\",\n      type: \"color\",\n      label: \"Background color for selected person row (if chosen above)\",\n      defaultValue: \"#ffffb3\",\n    },\n    {\n      optionName: \"closedColor\",\n      type: \"color\",\n      label: \"Background color for closed record row\",\n      defaultValue: \"#d0d0d0\",\n    },\n    {\n      optionName: \"border\",\n      type: \"checkbox\",\n      label: \"Include a border around the table\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"padding\",\n      type: \"checkbox\",\n      label: \"Include padding in the table cells\",\n      defaultValue: true,\n      unitTestValue: false,\n    },\n    {\n      optionName: \"caption\",\n      type: \"select\",\n      label: \"Add a caption above the table\",\n      values: [\n        { value: \"none\", text: \"No caption\" },\n        { value: \"titlePlace\", text: \"<collection title>: <full place>\" },\n        {\n          value: \"titlePlaceNoCountry\",\n          text: \"<collection title>: <full place without country>\",\n        },\n        { value: \"datePlace\", text: \"<date of event>: <full place>\" },\n        {\n          value: \"datePlaceNoCountry\",\n          text: \"<date of event>: <full place without country>\",\n        },\n      ],\n      defaultValue: \"none\",\n    },\n  ],\n};\n\nconst tableListOptionsGroup = {\n  category: \"table\",\n  subcategory: \"list\",\n  tab: \"table\",\n  subsection: \"general\",\n  subheading: \"list\",\n  options: [\n    {\n      optionName: \"type\",\n      type: \"select\",\n      label: \"Type of list\",\n      values: [\n        { value: \"bullet\", text: \"Bulleted list (*)\" },\n        { value: \"bullet2\", text: \"Bulleted inner list (**)\" },\n        { value: \"number\", text: \"Numbered list (#)\" },\n        { value: \"bulletNumber\", text: \"Numbered inner list (*#)\" },\n        { value: \"indented1\", text: \"Indented lines (:)\" },\n        { value: \"indented2\", text: \"Twice indented lines (::)\" },\n      ],\n      defaultValue: \"indented2\",\n    },\n  ],\n};\n\nconst tableSentenceOptionsGroup = {\n  category: \"table\",\n  subcategory: \"sentence\",\n  tab: \"table\",\n  subsection: \"general\",\n  subheading: \"sentence\",\n  options: [\n    {\n      optionName: \"preamble\",\n      type: \"select\",\n      label: \"Preamble\",\n      values: [\n        { value: \"none\", text: \"None\" },\n        { value: \"included\", text: \"The household included\" },\n        { value: \"consisted\", text: \"The household consisted of\" },\n        { value: \"enumerated\", text: \"The household was enumerated as\" },\n      ],\n      defaultValue: \"none\",\n    },\n    {\n      optionName: \"includeRelationship\",\n      type: \"checkbox\",\n      label: \"Include relationship for each person (if known)\",\n      defaultValue: true,\n      unitTestValue: true,\n    },\n    {\n      optionName: \"includeAge\",\n      type: \"checkbox\",\n      label: \"Include age for each person (if known)\",\n      defaultValue: true,\n      unitTestValue: true,\n    },\n    {\n      optionName: \"lastItemPunctuation\",\n      type: \"select\",\n      label: \"Last member punctuation\",\n      values: [\n        { value: \"comma\", text: \"', '\" },\n        { value: \"and\", text: \"' and '\" },\n        { value: \"commaAnd\", text: \"', and '\" },\n      ],\n      defaultValue: \"comma\",\n    },\n  ],\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n// Add/Merge options groups\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst addMergeGeneralOptionsGroup = {\n  category: \"addMerge\",\n  subcategory: \"general\",\n  tab: \"addMerge\",\n  subsection: \"general\",\n  options: [\n    {\n      optionName: \"splitForenames\",\n      type: \"select\",\n      label: \"Separate forenames into a first name and middle names\",\n      values: [\n        { value: \"never\", text: \"Never\" },\n        { value: \"always\", text: \"Always\" },\n        { value: \"countrySpecific\", text: \"Only for certain countries\" },\n      ],\n      defaultValue: \"countrySpecific\",\n    },\n  ],\n};\n\nconst addMergeAddPersonOptionsGroup = {\n  category: \"addMerge\",\n  subcategory: \"addPerson\",\n  tab: \"addMerge\",\n  subsection: \"addPerson\",\n  options: [\n    {\n      optionName: \"includeCitation\",\n      type: \"checkbox\",\n      label: \"Fill citation in appropriate field if filling from a citation\",\n      defaultValue: false,\n      unitTestValue: false,\n    },\n    {\n      optionName: \"includeProfileLink\",\n      type: \"checkbox\",\n      label: \"Add a link/template to the source profile in sources if filling from a profile\",\n      defaultValue: false,\n      unitTestValue: false,\n    },\n    {\n      optionName: \"generateIntro\",\n      type: \"select\",\n      label: \"Create an intro in the biography (Notes) field\",\n      values: [\n        { value: \"none\", text: \"No\" },\n        {\n          value: \"fromSavedData\",\n          text: \"Yes, with parent info based on the saved data only\",\n        },\n        {\n          value: \"fromPageData\",\n          text: \"Yes, with parent info based on the links on Edit Family page only\",\n        },\n        {\n          value: \"fromBoth\",\n          text: \"Yes, with parent info based on all available information\",\n        },\n      ],\n      defaultValue: \"none\",\n    },\n    {\n      optionName: \"includeLinks\",\n      type: \"checkbox\",\n      label: \"Include WikiTree person links in intro if available\",\n      defaultValue: false,\n      unitTestValue: false,\n    },\n    {\n      optionName: \"addDiedYoung\",\n      type: \"checkbox\",\n      label: \"Include Died Young sticker if person died aged 15 or less and no known spouse\",\n      defaultValue: false,\n      unitTestValue: false,\n    },\n  ],\n};\n\nconst addMergeMergeEditOptionsGroup = {\n  category: \"addMerge\",\n  subcategory: \"mergeEdit\",\n  tab: \"addMerge\",\n  subsection: \"mergeEdit\",\n  options: [\n    {\n      optionName: \"includeCitation\",\n      type: \"checkbox\",\n      label: \"Put citation text in biography if merging from a citation.\",\n      defaultValue: false,\n      unitTestValue: false,\n    },\n    {\n      optionName: \"includeProfileLink\",\n      type: \"checkbox\",\n      label: \"Add a link/template to the biography if merging from a profile\",\n      defaultValue: false,\n      unitTestValue: false,\n    },\n  ],\n};\n\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"search\", \"general\", \"General\");\n\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"citation\", \"general\", \"General\");\n\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"narrative\", \"general\", \"General\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"narrative\", \"baptism\", \"Baptism\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"narrative\", \"birth\", \"Birth\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"narrative\", \"birthOrBaptism\", \"Birth or Baptism\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"narrative\", \"birthReg\", \"Birth Registration\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubheadingForOptions)(\"narrative\", \"birthReg\", \"evt\", \"When date and place are for birth event\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubheadingForOptions)(\"narrative\", \"birthReg\", \"reg\", \"When date and place are for registration, not birth\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"narrative\", \"burial\", \"Burial\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"narrative\", \"census\", \"Census\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"narrative\", \"death\", \"Death\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"narrative\", \"deathReg\", \"Death Registration\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubheadingForOptions)(\"narrative\", \"deathReg\", \"evt\", \"When date and place are for death event\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubheadingForOptions)(\"narrative\", \"deathReg\", \"reg\", \"When date and place are for registration, not death\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"narrative\", \"marriage\", \"Marriage\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"narrative\", \"marriageReg\", \"Marriage Registration\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubheadingForOptions)(\"narrative\", \"marriageReg\", \"evt\", \"When date and place are for marriage event\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubheadingForOptions)(\n  \"narrative\",\n  \"marriageReg\",\n  \"reg\",\n  \"When date and place are for registration, not marriage\"\n);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"narrative\", \"obituary\", \"Obituary\");\n\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"table\", \"general\", \"General\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubheadingForOptions)(\"table\", \"general\", \"table\", \"When using a table\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubheadingForOptions)(\"table\", \"general\", \"list\", \"When using a list\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubheadingForOptions)(\"table\", \"general\", \"sentence\", \"When using a sentence\");\n\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"addMerge\", \"general\", \"General\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"addMerge\", \"addPerson\", \"Add Person\");\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"addMerge\", \"mergeEdit\", \"Merge/Edit\");\n\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(searchOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(citationOptionsGroup);\n\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(narrativeOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(narrativeBaptismOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(narrativeBirthOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(narrativeBirthOrBaptismOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(narrativeBirthRegOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(narrativeBirthRegEvtOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(narrativeBirthRegRegOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(narrativeBurialOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(narrativeCensusOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(narrativeDeathOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(narrativeDeathRegOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(narrativeDeathRegEvtOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(narrativeDeathRegRegOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(narrativeMarriageOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(narrativeMarriageRegOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(narrativeMarriageRegEvtOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(narrativeMarriageRegRegOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(narrativeObituaryOptionsGroup);\n\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(tableGeneralOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(tableTableOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(tableListOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(tableSentenceOptionsGroup);\n\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(addMergeGeneralOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(addMergeAddPersonOptionsGroup);\n(0,_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(addMergeMergeEditOptionsGroup);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/base/core/options/register_base_options.mjs\n");

/***/ }),

/***/ "./extension/base/core/record_collections.mjs":
/*!****************************************************!*\
  !*** ./extension/base/core/record_collections.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RC\": () => (/* binding */ RC)\n/* harmony export */ });\n/* harmony import */ var _country_data_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./country_data.mjs */ \"./extension/base/core/country_data.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\nconst houseTableColumnsUk1841 = [\"name\", \"gender\", \"age\", \"occupation\", \"birthPlace\"];\nconst houseTableColumnsUk1851to1911 = [\n  \"name\",\n  \"relationship\",\n  \"maritalStatus\",\n  \"gender\",\n  \"age\",\n  \"birthYear\",\n  \"occupation\",\n  \"birthPlace\",\n];\n\nconst householdTableColumnsUsFederal1850 = [\"name\", \"gender\", \"age\", \"occupation\", \"birthPlace\"];\nconst householdTableColumnsUsFederalPre1880 = [\"name\", \"gender\", \"age\", \"maritalStatus\", \"occupation\", \"birthPlace\"];\nconst householdTableColumnsUsFederalPost1880 = [\n  \"name\",\n  \"gender\",\n  \"age\",\n  \"maritalStatus\",\n  \"relationship\",\n  \"occupation\",\n  \"birthPlace\",\n];\n\nconst RecordCollectionData = [\n  // England & Wales BMD\n  {\n    wtsId: \"EnglandAndWalesBirthReg\",\n    title: \"England & Wales, Civil Registration Birth Index\",\n    country: \"England and Wales\",\n    isBirth: true,\n    sites: {\n      fs: {\n        id: \"2285338\",\n        dates: { from: 1837, to: 2008 },\n        searchTerms: { gender: false },\n      },\n      fmp: {\n        id: \"England & Wales Births 1837-2006\",\n        dates: { from: 1837, to: 2006 },\n        searchQueryFields: { volume: \"\", page: \"\" },\n      },\n      gro: { id: \"births\", dates: { from: 1837, to: 2019 } },\n      freebmd: { id: \"births\", dates: { from: 1837, to: 1992 } },\n    },\n  },\n  {\n    wtsId: \"EnglandAndWalesBirthRegEarly\",\n    partOf: [\"EnglandAndWalesBirthReg\"],\n    title: \"England & Wales, Civil Registration Birth Index 1837-1915\",\n    country: \"England and Wales\",\n    isDeath: true,\n    sites: {\n      ancestry: {\n        id: \"8912\",\n        altId: \"freebmdbirth\",\n        dates: { from: 1837, to: 1915 },\n      },\n    },\n  },\n  {\n    wtsId: \"EnglandAndWalesBirthRegLate\",\n    partOf: [\"EnglandAndWalesBirthReg\"],\n    title: \"England & Wales, Civil Registration Birth Index 1916-2007\",\n    country: \"England and Wales\",\n    isDeath: true,\n    sites: {\n      ancestry: { id: \"8782\", dates: { from: 1916, to: 2007 } },\n    },\n  },\n  {\n    wtsId: \"EnglandAndWalesMarriageReg\",\n    title: \"England & Wales, Civil Registration Marriage Index\",\n    country: \"England and Wales\",\n    isMarriage: true,\n    sites: {\n      fs: { id: \"2285732\", dates: { from: 1837, to: 2008 } },\n      fmp: {\n        id: \"England & Wales Marriages 1837-2005\",\n        dates: { from: 1837, to: 2005 },\n      },\n      freebmd: { id: \"marriages\", dates: { from: 1837, to: 1992 } },\n    },\n  },\n  {\n    wtsId: \"EnglandAndWalesMarriageRegEarly\",\n    partOf: [\"EnglandAndWalesMarriageReg\"],\n    title: \"England & Wales, Civil Registration Marriage Index 1837-1915\",\n    country: \"England and Wales\",\n    isDeath: true,\n    sites: {\n      ancestry: {\n        id: \"8913\",\n        altId: \"FreeBMDMarriage\",\n        dates: { from: 1837, to: 1915 },\n        searchQueryFields: { volume: \"f-F00056EC\", page: \"f-F0005906\" },\n      },\n    },\n  },\n  {\n    wtsId: \"EnglandAndWalesMarriageRegLate\",\n    partOf: [\"EnglandAndWalesMarriageReg\"],\n    title: \"England & Wales, Civil Registration Marriage Index 1916-2007\",\n    country: \"England and Wales\",\n    isDeath: true,\n    sites: {\n      ancestry: {\n        id: \"8753\",\n        altId: \"ONSmarriage1984\",\n        dates: { from: 1916, to: 2005 },\n      },\n    },\n  },\n  {\n    wtsId: \"EnglandAndWalesDeathReg\",\n    title: \"England & Wales, Civil Registration Death Index\",\n    country: \"England and Wales\",\n    isDeath: true,\n    sites: {\n      fs: { id: \"2285341\", dates: { from: 1837, to: 2008 } },\n      fmp: {\n        id: \"England & Wales Deaths 1837-2007\",\n        dates: { from: 1837, to: 2007 },\n        searchQueryFields: { volume: \"\", page: \"\" },\n      },\n      gro: { id: \"deaths\", dates: { from: 1837, to: 2019 } },\n      freebmd: { id: \"deaths\", dates: { from: 1837, to: 1992 } },\n    },\n  },\n  {\n    wtsId: \"EnglandAndWalesDeathRegEarly\",\n    partOf: [\"EnglandAndWalesDeathReg\"],\n    title: \"England & Wales, Civil Registration Death Index 1837-1915\",\n    country: \"England and Wales\",\n    isDeath: true,\n    sites: {\n      ancestry: {\n        id: \"8914\",\n        dates: { from: 1837, to: 1915 },\n        searchQueryFields: { volume: \"\", page: \"\" },\n      },\n    },\n  },\n  {\n    wtsId: \"EnglandAndWalesDeathRegLate\",\n    partOf: [\"EnglandAndWalesDeathReg\"],\n    title: \"England & Wales, Civil Registration Death Index 1916-2007\",\n    country: \"England and Wales\",\n    isDeath: true,\n    sites: {\n      ancestry: { id: \"7579\", dates: { from: 1916, to: 2007 } },\n    },\n  },\n\n  // England, Wales & Scotland Census\n  {\n    wtsId: \"EnglandWalesAndScotlandCensus1841\",\n    title: \"1841 Census of England, Wales & Scotland\",\n    country: \"United Kingdom\",\n    dates: { year: 1841, exactDate: \"6 Jun 1841\" },\n    householdTableColumns: houseTableColumnsUk1841,\n    sites: {\n      fmp: {\n        id: \"1841 England, Wales & Scotland Census\",\n        title: \"1841 England, Wales & Scotland Census\",\n      },\n      freecen: { id: \"1841\", title: \"1841 England, Scotland and Wales census\" },\n    },\n  },\n  {\n    wtsId: \"EnglandWalesAndScotlandCensus1851\",\n    title: \"1851 Census of England, Wales & Scotland\",\n    country: \"United Kingdom\",\n    dates: { year: 1851, exactDate: \"30 Mar 1851\" },\n    householdTableColumns: houseTableColumnsUk1851to1911,\n    sites: {\n      fmp: {\n        id: \"1851 England, Wales & Scotland Census\",\n        title: \"1851 England, Wales & Scotland Census\",\n      },\n      freecen: { id: \"1851\", title: \"1851 England, Scotland and Wales census\" },\n    },\n  },\n  {\n    wtsId: \"EnglandWalesAndScotlandCensus1861\",\n    title: \"1861 Census of England, Wales & Scotland\",\n    country: \"United Kingdom\",\n    dates: { year: 1861, exactDate: \"7 Apr 1861\" },\n    householdTableColumns: houseTableColumnsUk1851to1911,\n    sites: {\n      fmp: {\n        id: \"1861 England, Wales & Scotland Census\",\n        title: \"1861 England, Wales & Scotland Census\",\n      },\n      freecen: { id: \"1861\", title: \"1861 England, Scotland and Wales census\" },\n    },\n  },\n  {\n    wtsId: \"EnglandWalesAndScotlandCensus1871\",\n    title: \"1871 Census of England, Wales & Scotland\",\n    country: \"United Kingdom\",\n    dates: { year: 1871, exactDate: \"2 Apr 1871\" },\n    householdTableColumns: houseTableColumnsUk1851to1911,\n    sites: {\n      fmp: {\n        id: \"1871 England, Wales & Scotland Census\",\n        title: \"1871 England, Wales & Scotland Census\",\n      },\n      freecen: { id: \"1871\", title: \"1871 England, Scotland and Wales census\" },\n    },\n  },\n  {\n    wtsId: \"EnglandWalesAndScotlandCensus1881\",\n    title: \"1881 Census of England, Wales & Scotland\",\n    country: \"United Kingdom\",\n    dates: { year: 1881, exactDate: \"3 Apr 1881\" },\n    householdTableColumns: houseTableColumnsUk1851to1911,\n    sites: {\n      fmp: {\n        id: \"1881 England, Wales & Scotland Census\",\n        title: \"1881 England, Wales & Scotland Census\",\n      },\n      freecen: { id: \"1881\", title: \"1881 England, Scotland and Wales census\" },\n    },\n  },\n  {\n    wtsId: \"EnglandWalesAndScotlandCensus1891\",\n    title: \"1891 Census of England, Wales & Scotland\",\n    country: \"United Kingdom\",\n    dates: { year: 1891, exactDate: \"5 Apr 1891\" },\n    householdTableColumns: houseTableColumnsUk1851to1911,\n    sites: {\n      fmp: {\n        id: \"1891 England, Wales & Scotland Census\",\n        title: \"1891 England, Wales & Scotland Census\",\n      },\n      freecen: { id: \"1891\", title: \"1891 England, Scotland and Wales census\" },\n    },\n  },\n  {\n    wtsId: \"EnglandWalesAndScotlandCensus1901\",\n    title: \"1901 Census of England, Wales & Scotland\",\n    country: \"United Kingdom\",\n    dates: { year: 1901, exactDate: \"31 Mar 1901\" },\n    householdTableColumns: houseTableColumnsUk1851to1911,\n    sites: {\n      fmp: {\n        id: \"1901 England, Wales & Scotland Census\",\n        title: \"1901 England, Wales & Scotland Census\",\n      },\n      freecen: { id: \"1901\", title: \"1901 England, Scotland and Wales census\" },\n    },\n  },\n  {\n    wtsId: \"EnglandWalesAndScotlandCensus1911\",\n    title: \"1911 Census of England, Wales & Scotland\",\n    country: \"United Kingdom\",\n    dates: { year: 1911, exactDate: \"2 Apr 1911\" },\n    householdTableColumns: houseTableColumnsUk1851to1911,\n  },\n  // England & Wales Census\n  {\n    wtsId: \"EnglandAndWalesCensus1841\",\n    partOf: [\"EnglandWalesAndScotlandCensus1841\"],\n    title: \"1841 Census of England and Wales\",\n    country: \"England and Wales\",\n    dates: { year: 1841, exactDate: \"6 Jun 1841\" },\n    sites: {\n      fs: { id: \"1493745\", title: \"England and Wales Census, 1841\" },\n    },\n  },\n  {\n    wtsId: \"EnglandAndWalesCensus1851\",\n    partOf: [\"EnglandWalesAndScotlandCensus1851\"],\n    title: \"1851 Census of England and Wales\",\n    country: \"England and Wales\",\n    dates: { year: 1851, exactDate: \"30 Mar 1851\" },\n    sites: {\n      fs: { id: \"2563939\", title: \"England and Wales Census, 1851\" },\n    },\n  },\n  {\n    wtsId: \"EnglandAndWalesCensus1861\",\n    partOf: [\"EnglandWalesAndScotlandCensus1861\"],\n    title: \"1861 Census of England and Wales\",\n    country: \"England and Wales\",\n    dates: { year: 1861, exactDate: \"7 Apr 1861\" },\n    sites: {\n      fs: { id: \"1493747\", title: \"England and Wales Census, 1861\" },\n    },\n  },\n  {\n    wtsId: \"EnglandAndWalesCensus1871\",\n    partOf: [\"EnglandWalesAndScotlandCensus1871\"],\n    title: \"1871 Census of England and Wales\",\n    country: \"England and Wales\",\n    dates: { year: 1871, exactDate: \"2 Apr 1871\" },\n    sites: {\n      fs: { id: \"1538354\", title: \"England and Wales Census, 1871\" },\n    },\n  },\n  {\n    wtsId: \"EnglandAndWalesCensus1881\",\n    partOf: [\"EnglandWalesAndScotlandCensus1881\"],\n    title: \"1881 Census of England and Wales\",\n    country: \"England and Wales\",\n    dates: { year: 1881, exactDate: \"3 Apr 1881\" },\n    sites: {\n      fs: { id: \"2562194\", title: \"England and Wales Census, 1881\" },\n    },\n  },\n  {\n    wtsId: \"EnglandAndWalesCensus1891\",\n    partOf: [\"EnglandWalesAndScotlandCensus1891\"],\n    title: \"1891 Census of England and Wales\",\n    country: \"England and Wales\",\n    dates: { year: 1891, exactDate: \"5 Apr 1891\" },\n    sites: {\n      fs: { id: \"1865747\", title: \"England and Wales Census, 1891\" },\n    },\n  },\n  {\n    wtsId: \"EnglandAndWalesCensus1901\",\n    partOf: [\"EnglandWalesAndScotlandCensus1901\"],\n    title: \"1901 Census of England and Wales\",\n    country: \"England and Wales\",\n    dates: { year: 1901, exactDate: \"31 Mar 1901\" },\n    sites: {\n      fs: { id: \"1888129\", title: \"England and Wales Census, 1901\" },\n    },\n  },\n  {\n    wtsId: \"EnglandAndWalesCensus1911\",\n    partOf: [\"EnglandWalesAndScotlandCensus1911\"],\n    title: \"1911 Census of England and Wales\",\n    country: \"England and Wales\",\n    dates: { year: 1911, exactDate: \"2 Apr 1911\" },\n    householdTableColumns: houseTableColumnsUk1851to1911,\n    sites: {\n      fs: { id: \"1921547\", title: \"England and Wales Census, 1911\" },\n      fmp: {\n        id: \"1911 Census For England & Wales\",\n        title: \"1911 Census For England & Wales\",\n        searchQueryFields: { maritalStatus: \"condition\" },\n      },\n      freecen: { id: \"1911\", title: \"1911 England and Wales census\" },\n    },\n  },\n  {\n    wtsId: \"EnglandAndWalesCensus1921\",\n    title: \"1921 Census of England and Wales\",\n    country: \"England and Wales\",\n    dates: { year: 1921 },\n    householdTableColumns: [\n      \"name\",\n      \"relationship\",\n      \"gender\",\n      \"maritalStatus\",\n      \"age\",\n      \"birthYear\",\n      \"birthPlace\",\n      \"occupation\",\n      \"employer\",\n    ],\n    sites: {\n      fmp: {\n        id: \"1921 Census Of England & Wales\",\n        title: \"1921 Census Of England & Wales\",\n        searchQueryFields: {\n          maritalStatus: \"maritalstatus\",\n          occupation: \"occupationtext\",\n          birthPlace: \"whereborntext\",\n        },\n      },\n    },\n  },\n  // England Census\n  {\n    wtsId: \"EnglandCensus1841\",\n    partOf: [\"EnglandAndWalesCensus1841\"],\n    title: \"1841 Census of England\",\n    country: \"England\",\n    dates: { year: 1841, exactDate: \"6 Jun 1841\" },\n    sites: {\n      ancestry: {\n        id: \"8978\",\n        altId: \"uki1841\",\n        title: \"1841 England Census\",\n        searchQueryFields: {\n          piece: \"f-F0003039\",\n          folio: \"f-F000303A\",\n          page: \"f-F00032DB\",\n          book: \"f-F0002996\",\n          district: \"f-F000303D\",\n          subDistrict: \"f-F000303E\",\n        },\n      },\n    },\n  },\n  {\n    wtsId: \"EnglandCensus1851\",\n    partOf: [\"EnglandAndWalesCensus1851\"],\n    title: \"1851 Census of England\",\n    country: \"England\",\n    dates: { year: 1851, exactDate: \"30 Mar 1851\" },\n    sites: {\n      ancestry: {\n        id: \"8860\",\n        altId: \"uki1851\",\n        title: \"1851 England Census\",\n        searchQueryFields: {\n          piece: \"f-F0005C4F\",\n          folio: \"f-F0005E11\",\n          page: \"f-F0005906\",\n          schedule: \"f-F0006867\",\n          district: \"f-F0005DFD\",\n          subDistrict: \"f-F0006301\",\n          eccPar: \"f-F0005DFB\",\n          enumDistrict: \"f-F0005DFC\",\n        },\n      },\n    },\n  },\n  {\n    wtsId: \"EnglandCensus1861\",\n    partOf: [\"EnglandAndWalesCensus1861\"],\n    title: \"1861 Census of England\",\n    country: \"England\",\n    dates: { year: 1861, exactDate: \"7 Apr 1861\" },\n    sites: {\n      ancestry: {\n        id: \"8767\",\n        altId: \"uki1861\",\n        title: \"1861 England Census\",\n        searchQueryFields: {\n          piece: \"f-F0007B87\",\n          folio: \"f-F0007B88\",\n          page: \"f-F000597C\",\n        },\n      },\n    },\n  },\n  {\n    wtsId: \"EnglandCensus1871\",\n    partOf: [\"EnglandAndWalesCensus1871\"],\n    title: \"1871 Census of England\",\n    country: \"England\",\n    dates: { year: 1871, exactDate: \"2 Apr 1871\" },\n    sites: {\n      // tested and default piece, folio and page work\n      ancestry: { id: \"7619\", altId: \"uki1871\", title: \"1871 England Census\" },\n    },\n  },\n  {\n    wtsId: \"EnglandCensus1881\",\n    partOf: [\"EnglandAndWalesCensus1881\"],\n    title: \"1881 Census of England\",\n    country: \"England\",\n    dates: { year: 1881, exactDate: \"3 Apr 1881\" },\n    sites: {\n      ancestry: {\n        id: \"7572\",\n        altId: \"uki1881\",\n        title: \"1881 England Census\",\n        searchQueryFields: {\n          piece: \"f-F800686D\",\n          folio: \"f-F0005E11\",\n          page: \"f-F0005906\",\n          district: \"f-F000925D\",\n          subDistrict: \"f-F00079A7\",\n          enumDistrict: \"f-F0005DFC\",\n        },\n      },\n    },\n  },\n  {\n    wtsId: \"EnglandCensus1891\",\n    partOf: [\"EnglandAndWalesCensus1891\"],\n    title: \"1891 Census of England\",\n    country: \"England\",\n    dates: { year: 1891, exactDate: \"5 Apr 1891\" },\n    sites: {\n      ancestry: { id: \"6598\", altId: \"uki1891\", title: \"1891 England Census\" },\n    },\n  },\n  {\n    wtsId: \"EnglandCensus1901\",\n    partOf: [\"EnglandAndWalesCensus1901\"],\n    title: \"1901 Census of England\",\n    country: \"England\",\n    dates: { year: 1901, exactDate: \"31 Mar 1901\" },\n    sites: {\n      ancestry: {\n        id: \"7814\",\n        altId: \"uki1901\",\n        title: \"1901 England Census\",\n        searchQueryFields: {\n          piece: \"f-F0005C4F\",\n          folio: \"f-F0005E11\",\n          page: \"f-F0005906\",\n          schedule: \"f-F0006867\",\n          district: \"f-F0007AD6\",\n          subDistrict: \"f-F00079A7\",\n          enumDistrict: \"f-F0005DFC\",\n        },\n      },\n    },\n  },\n  {\n    wtsId: \"EnglandCensus1911\",\n    partOf: [\"EnglandAndWalesCensus1911\"],\n    title: \"1911 Census of England\",\n    country: \"England\",\n    dates: { year: 1911, exactDate: \"2 Apr 1911\" },\n    sites: {\n      ancestry: {\n        id: \"2352\",\n        altId: \"1911England\",\n        title: \"1911 England Census\",\n      },\n    },\n  },\n  // Wales Census\n  {\n    wtsId: \"WalesCensus1841\",\n    partOf: [\"EnglandAndWalesCensus1841\"],\n    title: \"1841 Census of Wales\",\n    country: \"Wales\",\n    dates: { year: 1841, exactDate: \"6 Jun 1841\" },\n    sites: {\n      ancestry: { id: \"8979\", altId: \"uki1841wales\" },\n    },\n  },\n  {\n    wtsId: \"WalesCensus1851\",\n    partOf: [\"EnglandAndWalesCensus1851\"],\n    title: \"1851 Census of Wales\",\n    country: \"Wales\",\n    dates: { year: 1851, exactDate: \"30 Mar 1851\" },\n    sites: {\n      ancestry: { id: \"8861\", altId: \"uki1851wales\" },\n    },\n  },\n  {\n    wtsId: \"WalesCensus1861\",\n    partOf: [\"EnglandAndWalesCensus1861\"],\n    title: \"1861 Census of Wales\",\n    country: \"Wales\",\n    dates: { year: 1861, exactDate: \"7 Apr 1861\" },\n    sites: {\n      ancestry: { id: \"8768\", altId: \"uki1861wales\" },\n    },\n  },\n  {\n    wtsId: \"WalesCensus1871\",\n    partOf: [\"EnglandAndWalesCensus1871\"],\n    title: \"1871 Census of Wales\",\n    country: \"Wales\",\n    dates: { year: 1871, exactDate: \"2 Apr 1871\" },\n    sites: {\n      ancestry: { id: \"7618\", altId: \"uki1871wales\" },\n    },\n  },\n  {\n    wtsId: \"WalesCensus1881\",\n    partOf: [\"EnglandAndWalesCensus1881\"],\n    title: \"1881 Census of Wales\",\n    country: \"Wales\",\n    dates: { year: 1881, exactDate: \"3 Apr 1881\" },\n    sites: {\n      ancestry: { id: \"8059\", altId: \"uki1881wales\" },\n    },\n  },\n  {\n    wtsId: \"WalesCensus1891\",\n    partOf: [\"EnglandAndWalesCensus1891\"],\n    title: \"1891 Census of Wales\",\n    country: \"Wales\",\n    dates: { year: 1891, exactDate: \"5 Apr 1891\" },\n    sites: {\n      ancestry: { id: \"6897\", altId: \"uki1891wales\" },\n    },\n  },\n  {\n    wtsId: \"WalesCensus1901\",\n    partOf: [\"EnglandAndWalesCensus1901\"],\n    title: \"1901 Census of Wales\",\n    country: \"Wales\",\n    dates: { year: 1901, exactDate: \"31 Mar 1901\" },\n    sites: {\n      ancestry: { id: \"7815\", altId: \"uki1901wales\" },\n    },\n  },\n  {\n    wtsId: \"WalesCensus1911\",\n    partOf: [\"EnglandAndWalesCensus1911\"],\n    title: \"1911 Census of Wales\",\n    country: \"Wales\",\n    dates: { year: 1911, exactDate: \"2 Apr 1911\" },\n    sites: {\n      ancestry: { id: \"2353\", altId: \"1911Wales\" },\n    },\n  },\n  // Scotland Census\n  {\n    wtsId: \"ScotlandCensus1841\",\n    partOf: [\"EnglandWalesAndScotlandCensus1841\"],\n    title: \"1841 Census of Scotland\",\n    country: \"Scotland\",\n    dates: { year: 1841, exactDate: \"6 Jun 1841\" },\n    sites: {\n      ancestry: {\n        id: \"1004\",\n        searchQueryFields: { district: \"\", registrationNumber: \"f-F0003968\" }, // no Page or ED supported\n      },\n      scotp: { id: \"census1841\" },\n    },\n  },\n  {\n    wtsId: \"ScotlandCensus1851\",\n    partOf: [\"EnglandWalesAndScotlandCensus1851\"],\n    title: \"1851 Census of Scotland\",\n    country: \"Scotland\",\n    dates: { year: 1851, exactDate: \"30 Mar 1851\" },\n    sites: {\n      ancestry: {\n        id: \"1076\",\n        searchQueryFields: {\n          district: \"\",\n          enumDistrict: \"f-F0005DFC\",\n          registrationNumber: \"f-F0007E02\",\n          page: \"f-F8007E01\",\n        },\n      },\n      scotp: { id: \"census1851\" },\n    },\n  },\n  {\n    wtsId: \"ScotlandCensus1861\",\n    partOf: [\"EnglandWalesAndScotlandCensus1861\"],\n    title: \"1861 Census of Scotland\",\n    country: \"Scotland\",\n    dates: { year: 1861, exactDate: \"7 Apr 1861\" },\n    sites: {\n      ancestry: {\n        id: \"1080\",\n        searchQueryFields: {\n          district: \"f-F0003B8A\",\n          enumDistrict: \"f-F00032ED\",\n          registrationNumber: \"f-F0003B89\",\n        },\n      },\n      scotp: { id: \"census1861\" },\n    },\n  },\n  {\n    wtsId: \"ScotlandCensus1871\",\n    partOf: [\"EnglandWalesAndScotlandCensus1871\"],\n    title: \"1871 Census of Scotland\",\n    country: \"Scotland\",\n    dates: { year: 1871, exactDate: \"2 Apr 1871\" },\n    sites: {\n      ancestry: {\n        id: \"1104\",\n        searchQueryFields: {\n          district: \"f-F0003B8A\",\n          enumDistrict: \"f-F00032ED\",\n          registrationNumber: \"f-F0003B89\",\n        },\n      },\n      scotp: { id: \"census1871\" },\n    },\n  },\n  {\n    wtsId: \"ScotlandCensus1881\",\n    partOf: [\"EnglandWalesAndScotlandCensus1881\"],\n    title: \"1881 Census of Scotland\",\n    country: \"Scotland\",\n    dates: { year: 1881, exactDate: \"3 Apr 1881\" },\n    sites: {\n      ancestry: {\n        id: \"1119\",\n        searchQueryFields: {\n          district: \"f-F0003B8A\",\n          enumDistrict: \"f-F00032ED\",\n          registrationNumber: \"f-F0003B89\",\n        },\n      },\n      scotp: { id: \"census1881\" },\n    },\n  },\n  {\n    wtsId: \"ScotlandCensus1891\",\n    partOf: [\"EnglandWalesAndScotlandCensus1891\"],\n    title: \"1891 Census of Scotland\",\n    country: \"Scotland\",\n    dates: { year: 1891, exactDate: \"5 Apr 1891\" },\n    sites: {\n      ancestry: {\n        id: \"1108\",\n        searchQueryFields: {\n          district: \"f-F0003B8A\",\n          enumDistrict: \"f-F00032ED\",\n          registrationNumber: \"f-F0003B89\",\n        },\n      },\n      scotp: { id: \"census1891\" },\n    },\n  },\n  {\n    wtsId: \"ScotlandCensus1901\",\n    partOf: [\"EnglandWalesAndScotlandCensus1901\"],\n    title: \"1901 Census of Scotland\",\n    country: \"Scotland\",\n    dates: { year: 1901, exactDate: \"31 Mar 1901\" },\n    sites: {\n      ancestry: {\n        id: \"1101\",\n        searchQueryFields: {\n          district: \"f-F0003B8A\",\n          enumDistrict: \"f-F00032ED\",\n          registrationNumber: \"f-F0003B89\",\n        },\n      },\n      scotp: { id: \"census1901\" },\n    },\n  },\n  {\n    wtsId: \"ScotlandCensus1911\",\n    partOf: [\"EnglandWalesAndScotlandCensus1911\"],\n    title: \"1901 Census of Scotland\",\n    country: \"Scotland\",\n    dates: { year: 1901, exactDate: \"31 Mar 1901\" },\n    sites: {\n      scotp: { id: \"census1911\" },\n    },\n  },\n  // 1939 Register\n  {\n    wtsId: \"EnglandAndWales1939Register\",\n    title: \"1939 England and Wales Register\",\n    country: \"England and Wales\",\n    dates: { year: 1939 },\n    householdTableColumns: [\"name\", \"maritalStatus\", \"gender\", \"birthDate\", \"occupation\"],\n    sites: {\n      ancestry: { id: \"61596\" },\n      fmp: {\n        id: \"1939 Register\",\n        searchQueryFields: { maritalStatus: \"maritalstatus\" },\n      },\n      fs: { id: \"2836130\", title: \"England and Wales National Register, 1939\" },\n    },\n  },\n  // England & Wales Probate\n  {\n    wtsId: \"EnglandAndWalesProbate\",\n    title: \"England & Wales, National Probate Calendar, 1858-1995\",\n    country: \"England and Wales\",\n    sites: {\n      ancestry: { id: \"1904\", dates: { from: 1858, to: 1995 } },\n    },\n  },\n  // British Phone Books\n  {\n    wtsId: \"BritishPhoneBooks\",\n    title: \"British Phone Books, 1880-1984\",\n    country: \"United Kingdom\",\n    sites: {\n      ancestry: { id: \"1025\", dates: { from: 1880, to: 1984 } },\n    },\n  },\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////\n  // US\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  // United States Federal Census\n  {\n    wtsId: \"UsCensus1790\",\n    title: \"1790 United States Federal Census\",\n    country: \"United States\",\n    dates: { year: 1790, exactDate: \"2 Aug 1790\" },\n    sites: {\n      fs: { id: \"1803959\" },\n      ancestry: { id: \"5058\" },\n      fmp: { id: \"US Census 1790\" },\n    },\n  },\n  {\n    wtsId: \"UsCensus1800\",\n    title: \"1800 United States Federal Census\",\n    country: \"United States\",\n    dates: { year: 1800, exactDate: \"4 Aug 1800\" },\n    sites: {\n      fs: { id: \"1804228\" },\n      ancestry: { id: \"7590\" },\n      fmp: { id: \"US Census 1800\" },\n    },\n  },\n  {\n    wtsId: \"UsCensus1810\",\n    title: \"1810 United States Federal Census\",\n    country: \"United States\",\n    dates: { year: 1810, exactDate: \"6 Aug 1810\" },\n    sites: {\n      fs: { id: \"1803765\" },\n      ancestry: { id: \"7613\" },\n      fmp: { id: \"US Census 1810\" },\n    },\n  },\n  {\n    wtsId: \"UsCensus1820\",\n    title: \"1820 United States Federal Census\",\n    country: \"United States\",\n    dates: { year: 1820, exactDate: \"7 Aug 1820\" },\n    sites: {\n      fs: { id: \"1803955\" },\n      ancestry: { id: \"7734\" },\n      fmp: { id: \"US Census 1820\" },\n    },\n  },\n  {\n    wtsId: \"UsCensus1830\",\n    title: \"1830 United States Federal Census\",\n    country: \"United States\",\n    dates: { year: 1830, exactDate: \"1 Jun 1830\" },\n    sites: {\n      fs: { id: \"1803958\" },\n      ancestry: { id: \"8058\" },\n      fmp: { id: \"US Census 1830\" },\n    },\n  },\n  {\n    wtsId: \"UsCensus1840\",\n    title: \"1840 United States Federal Census\",\n    country: \"United States\",\n    dates: { year: 1840, exactDate: \"1 Jun 1840\" },\n    sites: {\n      fs: { id: \"1786457\" },\n      ancestry: { id: \"8057\" },\n      fmp: { id: \"US Census 1840\" },\n    },\n  },\n  {\n    wtsId: \"UsCensus1850\",\n    title: \"1850 United States Federal Census\",\n    country: \"United States\",\n    dates: { year: 1850, exactDate: \"1 Jun 1850\" },\n    householdTableColumns: householdTableColumnsUsFederal1850,\n    sites: {\n      fs: { id: \"1401638\" },\n      ancestry: { id: \"8054\" },\n      fmp: { id: \"US Census 1850\" },\n    },\n  },\n  {\n    wtsId: \"UsCensus1860\",\n    title: \"1860 United States Federal Census\",\n    country: \"United States\",\n    dates: { year: 1860, exactDate: \"1 Jun 1860\" },\n    householdTableColumns: householdTableColumnsUsFederal1850,\n    sites: {\n      fs: { id: \"1473181\" },\n      ancestry: { id: \"7667\" },\n      fmp: { id: \"US Census 1860\" },\n    },\n  },\n  {\n    wtsId: \"UsCensus1870\",\n    title: \"1870 United States Federal Census\",\n    country: \"United States\",\n    dates: { year: 1870, exactDate: \"1 Jun 1870\" },\n    householdTableColumns: householdTableColumnsUsFederal1850,\n    sites: {\n      fs: { id: \"1438024\" },\n      ancestry: { id: \"7163\" },\n      fmp: { id: \"US Census 1870\" },\n    },\n  },\n  {\n    wtsId: \"UsCensus1880\",\n    title: \"1880 United States Federal Census\",\n    country: \"United States\",\n    dates: { year: 1880, exactDate: \"1 Jun 1880\" },\n    householdTableColumns: householdTableColumnsUsFederalPost1880,\n    sites: {\n      fs: { id: \"1417683\" },\n      ancestry: { id: \"6742\" },\n      fmp: { id: \"US Census 1880\" },\n    },\n  },\n  {\n    wtsId: \"UsCensus1890\",\n    title: \"1890 United States Federal Census\",\n    country: \"United States\",\n    dates: { year: 1890, exactDate: \"2 Jun 1890\" },\n    householdTableColumns: householdTableColumnsUsFederalPost1880,\n    sites: {\n      fs: { id: \"1610551\" },\n      ancestry: {\n        id: \"5445\",\n        title: \"1890 United States Federal Census Fragment\",\n      },\n      fmp: { id: \"US Census 1890\" },\n    },\n  },\n  {\n    wtsId: \"UsCensus1900\",\n    title: \"1900 United States Federal Census\",\n    country: \"United States\",\n    dates: { year: 1900, exactDate: \"1 Jun 1900\" },\n    householdTableColumns: householdTableColumnsUsFederalPost1880,\n    sites: {\n      fs: { id: \"1325221\" },\n      ancestry: { id: \"7602\" },\n      fmp: { id: \"US Census 1900\" },\n    },\n  },\n  {\n    wtsId: \"UsCensus1910\",\n    title: \"1910 United States Federal Census\",\n    country: \"United States\",\n    dates: { year: 1910, exactDate: \"15 Apr 1910\" },\n    householdTableColumns: householdTableColumnsUsFederalPost1880,\n    sites: {\n      fs: { id: \"1727033\" },\n      ancestry: { id: \"7884\" },\n      fmp: { id: \"US Census 1910\" },\n    },\n  },\n  {\n    wtsId: \"UsCensus1920\",\n    title: \"1920 United States Federal Census\",\n    country: \"United States\",\n    dates: { year: 1920, exactDate: \"1 Jan 1920\" },\n    householdTableColumns: householdTableColumnsUsFederalPost1880,\n    sites: {\n      fs: { id: \"1488411\" },\n      ancestry: { id: \"6061\" },\n      fmp: { id: \"US Census 1920\" },\n    },\n  },\n  {\n    wtsId: \"UsCensus1930\",\n    title: \"1930 United States Federal Census\",\n    country: \"United States\",\n    dates: { year: 1930, exactDate: \"2 Apr 1930\" },\n    householdTableColumns: householdTableColumnsUsFederalPost1880,\n    sites: {\n      fs: { id: \"1810731\" },\n      ancestry: { id: \"6224\" },\n      fmp: { id: \"US Census 1930\" },\n    },\n  },\n  {\n    wtsId: \"UsCensus1940\",\n    title: \"1940 United States Federal Census\",\n    country: \"United States\",\n    dates: { year: 1940, exactDate: \"1 Apr 1940\" },\n    householdTableColumns: householdTableColumnsUsFederalPost1880,\n    sites: {\n      fs: { id: \"2000219\" },\n      ancestry: { id: \"2442\" },\n      fmp: { id: \"US Census 1940\" },\n    },\n  },\n  {\n    wtsId: \"UsCensus1950\",\n    title: \"1950 United States Federal Census\",\n    country: \"United States\",\n    dates: { year: 1950, exactDate: \"1 Apr 1950\" },\n    householdTableColumns: householdTableColumnsUsFederalPost1880,\n    sites: {\n      ancestry: { id: \"62308\" },\n      fs: { id: \"4464515\" },\n      // fmp: { id: \"US Census 1950\"}, // Not yet transcribed on FMP (as of 31 Aug 2022)\n    },\n  },\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Canada\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  // Canada Census\n  {\n    wtsId: \"CanadaCensus1851\",\n    title: \"1851 Census of Canada\",\n    country: \"Canada\",\n    dates: { year: 1851 },\n    sites: {\n      fs: { id: \"1325192\" },\n      ancestry: { id: \"1061\", aldId: \"1851Canada\" },\n      fmp: { id: \"Canada Census 1851\" },\n    },\n  },\n  {\n    wtsId: \"CanadaCensus1861\",\n    title: \"1861 Census of Canada\",\n    country: \"Canada\",\n    dates: { year: 1861 },\n    sites: {\n      // fs: { id: \"2143998\"}, (seems to be per state)\n      ancestry: { id: \"1570\" },\n      fmp: { id: \"Canada Census 1861\" },\n    },\n  },\n  {\n    wtsId: \"CanadaCensus1871\",\n    title: \"1871 Census of Canada\",\n    country: \"Canada\",\n    dates: { year: 1871 },\n    sites: {\n      fs: { id: \"1551612\" },\n      ancestry: { id: \"1578\" },\n      fmp: { id: \"Canada Census 1871\" },\n    },\n  },\n  {\n    wtsId: \"CanadaCensus1881\",\n    title: \"1881 Census of Canada\",\n    country: \"Canada\",\n    dates: { year: 1881 },\n    sites: {\n      fs: { id: \"1804541\" },\n      ancestry: { id: \"1577\", altId: \"1881Canada\" },\n      fmp: { id: \"Canada Census 1881\" },\n    },\n  },\n  {\n    wtsId: \"CanadaCensus1891\",\n    title: \"1891 Census of Canada\",\n    country: \"Canada\",\n    dates: { year: 1891 },\n    sites: {\n      fs: { id: \"1583536\" },\n      ancestry: { id: \"1274\" },\n      fmp: { id: \"Canada Census 1891\" },\n    },\n  },\n  {\n    wtsId: \"CanadaCensus1901\",\n    title: \"1901 Census of Canada\",\n    country: \"Canada\",\n    dates: { year: 1901 },\n    householdTableColumns: [\n      \"name\",\n      \"gender\",\n      \"age\",\n      \"relationship\",\n      \"maritalStatus\",\n      \"birthDate\",\n      \"birthPlace\",\n      \"occupation\",\n    ],\n    sites: {\n      fs: { id: \"1584557\" },\n      ancestry: { id: \"8826\" },\n      fmp: {\n        id: \"Canada Census 1901\",\n        searchQueryFields: { maritalstatus: \"maritalstatus\" },\n      },\n    },\n  },\n  {\n    wtsId: \"CanadaCensus1911\",\n    title: \"1911 Census of Canada\",\n    country: \"Canada\",\n    dates: { year: 1911 },\n    householdTableColumns: [\n      \"name\",\n      \"gender\",\n      \"age\",\n      \"relationship\",\n      \"maritalStatus\",\n      \"birthDate\",\n      \"birthPlace\",\n      \"occupation\",\n    ],\n    sites: {\n      fs: { id: \"2143998\" },\n      ancestry: { id: \"8947\" },\n      fmp: { id: \"Canada Census 1911\" },\n    },\n  },\n  {\n    wtsId: \"CanadaCensus1921\",\n    title: \"1921 Census of Canada\",\n    country: \"Canada\",\n    dates: { year: 1921 },\n    householdTableColumns: [\"name\", \"gender\", \"age\", \"relationship\", \"maritalStatus\", \"birthPlace\", \"occupation\"],\n    sites: {\n      ancestry: { id: \"8991\" },\n    },\n  },\n  // Poland\n  {\n    wtsId: \"PolandBirthReg\",\n    title: \"Poland Registration Birth Index\",\n    country: \"Poland\",\n    isBirth: true,\n    sites: {\n      geneteka: { id: \"births\" },\n    },\n  },\n  {\n    wtsId: \"PolandDeathReg\",\n    title: \"Poland Registration Death Index\",\n    country: \"Poland\",\n    isDeath: true,\n    sites: {\n      geneteka: { id: \"deaths\" },\n    },\n  },\n  {\n    wtsId: \"PolandMarriageReg\",\n    title: \"Poland Registration Marriage Index\",\n    country: \"Poland\",\n    isMarriage: true,\n    sites: {\n      geneteka: { id: \"marriages\" },\n    },\n  },\n];\n\nconst RC = {\n  findCollection: function (siteName, collectionId) {\n    for (let collection of RecordCollectionData) {\n      if (collection.sites && collection.sites[siteName] && collection.sites[siteName].id == collectionId) {\n        return collection;\n      }\n    }\n  },\n  findCollectionByAltId: function (siteName, altCollectionId) {\n    for (let collection of RecordCollectionData) {\n      if (collection.sites && collection.sites[siteName] && collection.sites[siteName].altId == altCollectionId) {\n        return collection;\n      }\n    }\n  },\n  findCollectionByWtsId: function (collectionId) {\n    for (let collection of RecordCollectionData) {\n      if (collection.wtsId == collectionId) {\n        return collection;\n      }\n    }\n  },\n  getCollectionsThatThisCollectionIsPartOf: function (collection) {\n    let result = [];\n    if (collection.partOf) {\n      for (let owningCollectionWtsId of collection.partOf) {\n        let owningCollection = RC.findCollectionByWtsId(owningCollectionWtsId);\n        if (owningCollection) {\n          result.push(owningCollection);\n\n          let parentCollections = RC.getCollectionsThatThisCollectionIsPartOf(owningCollection);\n          for (let parentCollection of parentCollections) {\n            result.push(parentCollection);\n          }\n        } else {\n          console.log(\"Error: owningCollectionWtsId of '\" + owningCollectionWtsId + \"' was not found\");\n        }\n      }\n    }\n    return result;\n  },\n  getCollectionsThatArePartOfThisCollection: function (collection) {\n    let result = [];\n\n    function doesCollectionOwnCollection(parentCollection, childCollection) {\n      let parentWtsId = parentCollection.wtsId;\n      if (childCollection.partOf) {\n        for (let owningCollectionWtsId of childCollection.partOf) {\n          if (owningCollectionWtsId == parentWtsId) {\n            return true;\n          }\n          let owningCollection = RC.findCollectionByWtsId(owningCollectionWtsId);\n          if (doesCollectionOwnCollection(parentCollection, owningCollection)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    for (let otherCollection of RecordCollectionData) {\n      if (doesCollectionOwnCollection(collection, otherCollection)) {\n        result.push(otherCollection);\n      }\n    }\n    return result;\n  },\n  mapCollectionId: function (sourceSiteName, sourceCollectionId, targetSiteName, sourceCountry, eventYearString) {\n    let eventYear = parseInt(eventYearString);\n    if (isNaN(eventYear)) {\n      eventYear = undefined;\n    }\n\n    let sourceCollection = RC.findCollection(sourceSiteName, sourceCollectionId);\n    let targetCollectionId = RC.getSiteIdFromCollection(sourceCollection, targetSiteName);\n    if (!targetCollectionId && sourceCollection) {\n      // sometimes collections don't map exactly, the source collection could be part of a collection\n      let owningCollections = RC.getCollectionsThatThisCollectionIsPartOf(sourceCollection);\n      for (let owningCollection of owningCollections) {\n        let owningTargetCollectionId = RC.getSiteIdFromCollection(owningCollection, targetSiteName);\n        if (owningTargetCollectionId) {\n          return owningTargetCollectionId;\n        }\n      }\n      // or other collections could be part of the source collection\n      let bestMatchCollection = undefined;\n      let ownedCollections = RC.getCollectionsThatArePartOfThisCollection(sourceCollection);\n      for (let ownedCollection of ownedCollections) {\n        // Note there could be several collections that are part of this collection\n        // we should use country as a guide\n        let ownedTargetCollectionId = RC.getSiteIdFromCollection(ownedCollection, targetSiteName);\n        if (ownedTargetCollectionId) {\n          if (eventYear && ownedCollection.sites) {\n            let siteCollection = ownedCollection.sites[targetSiteName];\n            let collDates = RC.getCollectionDates(ownedCollection, siteCollection);\n\n            let isYearInRange = false;\n            if (collDates.from && collDates.to) {\n              if (eventYear >= collDates.from && eventYear <= collDates.to) {\n                isYearInRange = true;\n              }\n            } else if (collDates.year && collDates.year == eventYear) {\n              isYearInRange = true;\n            }\n\n            let isCountryOK = false;\n            if (sourceCountry) {\n              if (ownedCollection.country == sourceCountry) {\n                isCountryOK = true;\n              } else if (_country_data_mjs__WEBPACK_IMPORTED_MODULE_0__.CD.isPartOf(sourceCountry, ownedCollection.country)) {\n                isCountryOK = true;\n              } else if (_country_data_mjs__WEBPACK_IMPORTED_MODULE_0__.CD.isPartOf(ownedCollection.country, sourceCountry)) {\n                isCountryOK = true;\n              }\n            } else {\n              isCountryOK = true;\n            }\n\n            if (isYearInRange && isCountryOK) {\n              return ownedTargetCollectionId;\n            }\n          } else if (ownedCollection.country == sourceCountry) {\n            return ownedTargetCollectionId;\n          }\n\n          if (!bestMatchCollection) {\n            bestMatchCollection = ownedCollection;\n          }\n        }\n      }\n      if (bestMatchCollection) {\n        let bestMatchCollectionId = RC.getSiteIdFromCollection(bestMatchCollection, targetSiteName);\n        targetCollectionId = bestMatchCollectionId;\n      }\n    }\n    return targetCollectionId;\n  },\n  getSiteIdFromCollection: function (collection, site) {\n    if (collection && collection.sites && collection.sites[site]) {\n      return collection.sites[site].id;\n    }\n  },\n  getCountryFromCollection: function (collection) {\n    if (collection) {\n      return collection.country;\n    }\n  },\n  getCollectionDates: function (collection, siteCollection) {\n    let collDates = siteCollection.dates;\n    if (!collDates) {\n      collDates = collection.dates;\n      if (!collDates) {\n        //console.log(\"return false, no dates\");\n        return false;\n      }\n    } else if (collection.dates) {\n      // there is a dates field in both this sites collection data and in the whole collection\n      // we should combine them using the site one as priority\n      for (const [key, value] of Object.entries(collection.dates)) {\n        if (!collDates[key]) {\n          collDates[key] = value;\n        }\n      }\n    }\n\n    return collDates;\n  },\n  areSourceDatesInCollectionRange: function (sourceDates, collection, siteCollection) {\n    let lifeSpan = 120;\n    if (sourceDates.maxLifespan) {\n      lifeSpan = sourceDates.maxLifespan;\n    }\n\n    //console.log(\"areSourceDatesInCollectionRange, sourceDates and collection:\")\n    //console.log(sourceDates);\n    //console.log(collection);\n\n    let collDates = RC.getCollectionDates(collection, siteCollection);\n\n    let isBirthCollection = collection.isBirth;\n    let isDeathCollection = collection.isDeath;\n\n    let birthYear = parseInt(sourceDates.birthYear);\n    let deathYear = parseInt(sourceDates.deathYear);\n    let eventYear = parseInt(sourceDates.eventYear);\n\n    let minSourceYear = birthYear;\n    if (!minSourceYear) {\n      if (deathYear) {\n        minSourceYear = deathYear - lifeSpan;\n      } else {\n        minSourceYear = eventYear - lifeSpan;\n      }\n    }\n\n    let maxSourceYear = deathYear;\n    if (!maxSourceYear) {\n      if (birthYear) {\n        maxSourceYear = birthYear + lifeSpan;\n      } else {\n        maxSourceYear = eventYear + lifeSpan;\n      }\n    }\n\n    if (isBirthCollection && birthYear) {\n      // must have from and to years\n      let fromYear = collDates.from;\n      let toYear = collDates.to;\n      let isInRange = birthYear + 1 >= fromYear && birthYear <= toYear;\n      //console.log(\"return (a) : \" + isInRange);\n      return isInRange;\n    }\n\n    if (isDeathCollection && deathYear) {\n      // must have from and to years\n      let fromYear = collDates.from;\n      let toYear = collDates.to;\n      let isInRange = deathYear + 1 >= fromYear && deathYear <= toYear;\n      //console.log(\"return (b) : \" + isInRange);\n      return isInRange;\n    }\n\n    if (collDates.year) {\n      let collYear = collDates.year;\n      let isInRange = collYear + 2 >= minSourceYear && collYear - 2 <= maxSourceYear;\n      //console.log(\"return (c) : \" + isInRange);\n      return isInRange;\n    } else {\n      // must have from and to years\n      let fromYear = collDates.from;\n      let toYear = collDates.to;\n      let isInRange = maxSourceYear >= fromYear && minSourceYear <= toYear;\n      //console.log(\"return (d) : \" + isInRange);\n      return isInRange;\n    }\n\n    return false;\n  },\n  areAnyCountriesInCollectionRange: function (countryArray, collection) {\n    if (!countryArray) {\n      //console.log(\"areAnyCountriesInCollectionRange, no countries\")\n      return false;\n    }\n\n    //console.log(\"areAnyCountriesInCollectionRange, countryArray and collection:\")\n    //console.log(countryArray);\n    //console.log(collection);\n\n    let collCountry = collection.country;\n\n    for (let country of countryArray) {\n      if (country == collCountry || _country_data_mjs__WEBPACK_IMPORTED_MODULE_0__.CD.isPartOf(country, collCountry) || _country_data_mjs__WEBPACK_IMPORTED_MODULE_0__.CD.isPartOf(collCountry, country)) {\n        //console.log(\"return true, country = \" + country);\n        return true;\n      }\n      //console.log(\"country: \" + country + \" is not equivalent to: \" + collCountry);\n    }\n    //console.log(\"return false\");\n    return false;\n  },\n  findCollectionsForSiteWithinDateRangeAndCountries: function (siteName, dates, countryArray) {\n    let collectionArray = [];\n    for (let collection of RecordCollectionData) {\n      if (collection.sites) {\n        let siteCollection = collection.sites[siteName];\n        if (siteCollection) {\n          if (RC.areSourceDatesInCollectionRange(dates, collection, siteCollection)) {\n            if (\n              !countryArray ||\n              countryArray.length == 0 ||\n              RC.areAnyCountriesInCollectionRange(countryArray, collection)\n            ) {\n              collectionArray.push(collection);\n            }\n          }\n        }\n      }\n    }\n    return collectionArray;\n  },\n  getFieldFromCollectionOrOwningCollections: function (collection, fieldName) {\n    if (collection[fieldName] != undefined) {\n      return collection[fieldName];\n    }\n\n    if (collection.partOf && collection.partOf.length > 0) {\n      for (let owningCollectionWtsId of collection.partOf) {\n        let owningCollection = RC.findCollectionByWtsId(owningCollectionWtsId);\n        let fieldValue = RC.getFieldFromCollectionOrOwningCollections(owningCollection, fieldName);\n        if (fieldValue != undefined) {\n          return fieldValue;\n        }\n      }\n    }\n\n    return undefined;\n  },\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/base/core/record_collections.mjs\n");

/***/ }),

/***/ "./extension/base/core/record_type.mjs":
/*!*********************************************!*\
  !*** ./extension/base/core/record_type.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RT\": () => (/* binding */ RT),\n/* harmony export */   \"RecordSubtype\": () => (/* binding */ RecordSubtype),\n/* harmony export */   \"Role\": () => (/* binding */ Role)\n/* harmony export */ });\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n// NOTE: If a new record type is added the rtToRefTitle object in popup_menu_building should also be updated\n// Also getRefTitle in generalize_data_utils\nconst RT = {\n  Unclassified: `Unclassified`,\n  BirthRegistration: `BirthRegistration`,\n  Birth: `Birth`, // not a birth registration or a baptism (could be Quaker record for example)\n  MarriageRegistration: `MarriageRegistration`,\n  DeathRegistration: `DeathRegistration`,\n  Death: `Death`,\n  Baptism: `Baptism`,\n  Marriage: `Marriage`,\n  Burial: `Burial`,\n  Cremation: `Cremation`,\n  BirthOrBaptism: `BirthOrBaptism`,\n  DeathOrBurial: `DeathOrBurial`,\n  Census: `Census`,\n  NonpopulationCensus: `NonpopulationCensus`,\n  ElectoralRegister: `ElectoralRegister`,\n  Probate: `Probate`,\n  Will: `Will`,\n  Divorce: `Divorce`,\n  Memorial: `Memorial`,\n\n  CriminalRegister: `CriminalRegister`,\n  FreemasonMembership: `FreemasonMembership`,\n  Directory: `Directory`,\n  Employment: `Employment`,\n  WorkhouseRecord: `WorkhouseRecord`,\n  CrewList: `CrewList`,\n  PassengerList: `PassengerList`,\n  ConvictTransportation: `ConvictTransportation`,\n  Military: `Military`,\n  MedicalPatient: `MedicalPatient`,\n  QuarterSession: `QuarterSession`,\n  LandTax: `LandTax`,\n  Tax: `Tax`,\n  ValuationRoll: `ValuationRoll`,\n  Apprenticeship: `Apprenticeship`,\n  Certificate: `Certificate`,\n  SocialSecurity: `SocialSecurity`,\n  SchoolRecords: `SchoolRecords`,\n  Residence: `Residence`,\n  Obituary: `Obituary`,\n  Immigration: `Immigration`,\n  Emigration: `Emigration`,\n  Naturalization: `Naturalization`,\n  Pension: `Pension`,\n  PassportApplication: `PassportApplication`,\n  Newspaper: `Newspaper`,\n  LegalRecord: `LegalRecord`,\n  RateBook: `RateBook`,\n  FamHistOrPedigree: `FamHistOrPedigree`,\n  OtherChurchEvent: `OtherChurchEvent`, // other than baptism, marriage, burial etc. e.g. Confirmation, Seat Rents\n  Heraldry: `Heraldry`,\n};\n\nconst RecordSubtype = {\n  Banns: `Banns`,\n  MarriageOrBanns: `MarriageOrBanns`,\n};\n\nconst Role = {\n  Primary: `Primary`,\n  Parent: `Parent`,\n  Child: `Child`,\n  Sibling: `Sibling`,\n  Spouse: `Spouse`,\n  Witness: `Witness`,\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb24vYmFzZS9jb3JlL3JlY29yZF90eXBlLm1qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVtQyIsInNvdXJjZXMiOlsid2VicGFjazovL0NpdGF0aW9uRXh0cmFjdG9yLy4vZXh0ZW5zaW9uL2Jhc2UvY29yZS9yZWNvcmRfdHlwZS5tanM/N2M3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIFJvYmVydCBNIFBhdmV5XG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbi8vIE5PVEU6IElmIGEgbmV3IHJlY29yZCB0eXBlIGlzIGFkZGVkIHRoZSBydFRvUmVmVGl0bGUgb2JqZWN0IGluIHBvcHVwX21lbnVfYnVpbGRpbmcgc2hvdWxkIGFsc28gYmUgdXBkYXRlZFxuLy8gQWxzbyBnZXRSZWZUaXRsZSBpbiBnZW5lcmFsaXplX2RhdGFfdXRpbHNcbmNvbnN0IFJUID0ge1xuICBVbmNsYXNzaWZpZWQ6IGBVbmNsYXNzaWZpZWRgLFxuICBCaXJ0aFJlZ2lzdHJhdGlvbjogYEJpcnRoUmVnaXN0cmF0aW9uYCxcbiAgQmlydGg6IGBCaXJ0aGAsIC8vIG5vdCBhIGJpcnRoIHJlZ2lzdHJhdGlvbiBvciBhIGJhcHRpc20gKGNvdWxkIGJlIFF1YWtlciByZWNvcmQgZm9yIGV4YW1wbGUpXG4gIE1hcnJpYWdlUmVnaXN0cmF0aW9uOiBgTWFycmlhZ2VSZWdpc3RyYXRpb25gLFxuICBEZWF0aFJlZ2lzdHJhdGlvbjogYERlYXRoUmVnaXN0cmF0aW9uYCxcbiAgRGVhdGg6IGBEZWF0aGAsXG4gIEJhcHRpc206IGBCYXB0aXNtYCxcbiAgTWFycmlhZ2U6IGBNYXJyaWFnZWAsXG4gIEJ1cmlhbDogYEJ1cmlhbGAsXG4gIENyZW1hdGlvbjogYENyZW1hdGlvbmAsXG4gIEJpcnRoT3JCYXB0aXNtOiBgQmlydGhPckJhcHRpc21gLFxuICBEZWF0aE9yQnVyaWFsOiBgRGVhdGhPckJ1cmlhbGAsXG4gIENlbnN1czogYENlbnN1c2AsXG4gIE5vbnBvcHVsYXRpb25DZW5zdXM6IGBOb25wb3B1bGF0aW9uQ2Vuc3VzYCxcbiAgRWxlY3RvcmFsUmVnaXN0ZXI6IGBFbGVjdG9yYWxSZWdpc3RlcmAsXG4gIFByb2JhdGU6IGBQcm9iYXRlYCxcbiAgV2lsbDogYFdpbGxgLFxuICBEaXZvcmNlOiBgRGl2b3JjZWAsXG4gIE1lbW9yaWFsOiBgTWVtb3JpYWxgLFxuXG4gIENyaW1pbmFsUmVnaXN0ZXI6IGBDcmltaW5hbFJlZ2lzdGVyYCxcbiAgRnJlZW1hc29uTWVtYmVyc2hpcDogYEZyZWVtYXNvbk1lbWJlcnNoaXBgLFxuICBEaXJlY3Rvcnk6IGBEaXJlY3RvcnlgLFxuICBFbXBsb3ltZW50OiBgRW1wbG95bWVudGAsXG4gIFdvcmtob3VzZVJlY29yZDogYFdvcmtob3VzZVJlY29yZGAsXG4gIENyZXdMaXN0OiBgQ3Jld0xpc3RgLFxuICBQYXNzZW5nZXJMaXN0OiBgUGFzc2VuZ2VyTGlzdGAsXG4gIENvbnZpY3RUcmFuc3BvcnRhdGlvbjogYENvbnZpY3RUcmFuc3BvcnRhdGlvbmAsXG4gIE1pbGl0YXJ5OiBgTWlsaXRhcnlgLFxuICBNZWRpY2FsUGF0aWVudDogYE1lZGljYWxQYXRpZW50YCxcbiAgUXVhcnRlclNlc3Npb246IGBRdWFydGVyU2Vzc2lvbmAsXG4gIExhbmRUYXg6IGBMYW5kVGF4YCxcbiAgVGF4OiBgVGF4YCxcbiAgVmFsdWF0aW9uUm9sbDogYFZhbHVhdGlvblJvbGxgLFxuICBBcHByZW50aWNlc2hpcDogYEFwcHJlbnRpY2VzaGlwYCxcbiAgQ2VydGlmaWNhdGU6IGBDZXJ0aWZpY2F0ZWAsXG4gIFNvY2lhbFNlY3VyaXR5OiBgU29jaWFsU2VjdXJpdHlgLFxuICBTY2hvb2xSZWNvcmRzOiBgU2Nob29sUmVjb3Jkc2AsXG4gIFJlc2lkZW5jZTogYFJlc2lkZW5jZWAsXG4gIE9iaXR1YXJ5OiBgT2JpdHVhcnlgLFxuICBJbW1pZ3JhdGlvbjogYEltbWlncmF0aW9uYCxcbiAgRW1pZ3JhdGlvbjogYEVtaWdyYXRpb25gLFxuICBOYXR1cmFsaXphdGlvbjogYE5hdHVyYWxpemF0aW9uYCxcbiAgUGVuc2lvbjogYFBlbnNpb25gLFxuICBQYXNzcG9ydEFwcGxpY2F0aW9uOiBgUGFzc3BvcnRBcHBsaWNhdGlvbmAsXG4gIE5ld3NwYXBlcjogYE5ld3NwYXBlcmAsXG4gIExlZ2FsUmVjb3JkOiBgTGVnYWxSZWNvcmRgLFxuICBSYXRlQm9vazogYFJhdGVCb29rYCxcbiAgRmFtSGlzdE9yUGVkaWdyZWU6IGBGYW1IaXN0T3JQZWRpZ3JlZWAsXG4gIE90aGVyQ2h1cmNoRXZlbnQ6IGBPdGhlckNodXJjaEV2ZW50YCwgLy8gb3RoZXIgdGhhbiBiYXB0aXNtLCBtYXJyaWFnZSwgYnVyaWFsIGV0Yy4gZS5nLiBDb25maXJtYXRpb24sIFNlYXQgUmVudHNcbiAgSGVyYWxkcnk6IGBIZXJhbGRyeWAsXG59O1xuXG5jb25zdCBSZWNvcmRTdWJ0eXBlID0ge1xuICBCYW5uczogYEJhbm5zYCxcbiAgTWFycmlhZ2VPckJhbm5zOiBgTWFycmlhZ2VPckJhbm5zYCxcbn07XG5cbmNvbnN0IFJvbGUgPSB7XG4gIFByaW1hcnk6IGBQcmltYXJ5YCxcbiAgUGFyZW50OiBgUGFyZW50YCxcbiAgQ2hpbGQ6IGBDaGlsZGAsXG4gIFNpYmxpbmc6IGBTaWJsaW5nYCxcbiAgU3BvdXNlOiBgU3BvdXNlYCxcbiAgV2l0bmVzczogYFdpdG5lc3NgLFxufTtcblxuZXhwb3J0IHsgUlQsIFJlY29yZFN1YnR5cGUsIFJvbGUgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./extension/base/core/record_type.mjs\n");

/***/ }),

/***/ "./extension/base/core/wts_date.mjs":
/*!******************************************!*\
  !*** ./extension/base/core/wts_date.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WTS_Date\": () => (/* binding */ WTS_Date)\n/* harmony export */ });\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\nconst threeLetterMonths = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\nconst fullMonths = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nconst WTS_Date = {\n  monthStringToMonthNum: function (string) {\n    if (!string || string.length < 1) {\n      return 0;\n    }\n\n    let months = fullMonths;\n    if (string.length == 3) {\n      months = threeLetterMonths;\n    }\n\n    let lcString = string.toLowerCase();\n    for (let monthIndex = 0; monthIndex < threeLetterMonths.length; monthIndex++) {\n      if (lcString == months[monthIndex].toLowerCase()) {\n        return monthIndex + 1;\n      }\n    }\n\n    return 0;\n  },\n\n  // This returns a parsed data object\n  parseDateString: function (string) {\n    let result = {\n      inputString: string,\n      dayNum: 0,\n      monthNum: 0,\n      yearNum: 0,\n      hasDay: false,\n      hasMonth: false,\n      isValid: false,\n    };\n\n    if (!string || string.length == 0) {\n      return result;\n    }\n\n    if (typeof string !== \"string\") {\n      return result;\n    }\n\n    // clean and trim the date string, this has usually been done already but being defensive\n    let cleanString = string.replace(/\\s+/g, \" \").trim();\n    if (cleanString.length == 0) {\n      return result;\n    }\n\n    result.cleanString = cleanString;\n\n    if (string.length <= 4) {\n      // it can only be a year\n      let nonDigitIndex = cleanString.search(/[^0-9]/);\n      if (nonDigitIndex == -1 && cleanString.length == 4) {\n        let yearNum = parseInt(cleanString);\n        if (!isNaN(yearNum)) {\n          result.isValid = true;\n          result.yearNum = yearNum;\n        }\n      }\n\n      return result;\n    }\n\n    // check for a year range\n    if (/^\\d\\d\\d\\d\\-\\d\\d\\d\\d$/.test(cleanString) || /^\\d\\d\\d\\d\\-\\d\\d$/.test(cleanString)) {\n      // it is a year range,\n      let startYearString = cleanString.substring(0, 4);\n      let endYearString = cleanString.substring(5);\n      if (endYearString.length == 2) {\n        endYearString = startYearString.substring(0, 2) + endYearString;\n      }\n\n      let startYearNum = parseInt(startYearString);\n      let endYearNum = parseInt(endYearString);\n      if (isNaN(startYearNum) || isNaN(endYearNum)) {\n        return result;\n      }\n\n      result.isRange = true;\n      result.isValid = true;\n      result.startYearNum = startYearNum;\n      result.endYearNum = endYearNum;\n      result.yearNum = startYearNum;\n      return result;\n    }\n\n    // it is longer than 4 digits. The most common formats would be:\n    // dd mmm yyyy\n    // mmm yyyy\n    if (/^\\d\\d? [a-zA-Z][a-zA-Z][a-zA-Z] \\d\\d\\d\\d$/.test(cleanString)) {\n      let firstSpaceIndex = cleanString.indexOf(\" \");\n      let lastSpaceIndex = cleanString.lastIndexOf(\" \");\n      let dayString = cleanString.substring(0, firstSpaceIndex);\n      let monthString = cleanString.substring(firstSpaceIndex + 1, lastSpaceIndex);\n      let yearString = cleanString.substring(lastSpaceIndex + 1);\n      let dayNum = parseInt(dayString);\n      if (isNaN(dayNum) || !dayNum) {\n        return result;\n      }\n      let yearNum = parseInt(yearString);\n      if (isNaN(yearNum) || !yearNum) {\n        return result;\n      }\n      let monthNum = WTS_Date.monthStringToMonthNum(monthString);\n      if (monthNum == 0) {\n        return result;\n      }\n      result.dayNum = dayNum;\n      result.monthNum = monthNum;\n      result.yearNum = yearNum;\n      result.hasDay = true;\n      result.hasMonth = true;\n      result.isValid = true;\n      return result;\n    } else if (/^[a-zA-Z][a-zA-Z][a-zA-Z] \\d\\d\\d\\d$/.test(cleanString)) {\n      let firstSpaceIndex = cleanString.indexOf(\" \");\n      let monthString = cleanString.substring(0, firstSpaceIndex);\n      let yearString = cleanString.substring(firstSpaceIndex + 1);\n      let yearNum = parseInt(yearString);\n      if (isNaN(yearNum) || !yearNum) {\n        return result;\n      }\n      let monthNum = WTS_Date.monthStringToMonthNum(monthString);\n      if (monthNum == 0) {\n        return result;\n      }\n      result.monthNum = monthNum;\n      result.yearNum = yearNum;\n      result.hasMonth = true;\n      result.isValid = true;\n      return result;\n    }\n\n    // Did not match the common formats, try less common ones\n    if (/^\\d\\d? [a-zA-Z]+ \\d\\d\\d\\d$/.test(cleanString)) {\n      let firstSpaceIndex = cleanString.indexOf(\" \");\n      let lastSpaceIndex = cleanString.lastIndexOf(\" \");\n      let dayString = cleanString.substring(0, firstSpaceIndex);\n      let monthString = cleanString.substring(firstSpaceIndex + 1, lastSpaceIndex);\n      let yearString = cleanString.substring(lastSpaceIndex + 1);\n      let dayNum = parseInt(dayString);\n      if (isNaN(dayNum) || !dayNum) {\n        return result;\n      }\n      let yearNum = parseInt(yearString);\n      if (isNaN(yearNum) || !yearNum) {\n        return result;\n      }\n      let monthNum = WTS_Date.monthStringToMonthNum(monthString);\n      if (monthNum == 0) {\n        return result;\n      }\n      result.dayNum = dayNum;\n      result.monthNum = monthNum;\n      result.yearNum = yearNum;\n      result.hasDay = true;\n      result.hasMonth = true;\n      result.isValid = true;\n      return result;\n    }\n\n    // Not sure the format June 12, 1960 is ever used. WikiTree docs say it can be\n    if (/^[a-zA-Z]+ \\d\\d?\\, \\d\\d\\d\\d$/.test(cleanString)) {\n      let firstSpaceIndex = cleanString.indexOf(\" \");\n      let lastSpaceIndex = cleanString.lastIndexOf(\" \");\n      let commaIndex = cleanString.indexOf(\",\");\n      let monthString = cleanString.substring(0, firstSpaceIndex);\n      let dayString = cleanString.substring(firstSpaceIndex + 1, commaIndex);\n      let yearString = cleanString.substring(lastSpaceIndex + 1);\n      let dayNum = parseInt(dayString);\n      if (isNaN(dayNum) || !dayNum) {\n        return result;\n      }\n      let yearNum = parseInt(yearString);\n      if (isNaN(yearNum) || !yearNum) {\n        return result;\n      }\n      let monthNum = WTS_Date.monthStringToMonthNum(monthString);\n      if (monthNum == 0) {\n        return result;\n      }\n      result.dayNum = dayNum;\n      result.monthNum = monthNum;\n      result.yearNum = yearNum;\n      result.hasDay = true;\n      result.hasMonth = true;\n      result.isValid = true;\n      return result;\n    }\n\n    // Sometimes we can get a date like: 27Aug1849\n    // e.g.: https://www.familysearch.org/ark:/61903/1:1:27CB-J49\n    if (/^\\d\\d?[a-zA-Z]+\\d\\d\\d\\d$/.test(cleanString)) {\n      let firstLetterIndex = cleanString.search(/[a-zA-Z]/);\n      if (firstLetterIndex == -1) {\n        return result;\n      }\n      let dayString = cleanString.substring(0, firstLetterIndex);\n      let remainder = cleanString.substring(firstLetterIndex);\n\n      let yearIndex = remainder.search(/\\d/);\n      if (yearIndex == -1) {\n        return result;\n      }\n      let monthString = remainder.substring(0, yearIndex);\n      let yearString = remainder.substring(yearIndex);\n\n      let dayNum = parseInt(dayString);\n      if (isNaN(dayNum) || !dayNum) {\n        return result;\n      }\n      let yearNum = parseInt(yearString);\n      if (isNaN(yearNum) || !yearNum) {\n        return result;\n      }\n      let monthNum = WTS_Date.monthStringToMonthNum(monthString);\n      if (monthNum == 0) {\n        return result;\n      }\n      result.dayNum = dayNum;\n      result.monthNum = monthNum;\n      result.yearNum = yearNum;\n      result.hasDay = true;\n      result.hasMonth = true;\n      result.isValid = true;\n      return result;\n    }\n    // Sometimes we can get a date like: July 1852 or Jul 1852\n    if (/[a-zA-Z]+\\s+\\d\\d\\d\\d$/.test(cleanString)) {\n      let remainder = cleanString;\n\n      let yearIndex = remainder.search(/\\d/);\n      if (yearIndex == -1) {\n        return result;\n      }\n      let monthString = remainder.substring(0, yearIndex).trim();\n      let yearString = remainder.substring(yearIndex).trim();\n\n      let yearNum = parseInt(yearString);\n      if (isNaN(yearNum) || !yearNum) {\n        return result;\n      }\n      let monthNum = WTS_Date.monthStringToMonthNum(monthString);\n      if (monthNum == 0) {\n        return result;\n      }\n      result.monthNum = monthNum;\n      result.yearNum = yearNum;\n      result.hasMonth = true;\n      result.isValid = true;\n      return result;\n    }\n\n    console.log(\"Unusual date format: \" + cleanString);\n\n    return result;\n  },\n\n  getStdDateString: function (parsedDate, monthStrings) {\n    let string = \"\";\n    if (!parsedDate.isValid) {\n      return string;\n    }\n\n    if (parsedDate.isRange) {\n      return parsedDate.startYearNum.toString() + \"-\" + parsedDate.endYearNum.toString();\n    }\n\n    if (parsedDate.hasDay) {\n      string += parsedDate.dayNum.toString() + \" \";\n    }\n    if (parsedDate.hasMonth) {\n      string += monthStrings[parsedDate.monthNum - 1] + \" \";\n    }\n    string += parsedDate.yearNum.toString();\n    return string;\n  },\n\n  getStdShortFormDateString: function (parsedDate) {\n    return WTS_Date.getStdDateString(parsedDate, threeLetterMonths);\n  },\n\n  getStdLongFormDateString: function (parsedDate) {\n    return WTS_Date.getStdDateString(parsedDate, fullMonths);\n  },\n\n  getUsLongFormDateString: function (parsedDate) {\n    if (!parsedDate.hasDay || !parsedDate.hasMonth || parsedDate.isRange) {\n      return WTS_Date.getStdDateString(parsedDate, fullMonths);\n    }\n\n    let string = fullMonths[parsedDate.monthNum - 1] + \" \" + parsedDate.dayNum.toString();\n    string += \", \" + parsedDate.yearNum.toString();\n    return string;\n  },\n\n  getDayNumberNthString: function (dayNum) {\n    let dayString = dayNum.toString();\n    if (!dayString) {\n      return \"\";\n    }\n\n    // account for 11th, 12th, 111th, 213th etc (not that dates get that big!)\n    let isTeen = false;\n    if (dayString.length >= 2) {\n      if (dayString[dayString.length - 2] == \"1\") {\n        isTeen = true;\n      }\n    }\n\n    if (isTeen) {\n      dayString += \"th\";\n    } else {\n      let lastDigit = dayString[dayString.length - 1];\n      if (lastDigit == \"1\") {\n        dayString += \"st\";\n      } else if (lastDigit == \"2\") {\n        dayString += \"nd\";\n      } else if (lastDigit == \"3\") {\n        dayString += \"rd\";\n      } else {\n        dayString += \"th\";\n      }\n    }\n\n    return dayString;\n  },\n\n  getStdNthFormDateString: function (parsedDate) {\n    if (!parsedDate.hasDay || !parsedDate.hasMonth || parsedDate.isRange) {\n      return WTS_Date.getStdDateString(parsedDate, fullMonths);\n    }\n\n    let dayString = WTS_Date.getDayNumberNthString(parsedDate.dayNum);\n    if (!dayString) {\n      return WTS_Date.getStdDateString(parsedDate, fullMonths);\n    }\n\n    let string = \"the \" + dayString + \" of \" + fullMonths[parsedDate.monthNum - 1];\n    string += \" \" + parsedDate.yearNum.toString();\n    return string;\n  },\n\n  getUsNthFormDateString: function (parsedDate) {\n    if (!parsedDate.hasDay || !parsedDate.hasMonth || parsedDate.isRange) {\n      return WTS_Date.getStdDateString(parsedDate, fullMonths);\n    }\n\n    let dayString = WTS_Date.getDayNumberNthString(parsedDate.dayNum);\n    if (!dayString) {\n      return WTS_Date.getStdDateString(parsedDate, fullMonths);\n    }\n\n    let string = fullMonths[parsedDate.monthNum - 1] + \" \" + dayString;\n    string += \", \" + parsedDate.yearNum.toString();\n    return string;\n  },\n\n  getParsedDateInDays: function (parsedDate) {\n    if (!parsedDate.isValid) {\n      return 0;\n    }\n\n    let days = parsedDate.yearNum * 365;\n    // this is very simplified - currently we don't care about num days in month or leap years\n    if (parsedDate.hasMonth) {\n      days += (parsedDate.monthNum - 1) * 30;\n    }\n    if (parsedDate.hasDay) {\n      days += parsedDate.dayNum - 1;\n    }\n\n    return days;\n  },\n\n  getWholeYearsBetweenDateStrings: function (dateString1, dateString2) {\n    let parsedDate1 = WTS_Date.parseDateString(dateString1);\n    let parsedDate2 = WTS_Date.parseDateString(dateString2);\n\n    if (!parsedDate1.isValid || !parsedDate2.isValid) {\n      return 0;\n    }\n\n    let date1Days = WTS_Date.getParsedDateInDays(parsedDate1);\n    let date2Days = WTS_Date.getParsedDateInDays(parsedDate2);\n\n    let diffInDays = date2Days - date1Days;\n    return Math.floor(diffInDays / 365);\n  },\n\n  getDaysBetweenParsedDates: function (parsedDate1, parsedDate2) {\n    if (!parsedDate1.isValid || !parsedDate2.isValid) {\n      return 0;\n    }\n\n    let date1Days = WTS_Date.getParsedDateInDays(parsedDate1);\n    let date2Days = WTS_Date.getParsedDateInDays(parsedDate2);\n\n    let diffInDays = date2Days - date1Days;\n    return diffInDays;\n  },\n\n  getDaysBetweenDateStrings: function (dateString1, dateString2) {\n    let parsedDate1 = WTS_Date.parseDateString(dateString1);\n    let parsedDate2 = WTS_Date.parseDateString(dateString2);\n\n    return WTS_Date.getDaysBetweenParsedDates(parsedDate1, parsedDate2);\n  },\n\n  getYearNumFromYearString: function (yearString) {\n    if (!yearString) {\n      return undefined;\n    }\n\n    let yearNum = parseInt(yearString);\n    if (isNaN(yearNum) || yearNum == 0) {\n      return undefined;\n    }\n\n    return yearNum;\n  },\n\n  getQuarterNumFromQuarterString: function (quarterString) {\n    if (!quarterString) {\n      return undefined;\n    }\n\n    if (!isNaN(quarterString)) {\n      return quarterString; // already a number\n    }\n\n    let quarterNum = parseInt(quarterString);\n    if (isNaN(quarterNum) || quarterNum == 0) {\n      return undefined;\n    }\n\n    return quarterNum;\n  },\n\n  getDateStringFromYearMonthDay: function (year, month, day) {\n    let dateString = \"\";\n    if (day) {\n      dateString += day;\n    }\n    if (month) {\n      let monthString = month;\n      if (/^\\d+$/.test(month)) {\n        let monthNum = parseInt(month);\n        if (!isNaN(monthNum)) {\n          if (monthNum >= 1 && monthNum <= 12) {\n            monthString = threeLetterMonths[monthNum - 1];\n          }\n        }\n      }\n\n      if (dateString) {\n        dateString += \" \";\n      }\n      dateString += monthString;\n    }\n    if (year) {\n      if (dateString) {\n        dateString += \" \";\n      }\n      dateString += year;\n    }\n\n    return dateString;\n  },\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/base/core/wts_date.mjs\n");

/***/ }),

/***/ "./extension/base/core/wts_string.mjs":
/*!********************************************!*\
  !*** ./extension/base/core/wts_string.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WTS_String\": () => (/* binding */ WTS_String)\n/* harmony export */ });\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\nconst WTS_String = {\n  toInitialCapsEachWord: function (string, isName = false) {\n    if (!string || string.length == 0) {\n      return;\n    }\n\n    if (string.length == 1) {\n      return string[0].toUpperCase();\n    }\n\n    string = string.toLowerCase().trim();\n\n    var index = 0;\n    do {\n      string = string.substring(0, index) + string[index].toUpperCase() + string.substring(index + 1);\n      index = string.indexOf(\" \", index);\n      if (index != -1) {\n        index++;\n      }\n      // it might not be on a letter, move to next letter\n      while (index < string.length && (string[index] < \"a\" || string[index] > \"z\")) {\n        index++;\n      }\n    } while (index != -1 && index < string.length);\n\n    // certain words should not be initial caps\n    string = string.replace(/ In /g, \" in \");\n    string = string.replace(/ Of /g, \" of \");\n    string = string.replace(/ With /g, \" with \");\n    string = string.replace(/ At /g, \" at \");\n    string = string.replace(/ The /g, \" the \");\n    string = string.replace(/ And /g, \" and \");\n\n    if (!isName) {\n      string = string.replace(/ A /g, \" a \");\n    }\n\n    return string;\n  },\n\n  toInitialCaps: function (string) {\n    if (string) {\n      if (string.length > 1) {\n        return string[0].toUpperCase() + string.substring(1).toLowerCase();\n      } else {\n        return string[0].toUpperCase();\n      }\n    } else {\n      return \"\";\n    }\n  },\n\n  removeExtendedAsciiCharacters: function (string) {\n    const extendedAsciiArray = [\n      [\"Š\", \"S\"],\n      [\"š\", \"s\"],\n      [\"Ž\", \"Z\"],\n      [\"ž\", \"z\"],\n      [\"À\", \"A\"],\n      [\"Á\", \"A\"],\n      [\"Â\", \"A\"],\n      [\"Ã\", \"A\"],\n      [\"Ä\", \"A\"],\n      [\"Å\", \"A\"],\n      [\"Æ\", \"A\"],\n      [\"Ç\", \"C\"],\n      [\"È\", \"E\"],\n      [\"É\", \"E\"],\n      [\"Ê\", \"E\"],\n      [\"Ë\", \"E\"],\n      [\"Ì\", \"I\"],\n      [\"Í\", \"I\"],\n      [\"Î\", \"I\"],\n      [\"Ï\", \"I\"],\n      [\"Ñ\", \"N\"],\n      [\"Ò\", \"O\"],\n      [\"Ó\", \"O\"],\n      [\"Ô\", \"O\"],\n      [\"Õ\", \"O\"],\n      [\"Ö\", \"O\"],\n      [\"Ø\", \"O\"],\n      [\"Ù\", \"U\"],\n      [\"Ú\", \"U\"],\n      [\"Û\", \"U\"],\n      [\"Ü\", \"U\"],\n      [\"Ý\", \"Y\"],\n      [\"Þ\", \"B\"],\n      [\"ß\", \"Ss\"],\n      [\"à\", \"a\"],\n      [\"á\", \"a\"],\n      [\"â\", \"a\"],\n      [\"ã\", \"a\"],\n      [\"ä\", \"a\"],\n      [\"å\", \"a\"],\n      [\"æ\", \"a\"],\n      [\"ç\", \"c\"],\n      [\"è\", \"e\"],\n      [\"é\", \"e\"],\n      [\"ê\", \"e\"],\n      [\"ë\", \"e\"],\n      [\"ì\", \"i\"],\n      [\"í\", \"i\"],\n      [\"î\", \"i\"],\n      [\"ï\", \"i\"],\n      [\"ð\", \"o\"],\n      [\"ñ\", \"n\"],\n      [\"ò\", \"o\"],\n      [\"ó\", \"o\"],\n      [\"ô\", \"o\"],\n      [\"õ\", \"o\"],\n      [\"ö\", \"o\"],\n      [\"ø\", \"o\"],\n      [\"ù\", \"u\"],\n      [\"ú\", \"u\"],\n      [\"û\", \"u\"],\n      [\"ý\", \"y\"],\n      [\"þ\", \"b\"],\n      [\"ÿ\", \"y\"],\n      [\"’\", \"'\"],\n      [\"”\", '\"'],\n      [\"“\", '\"'],\n      [\"●\", \"*\"],\n    ];\n    if (string == undefined || string == \"\") {\n      return \"\";\n    }\n\n    var replaceString = string;\n    for (var i = 0; i < extendedAsciiArray.length; i++) {\n      var extChar = extendedAsciiArray[i];\n      const regex = new RegExp(extChar[0], \"g\");\n      replaceString = replaceString.replace(regex, extChar[1]);\n    }\n    return replaceString;\n  },\n\n  getFirstWord: function (string) {\n    if (string == undefined || string == null) {\n      return string;\n    }\n    let spaceIndex = string.search(/\\s/);\n    if (spaceIndex == -1) {\n      return string;\n    }\n    return string.substring(0, spaceIndex);\n  },\n\n  getLastWord: function (string) {\n    if (string == undefined || string == null) {\n      return string;\n    }\n    let lastSpaceIndex = string.lastIndexOf(\" \");\n    if (lastSpaceIndex == -1) {\n      return string;\n    }\n    return string.substring(lastSpaceIndex + 1);\n  },\n\n  getSecondWord: function (string) {\n    if (string == undefined || string == null) {\n      return string;\n    }\n    let spaceIndex = string.search(/\\s/);\n    if (spaceIndex == -1) {\n      return \"\";\n    }\n\n    let secondSpaceIndex = string.indexOf(\" \", spaceIndex + 1);\n    if (secondSpaceIndex == -1) {\n      return string.substring(spaceIndex + 1);\n    }\n\n    return string.substring(spaceIndex + 1, secondSpaceIndex);\n  },\n\n  getMiddleWord: function (string) {\n    // if there are 2 spaces or more, return the word between the first and second space\n    if (string == undefined || string == null) {\n      return string;\n    }\n    let spaceIndex = string.search(/\\s/);\n    if (spaceIndex == -1) {\n      return \"\";\n    }\n\n    let secondSpaceIndex = string.indexOf(\" \", spaceIndex + 1);\n    if (secondSpaceIndex == -1) {\n      return \"\";\n    }\n\n    return string.substring(spaceIndex + 1, secondSpaceIndex).trim();\n  },\n\n  getMiddleWords: function (string) {\n    // if there are 2 spaces or more, return the word between the first and second space\n    if (string == undefined || string == null) {\n      return string;\n    }\n    let spaceIndex = string.search(/\\s/);\n    if (spaceIndex == -1) {\n      return \"\";\n    }\n\n    let lastSpaceIndex = string.lastIndexOf(\" \");\n    if (lastSpaceIndex == -1 || lastSpaceIndex == spaceIndex) {\n      return \"\";\n    }\n\n    return string.substring(spaceIndex + 1, lastSpaceIndex).trim();\n  },\n\n  getWordsAfterFirstWord: function (string) {\n    if (string == undefined || string == null) {\n      return string;\n    }\n    let spaceIndex = string.search(/\\s/);\n    if (spaceIndex == -1) {\n      return undefined;\n    }\n    return string.substring(spaceIndex + 1);\n  },\n\n  getWordsBeforeLastWord: function (string) {\n    if (string == undefined || string == null) {\n      return string;\n    }\n    let lastSpaceIndex = string.lastIndexOf(\" \");\n    if (lastSpaceIndex == -1) {\n      return undefined;\n    }\n    return string.substring(0, lastSpaceIndex);\n  },\n\n  countWords: function (string) {\n    return string.trim().split(/\\s+/).length;\n  },\n\n  getIndefiniteArticle: function (word) {\n    if (!word || !word.length) {\n      return \"\";\n    }\n    if (/[aeiou]/i.test(word[0])) {\n      return \"an\";\n    }\n    return \"a\";\n  },\n\n  getPrepositionForPlaceString: function (placeString) {\n    if (!placeString) {\n      return \"\";\n    }\n\n    let firstChar = placeString[0];\n    if (firstChar >= \"0\" && firstChar <= \"9\") {\n      return \"at\";\n    } else {\n      // if it is a town we want \"in\" but if it is a house or building then we want \"at\"\n      // so we get last word or first part and compare it to a set of strings\n      let preposition = \"in\";\n      let firstPart = placeString;\n      let firstCommaIndex = placeString.indexOf(\",\");\n      if (firstCommaIndex != -1) {\n        firstPart = placeString.substring(0, firstCommaIndex);\n      }\n      let lastSpaceIndex = firstPart.lastIndexOf(\" \");\n      if (lastSpaceIndex != -1) {\n        let lastWord = firstPart.substring(lastSpaceIndex + 1);\n        const onEndings = [\n          \"street\",\n          \"st\",\n          \"st.\",\n          \"road\",\n          \"rd\",\n          \"rd.\",\n          \"lane\",\n          \"ln\",\n          \"ln.\",\n          \"avenue\",\n          \"ave\",\n          \"ave.\",\n          \"av\",\n          \"av.\",\n        ];\n        const atEndings = [\"workhouse\", \"house\", \"manor\", \"farm\", \"church\", \"hospital\", \"apartments\", \"apts\", \"apts.\"];\n        lastWord = lastWord.toLowerCase();\n        if (onEndings.includes(lastWord)) {\n          preposition = \"on\";\n        } else if (atEndings.includes(lastWord)) {\n          preposition = \"at\";\n        }\n      }\n      return preposition;\n    }\n  },\n\n  highlightString: function (string, highlightOption) {\n    let newString = string;\n    if (highlightOption == \"bold\") {\n      newString = \"'''\" + newString + \"'''\";\n    } else if (highlightOption == \"italic\") {\n      newString = \"''\" + newString + \"''\";\n    }\n    return newString;\n  },\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/base/core/wts_string.mjs\n");

/***/ }),

/***/ "./extension/site/all/core/register_site_options.mjs":
/*!***********************************************************!*\
  !*** ./extension/site/all/core/register_site_options.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ancestry_core_ancestry_options_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ancestry/core/ancestry_options.mjs */ \"./extension/site/ancestry/core/ancestry_options.mjs\");\n/* harmony import */ var _bg_core_bg_options_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../bg/core/bg_options.mjs */ \"./extension/site/bg/core/bg_options.mjs\");\n/* harmony import */ var _fmp_core_fmp_options_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../fmp/core/fmp_options.mjs */ \"./extension/site/fmp/core/fmp_options.mjs\");\n/* harmony import */ var _fs_core_fs_options_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../fs/core/fs_options.mjs */ \"./extension/site/fs/core/fs_options.mjs\");\n/* harmony import */ var _fg_core_fg_options_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../fg/core/fg_options.mjs */ \"./extension/site/fg/core/fg_options.mjs\");\n/* harmony import */ var _freebmd_core_freebmd_options_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../freebmd/core/freebmd_options.mjs */ \"./extension/site/freebmd/core/freebmd_options.mjs\");\n/* harmony import */ var _freecen_core_freecen_options_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../freecen/core/freecen_options.mjs */ \"./extension/site/freecen/core/freecen_options.mjs\");\n/* harmony import */ var _freereg_core_freereg_options_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../freereg/core/freereg_options.mjs */ \"./extension/site/freereg/core/freereg_options.mjs\");\n/* harmony import */ var _geneteka_core_geneteka_options_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../geneteka/core/geneteka_options.mjs */ \"./extension/site/geneteka/core/geneteka_options.mjs\");\n/* harmony import */ var _gro_core_gro_options_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../gro/core/gro_options.mjs */ \"./extension/site/gro/core/gro_options.mjs\");\n/* harmony import */ var _np_core_np_options_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../np/core/np_options.mjs */ \"./extension/site/np/core/np_options.mjs\");\n/* harmony import */ var _scotp_core_scotp_options_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../scotp/core/scotp_options.mjs */ \"./extension/site/scotp/core/scotp_options.mjs\");\n/* harmony import */ var _wikitree_core_wikitree_options_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../wikitree/core/wikitree_options.mjs */ \"./extension/site/wikitree/core/wikitree_options.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n// Importing each of these site modules causes them to register their options\n\n// Currently the order that they are imported is the order that they appear in the\n// options page subsection drop down\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb24vc2l0ZS9hbGwvY29yZS9yZWdpc3Rlcl9zaXRlX29wdGlvbnMubWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDa0Q7QUFDWjtBQUNFO0FBQ0Y7QUFDQTtBQUNVO0FBQ0E7QUFDQTtBQUNFO0FBQ1Y7QUFDRjtBQUNNO0FBQ00iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaXRhdGlvbkV4dHJhY3Rvci8uL2V4dGVuc2lvbi9zaXRlL2FsbC9jb3JlL3JlZ2lzdGVyX3NpdGVfb3B0aW9ucy5tanM/NWRiOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIFJvYmVydCBNIFBhdmV5XG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbi8vIEltcG9ydGluZyBlYWNoIG9mIHRoZXNlIHNpdGUgbW9kdWxlcyBjYXVzZXMgdGhlbSB0byByZWdpc3RlciB0aGVpciBvcHRpb25zXG5cbi8vIEN1cnJlbnRseSB0aGUgb3JkZXIgdGhhdCB0aGV5IGFyZSBpbXBvcnRlZCBpcyB0aGUgb3JkZXIgdGhhdCB0aGV5IGFwcGVhciBpbiB0aGVcbi8vIG9wdGlvbnMgcGFnZSBzdWJzZWN0aW9uIGRyb3AgZG93blxuaW1wb3J0IFwiLi4vLi4vYW5jZXN0cnkvY29yZS9hbmNlc3RyeV9vcHRpb25zLm1qc1wiO1xuaW1wb3J0IFwiLi4vLi4vYmcvY29yZS9iZ19vcHRpb25zLm1qc1wiO1xuaW1wb3J0IFwiLi4vLi4vZm1wL2NvcmUvZm1wX29wdGlvbnMubWpzXCI7XG5pbXBvcnQgXCIuLi8uLi9mcy9jb3JlL2ZzX29wdGlvbnMubWpzXCI7XG5pbXBvcnQgXCIuLi8uLi9mZy9jb3JlL2ZnX29wdGlvbnMubWpzXCI7XG5pbXBvcnQgXCIuLi8uLi9mcmVlYm1kL2NvcmUvZnJlZWJtZF9vcHRpb25zLm1qc1wiO1xuaW1wb3J0IFwiLi4vLi4vZnJlZWNlbi9jb3JlL2ZyZWVjZW5fb3B0aW9ucy5tanNcIjtcbmltcG9ydCBcIi4uLy4uL2ZyZWVyZWcvY29yZS9mcmVlcmVnX29wdGlvbnMubWpzXCI7XG5pbXBvcnQgXCIuLi8uLi9nZW5ldGVrYS9jb3JlL2dlbmV0ZWthX29wdGlvbnMubWpzXCI7XG5pbXBvcnQgXCIuLi8uLi9ncm8vY29yZS9ncm9fb3B0aW9ucy5tanNcIjtcbmltcG9ydCBcIi4uLy4uL25wL2NvcmUvbnBfb3B0aW9ucy5tanNcIjtcbmltcG9ydCBcIi4uLy4uL3Njb3RwL2NvcmUvc2NvdHBfb3B0aW9ucy5tanNcIjtcbmltcG9ydCBcIi4uLy4uL3dpa2l0cmVlL2NvcmUvd2lraXRyZWVfb3B0aW9ucy5tanNcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./extension/site/all/core/register_site_options.mjs\n");

/***/ }),

/***/ "./extension/site/ancestry/browser/ancestry_fetch.mjs":
/*!************************************************************!*\
  !*** ./extension/site/ancestry/browser/ancestry_fetch.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"extractRecordHtmlFromUrl\": () => (/* binding */ extractRecordHtmlFromUrl),\n/* harmony export */   \"fetchAncestrySharingDataObj\": () => (/* binding */ fetchAncestrySharingDataObj)\n/* harmony export */ });\n/* harmony import */ var _base_browser_common_browser_compat_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/browser/common/browser_compat.mjs */ \"./extension/base/browser/common/browser_compat.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n\nasync function fetchAncestrySharingDataObjGivenIds(imageDbId, imageRecordId, recordId, url) {\n  let mode = \"cors\";\n\n  let domain = url.replace(/https?\\:\\/\\/[^\\.]+\\.([^\\/]+)\\/.*/, \"$1\");\n  if (!domain || domain == url) {\n    domain = \"ancestry.com\";\n  }\n\n  //console.log(\"domain is: \" + domain);\n\n  // NOTE: It appears that things are working fine always using ancestry.com as the domain.\n  // It is possible that changing to sometimes use ancestrylibrary.com would break things.\n  // It is reported that creating sharing links from ancestrylibrary.com is working when using\n  // ancestry.com as the domain. So for now always use ancestry.com\n  // NO... I tested by actually signing out of ancestry.com and using ancestry.co.uk and it\n  // could not build the link when I was setting domain here to ancestry.com.\n  //domain = \"ancestry.com\";\n\n  let fetchUrl = \"https://www.\" + domain + \"/sharing/shares/create/v2\";\n\n  //console.log(\"fetchUrl is\");\n  //console.log(fetchUrl);\n\n  const postData = {\n    collection_id: imageDbId,\n    cta_view_original_url: url,\n    image_id: imageRecordId,\n    locale: \"en-US\",\n    record_id: recordId,\n    referrer_client: \"LIVE\",\n    shared_page_url: url,\n  };\n\n  let response = await fetch(fetchUrl, {\n    headers: {\n      accept: \"*/*\",\n      \"accept-language\": \"en-US,en;q=0.9\",\n      \"Content-Type\": \"application/json\",\n    },\n    referrer: \"https://search.\" + domain + \"/\",\n    referrerPolicy: \"origin-when-cross-origin\",\n    body: JSON.stringify(postData),\n    method: \"POST\",\n    mode: mode,\n    credentials: \"include\",\n  }).catch((err) => {\n    console.log(\"Fetch threw an exception, message is: \" + err.message);\n    console.log(err);\n    return { success: false };\n  });\n\n  //console.log(\"response is\");\n  //console.log(response);\n\n  // On Firefox it may return zero any time you use \"no-cors\"\n  if (response.status !== 200) {\n    console.log(\"Looks like there was a problem. Status Code: \" + response.status);\n    return { success: false };\n  }\n\n  // Examine the text in the response\n  let data = await response.text();\n\n  //console.log(\"data is:\");\n  //console.log(data);\n\n  if (data.startsWith(`{\"id\":`)) {\n    const jsonData = data;\n    const dataObj = JSON.parse(jsonData);\n\n    //console.log(\"dataObj is:\");\n    //console.log(dataObj);\n\n    if (dataObj) {\n      return { success: true, dataObj: dataObj };\n    }\n  }\n\n  return { success: false };\n}\n\nasync function getLastSharingData() {\n  return await (0,_base_browser_common_browser_compat_mjs__WEBPACK_IMPORTED_MODULE_0__.getLocalStorageItem)(\"ancestry_lastSharingData\").catch( error => { });\n}\n\nasync function setLastSharingData(lastSharingData) {\n  let items = { ancestry_lastSharingData: lastSharingData };\n  try { chrome.storage.local.set(items)} catch (err) \n  {console.log(\"Failed to write lastSharingData to chrome.storage.local:\" + err.message); console.log(lastSharingData);};\n}\n\nasync function fetchAncestrySharingDataObj(ed) {\n  let result = { success: false, dataObj: undefined };\n\n  // If the request is the same as the last one made then reuse the result to avoid sending too\n  // many fetch requests to server.\n  let lastSharingData = await getLastSharingData();\n  if (lastSharingData && ed.url == lastSharingData.url) {\n    //console.log(\"fetchAncestrySharingDataObj, reusing result:\");\n    //console.log(lastSharingData.dataObj);\n    result.success = true;\n    result.dataObj = lastSharingData.dataObj;\n    return result;\n  }\n\n  let sharingData = {\n    dbId: null,\n    recordId: null,\n    personId: null,\n    url: ed.url,\n    dataObj: null,\n  };\n\n  if (ed.pageType == \"record\") {\n    if (ed.imageUrl) {\n      sharingData.dbId = ed.imageDbId;\n      sharingData.recordId = ed.imageRecordId;\n      sharingData.personId = ed.recordId;\n    }\n  } else if (ed.pageType == \"image\") {\n    sharingData.dbId = ed.dbId;\n    sharingData.recordId = ed.recordId;\n    sharingData.personId = ed.pid;\n  }\n\n  //console.log(\"sharingData is:\");\n  //console.log(sharingData);\n\n  if (sharingData.dbId && sharingData.recordId) {\n    result = await fetchAncestrySharingDataObjGivenIds(\n      sharingData.dbId,\n      sharingData.recordId,\n      sharingData.personId,\n      sharingData.url\n    );\n    //console.log(\"fetchAncestrySharingDataObj, result is\");\n    //console.log(sharingData.dataObj);\n\n    if (result.success && result.dataObj) {\n      sharingData.dataObj = result.dataObj;\n      setLastSharingData(sharingData);\n    }\n  }\n\n  //console.log(\"result is:\");\n  //console.log(result);\n\n  return result;\n}\n\nasync function getRecordPageCache() {\n  let recordPageCache = {};\n  let item = await (0,_base_browser_common_browser_compat_mjs__WEBPACK_IMPORTED_MODULE_0__.getLocalStorageItem)(\"ancestry_recordPageCache\");\n  if (item) {\n    recordPageCache = item;\n  }\n  return recordPageCache;\n}\n\nasync function setRecordPageCache(recordPageCache) {\n  let items = { ancestry_recordPageCache: recordPageCache };\n  chrome.storage.local.set(items);\n}\n\nasync function fetchAncestryRecordPage(recordUrl, cacheTag) {\n  let result = { success: false, recordUrl: recordUrl, cacheTag: cacheTag };\n\n  if (!recordUrl) {\n    return result;\n  }\n\n  try {\n    let ancestryRecordPageCache = await getRecordPageCache();\n    //console.log(\"fetchAncestryRecordPage, cacheTag is: \" + cacheTag);\n\n    if (cacheTag) {\n      //console.log(\"fetchAncestryRecordPage, ancestryRecordPageCache is:\");\n      //console.log(ancestryRecordPageCache);\n\n      let cache = ancestryRecordPageCache[cacheTag];\n\n      //console.log(\"fetchAncestryRecordPage, cache is: \");\n      //console.log(cache);\n\n      if (cache && cache.recordUrl == recordUrl) {\n        return cache.result;\n      }\n    }\n\n    let mode = \"cors\";\n\n    let domain = recordUrl.replace(/https?\\:\\/\\/[^\\.]+\\.([^\\/]+)\\/.*/, \"$1\");\n    if (!domain || domain == recordUrl) {\n      domain = \"ancestry.com\";\n    }\n\n    //console.log(\"domain is: \" + domain);\n\n    let response = await fetch(recordUrl, {\n      headers: {\n        accept: \"*/*\",\n        \"accept-language\": \"en-US,en;q=0.9\",\n      },\n      referrer: \"https://search.\" + domain + \"/\",\n      referrerPolicy: \"origin-when-cross-origin\",\n      body: null,\n      method: \"GET\",\n      mode: mode,\n      credentials: \"include\",\n    }).catch((err) => {\n      console.log(\"Fetch threw an exception, message is: \" + err.message);\n      console.log(err);\n      return result; // Note this returns from this catch function, not fetchAncestryRecordPage\n    });\n\n    // On Firefox it may return zero any time you use \"no-cors\"\n    if (!response || response.status !== 200) {\n      console.log(\"Looks like there was a problem. Status Code: \" + response.status);\n      return result;\n    }\n\n    //console.log(\"response is\");\n    //console.log(response);\n\n    if (response.url && response.url.includes(\"offers/join\")) {\n      // the user does not have a subscription that includes this record\n      result.errorStatus = \"subscriptionHasNoAccess\";\n      return result;\n    }\n\n    // Examine the text in the response\n    let data = await response.text();\n\n    //console.log(\"data is:\");\n    //console.log(data);\n\n    // There are different ways to try to parse it.\n\n    result.htmlText = data;\n    result.success = true;\n\n    //console.log(\"result is: \");\n    //console.log(result);\n\n    if (cacheTag) {\n      let cache = { recordUrl: recordUrl, result: result };\n      ancestryRecordPageCache[cacheTag] = cache;\n      setRecordPageCache(ancestryRecordPageCache);\n    }\n  } catch (error) {\n    console.log(\"WikiTree Sourcer:: fetchAncestryRecordPage, failed. Error message is: \" + error.message);\n  }\n\n  return result;\n}\n\nasync function extractRecordHtmlFromUrl(recordUrl, cacheTag) {\n  //console.log(\"extractRecordFromUrl, recordUrl is: \" + recordUrl);\n\n  let result = await fetchAncestryRecordPage(recordUrl, cacheTag);\n\n  //console.log(\"extractRecordFromUrl, sending response: \");\n  //console.log(result);\n\n  return result;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/site/ancestry/browser/ancestry_fetch.mjs\n");

/***/ }),

/***/ "./extension/site/ancestry/core/ancestry_build_citation.mjs":
/*!******************************************************************!*\
  !*** ./extension/site/ancestry/core/ancestry_build_citation.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"buildCitation\": () => (/* binding */ buildCitation)\n/* harmony export */ });\n/* harmony import */ var _base_core_citation_builder_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/core/citation_builder.mjs */ \"./extension/base/core/citation_builder.mjs\");\n/* harmony import */ var _base_core_data_string_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/core/data_string.mjs */ \"./extension/base/core/data_string.mjs\");\n/* harmony import */ var _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/core/record_type.mjs */ \"./extension/base/core/record_type.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\n\n\nfunction getCleanRecordDataValue(recordData, fieldName) {\n  let value = recordData[fieldName];\n  if (value == undefined) {\n    return value;\n  }\n\n  // sometimes there are values in square brackets after the first value\n  // these make it hard to parse dates, places, names etc so remove them\n  let bracketIndex = value.indexOf(\"[\");\n  if (bracketIndex != -1) {\n    value = value.substring(0, bracketIndex).trim();\n  }\n\n  return value;\n}\n\nfunction getRefTitle(ed, gd) {\n  const recordTypeToRefTitle = [\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Census,\n      defaultTitle: \"Census\",\n      addYear: true,\n      titleMatches: [{ title: \"Register\", matches: [\"1939 England and Wales Register\"] }],\n    },\n  ];\n\n  let refTitle = gd.getRefTitle(ed.titleCollection, recordTypeToRefTitle);\n\n  if (refTitle && refTitle != \"Unclassified\") {\n    return refTitle;\n  }\n\n  let rd = ed.recordData;\n  if (rd) {\n    // A user reported getting \"rd.hasOwnProperty is not a function\" once\n    if (Object.prototype.hasOwnProperty.call(rd, \"Event Type\")) {\n      return rd[\"Event Type\"];\n    }\n\n    if (Object.prototype.hasOwnProperty.call(rd, \"Record Type\")) {\n      return rd[\"Record Type\"];\n    }\n  }\n\n  return \"\";\n}\n\nfunction getImageRefTitle(titleCollection, imageBrowsePath) {\n  const titleCollectionTightMatches = [\n    { title: \"Death\", matches: [\"Death Records\"] },\n    { title: \"Probate\", matches: [\"Probate Records\"] },\n  ];\n\n  const imageBrowsePathTightMatches = [\n    { title: \"Death\", matches: [\"Death Certificates\"] },\n    { title: \"Probate\", matches: [\"Probate Records\"] },\n  ];\n\n  const titleCollectionLooseMatches = [\n    { title: \"Birth\", matches: [\"Birth\"] },\n    { title: \"Baptism\", matches: [\"Baptism\"] },\n    { title: \"Marriage\", matches: [\"Marriage\"] },\n    { title: \"Death\", matches: [\"Death\"] },\n    { title: \"Burial\", matches: [\"Burial\"] },\n    { title: \"Probate\", matches: [\"Probate\"] },\n  ];\n\n  const imageBrowsePathLooseMatches = [\n    { title: \"Birth\", matches: [\"Birth\"] },\n    { title: \"Baptism\", matches: [\"Baptism\"] },\n    { title: \"Marriage\", matches: [\"Marriage\"] },\n    { title: \"Death\", matches: [\"Death\"] },\n    { title: \"Burial\", matches: [\"Burial\"] },\n    { title: \"Probate\", matches: [\"Probate\"] },\n  ];\n\n  function lookup(title, table) {\n    for (let obj of table) {\n      if (obj.matches) {\n        for (let match of obj.matches) {\n          if (title && title.includes(match)) {\n            return obj.title;\n          }\n        }\n      }\n    }\n  }\n\n  if (titleCollection) {\n    let refTitle = lookup(titleCollection, titleCollectionTightMatches);\n    if (refTitle) {\n      return refTitle;\n    }\n  }\n\n  if (imageBrowsePath) {\n    let refTitle = lookup(imageBrowsePath, imageBrowsePathTightMatches);\n    if (refTitle) {\n      return refTitle;\n    }\n  }\n\n  if (titleCollection) {\n    let refTitle = lookup(titleCollection, titleCollectionLooseMatches);\n    if (refTitle) {\n      return refTitle;\n    }\n  }\n\n  if (imageBrowsePath) {\n    let refTitle = lookup(imageBrowsePath, imageBrowsePathLooseMatches);\n    if (refTitle) {\n      return refTitle;\n    }\n  }\n\n  // no matches\n  if (titleCollection && imageBrowsePath) {\n    // choose the shorter one\n    return imageBrowsePath.length < titleCollection.length ? imageBrowsePath : titleCollection;\n  }\n  if (titleCollection) {\n    return titleCollection;\n  }\n  if (imageBrowsePath) {\n    return imageBrowsePath;\n  }\n\n  return \"Unclassified\";\n}\n\nfunction getSharingPageRefTitle(titleCollection) {\n  const titleCollectionMatches = [\n    { title: \"Death\", matches: [\"Death Records\"] },\n    { title: \"Probate\", matches: [\"Probate Records\"] },\n    { title: \"Census\", matches: [\"Census\"] },\n    { title: \"School Records\", matches: [\"School\"] },\n    { title: \"Workhouse Records\", matches: [\"Workhouse\"] },\n    { title: \"Birth or Baptism\", matches: [\"Births and Baptisms\"] },\n    { title: \"Birth\", matches: [\"Births\"] },\n    { title: \"Baptism\", matches: [\"Baptisms\"] },\n    { title: \"Birth\", matches: [\"Birth\"] },\n    { title: \"Baptism\", matches: [\"Baptism\"] },\n  ];\n\n  function lookup(title, table) {\n    for (let obj of table) {\n      if (obj.matches) {\n        for (let match of obj.matches) {\n          if (title && title.includes(match)) {\n            return obj.title;\n          }\n        }\n      }\n    }\n  }\n\n  if (titleCollection) {\n    let refTitle = lookup(titleCollection, titleCollectionMatches);\n    if (refTitle) {\n      if (titleCollection.search(/\\d\\d\\d\\d /) == 0) {\n        refTitle = titleCollection.substring(0, 4) + \" \" + refTitle;\n      }\n      return refTitle;\n    }\n  }\n\n  // no matches\n  if (titleCollection) {\n    return titleCollection;\n  }\n\n  return \"Unclassified\";\n}\n\nfunction modifyValueForUrl(value) {\n  if (value.startsWith(\"https://www.findagrave.com/memorial\")) {\n    let memorialId = value.replace(/^https\\:\\/\\/www\\.findagrave\\.com\\/memorial\\/(\\d+)\\/.*$/, \"$1\");\n    if (memorialId && memorialId != value) {\n      return \"{{FindAGrave|\" + memorialId + \"}}\";\n    }\n  }\n\n  return value;\n}\n\nconst referenceKeys = [\n  [\"reference number\"],\n  [\"registration number\"],\n  [\"declaration number\"],\n  [\"marriage certificate number\"],\n  [\"book\"],\n  [\"piece\"],\n  [\"folio\"],\n  [\"volume\", \"volume number\"],\n  [\"page\", \"page number\", \"os page\"],\n  [\"line\", \"line number\"],\n  [\"roll\"],\n  [\"reel number\"],\n  [\"fhl film number\"],\n  [\"schedule\", \"schedule number\", \"household schedule number\"],\n  [\"household number\"],\n  [\"sub schedule number\", \"sub-schedule number\"],\n  [\"registration district number\"],\n  [\"ed, institution, or vessel\"], // this always seems to be a number\n  [\"enumeration district or census tract\"], // this always seems to be a number\n  [\"newspaper information\"],\n  [\"url\"],\n];\n\nfunction isReferenceKey(key) {\n  let lcKey = key.toLowerCase();\n  for (let keyList of referenceKeys) {\n    if (keyList.includes(lcKey)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction getReferenceKeyListForKey(key) {\n  let lcKey = key.toLowerCase();\n  for (let keyList of referenceKeys) {\n    if (keyList.includes(lcKey)) {\n      return keyList;\n    }\n  }\n  return undefined;\n}\n\nfunction removeUnwantedKeysForTable(keys, recordData) {\n  let newKeys = [];\n\n  for (let key of keys) {\n    if (key.includes(\"Parish Map\") || recordData[key].startsWith(\"View\")) continue;\n\n    if (key.includes(\"Search\") || key.includes(\"Learn More\")) continue;\n\n    // remove SSN for privacy. This could be an option\n    if (key.includes(\"Social Security #\")) continue;\n    if (key == \"SSN\") continue;\n\n    if (isReferenceKey(key)) continue;\n\n    newKeys.push(key);\n  }\n\n  return newKeys;\n}\n\nfunction removeUnwantedKeysForDataString(keys, recordData) {\n  let newKeys = [];\n\n  for (let key of keys) {\n    if (key.includes(\"Parish Map\") || recordData[key].startsWith(\"View\")) continue;\n\n    if (key.includes(\"Search\") || key.includes(\"Learn More\")) continue;\n    if (key.includes(\"as it Appears\") || key.includes(\"Register Type\")) continue;\n    if (key.includes(\"Other Records\") || key.includes(\"Family Members\")) continue;\n\n    // remove SSN for privacy. This could be an option\n    if (key.includes(\"Social Security #\")) continue;\n    if (key == \"SSN\") continue;\n\n    if (isReferenceKey(key)) continue;\n\n    newKeys.push(key);\n  }\n\n  return newKeys;\n}\n\nfunction addReferenceDataToSourceReference(data, builder, options) {\n  if (data.recordData) {\n    let keys = Object.keys(data.recordData);\n\n    if (!builder.sourceReference) {\n      builder.sourceReference = \"\";\n    }\n\n    let itemSep = \";\";\n    let valueSep = \":\";\n    if (options.citation_general_sourceReferenceSeparator == \"commaColon\") {\n      itemSep = \",\";\n      valueSep = \":\";\n    } else if (options.citation_general_sourceReferenceSeparator == \"commaSpace\") {\n      itemSep = \",\";\n      valueSep = \"\";\n    }\n\n    let lcSourceReference = builder.sourceReference.toLowerCase();\n\n    for (let key of keys) {\n      let refKeyList = getReferenceKeyListForKey(key);\n      if (refKeyList) {\n        let value = data.recordData[key];\n\n        if (value) {\n          // can't just test value since it could be something like \"1\"\n          let alreadyInSourceReference = false;\n          for (let refKey of refKeyList) {\n            let matchString = itemSep + \" \" + refKey + valueSep;\n            let startString = refKey + valueSep;\n            if (lcSourceReference.includes(matchString) || lcSourceReference.startsWith(startString)) {\n              // now check value is the same\n              let index = lcSourceReference.indexOf(matchString);\n              let valIndex = 0;\n              if (index == -1) {\n                index = 0; // must be at start\n                valIndex = index + startString.length;\n              } else {\n                valIndex = index + matchString.length;\n              }\n              let endIndex = lcSourceReference.indexOf(itemSep, valIndex);\n              if (endIndex == -1) {\n                endIndex = lcSourceReference.length;\n              }\n              let matchValue = lcSourceReference.substring(valIndex, endIndex).trim();\n              if (matchValue == value) {\n                alreadyInSourceReference = true;\n                break;\n              }\n            }\n          }\n          if (!alreadyInSourceReference) {\n            if (key == \"URL\") {\n              value = modifyValueForUrl(value);\n            }\n\n            if (builder.sourceReference) {\n              builder.sourceReference += itemSep + \" \";\n            }\n            builder.sourceReference += key + valueSep + \" \" + value;\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction cleanSourceCitation(sourceCitation, options) {\n  let string = sourceCitation;\n\n  if (string) {\n    string = string.replace(/\\;?\\s*Social Security\\:\\s*\\d+/, \"\");\n  }\n\n  if (\n    string &&\n    (options.citation_general_sourceReferenceSeparator == \"commaColon\" ||\n      options.citation_general_sourceReferenceSeparator == \"commaSpace\")\n  ) {\n    // Ancestry uses semi-colon separator by default, if user wants comma replace ; with ,\n    string = string.replace(/\\; /g, \", \");\n\n    if (options.citation_general_sourceReferenceSeparator == \"commaSpace\") {\n      string = string.replace(/\\: /g, \" \");\n    }\n  }\n\n  return string;\n}\n\nfunction getOneOfPossibleFieldNames(recordData, names) {\n  for (let name of names) {\n    let value = getCleanRecordDataValue(recordData, name);\n    if (value) {\n      return value;\n    }\n  }\n}\n\nfunction buildCustomDataString(gd, options) {\n  let input = {\n    generalizedData: gd,\n    options: options,\n  };\n  return _base_core_data_string_mjs__WEBPACK_IMPORTED_MODULE_1__.DataString.buildDataString(input);\n}\n\nfunction buildDataString(data, gd, dataStyle, options, builder) {\n  let dataString = \"\";\n\n  if (dataStyle == \"string\") {\n    dataString = buildCustomDataString(gd, options);\n    if (dataString) {\n      return dataString;\n    }\n  }\n\n  // build a list string\n  let recordData = data.recordData;\n\n  dataString = \"\";\n\n  let itemSep = \";\";\n  let valueSep = \":\";\n  if (options.citation_general_dataListSeparator == \"commaColon\") {\n    itemSep = \",\";\n    valueSep = \":\";\n  } else if (options.citation_general_dataListSeparator == \"commaSpace\") {\n    itemSep = \",\";\n    valueSep = \"\";\n  }\n\n  if (recordData) {\n    let keys = Object.keys(recordData);\n    keys = removeUnwantedKeysForDataString(keys, recordData);\n    for (let key of keys) {\n      let value = recordData[key];\n      if (value) {\n        if (dataString != \"\") {\n          dataString += itemSep + \" \";\n        }\n        if (key.startsWith(\"Household Members\") || key.startsWith(\"Household Member(s)\")) {\n          if (!builder.householdTableString) {\n            let newKey = key.replace(/\\<br\\/\\>/g, \" \");\n            if (options.citation_general_addBreaksWithinBody) {\n              dataString += \"<br/>\";\n              dataString += newKey + valueSep + \"<br/>\" + value;\n            } else {\n              let newValue = value.replace(/\\<br\\/\\>/g, \", \");\n              dataString += newKey + valueSep + \" \" + newValue;\n            }\n          }\n        } else if (value.indexOf(\"<br/>\") != -1 && !options.citation_general_addBreaksWithinBody) {\n          let newValue = value.replace(/\\<br\\/\\>/g, \", \");\n          dataString += key + valueSep + \" \" + newValue;\n        } else {\n          dataString += key + valueSep + \" \" + value;\n        }\n      }\n    }\n  } else {\n    let titleName = data.titleName;\n    if (!titleName && recordData) {\n      let name = getOneOfPossibleFieldNames(recordData, [\"Name\"]);\n      if (name) {\n        titleName = name;\n      }\n    }\n\n    dataString += titleName;\n  }\n\n  return dataString;\n}\n\nfunction getAdditionalInfo(data, gd, citationType, options, builder) {\n  let dataStyle = options.citation_ancestry_dataStyle;\n  if (dataStyle == \"none\") {\n    return \"\";\n  } else if (dataStyle == \"table\") {\n    if (options.citation_general_referencePosition == \"atEnd\") {\n      dataStyle = \"string\";\n    } else if (citationType == \"source\") {\n      dataStyle = \"list\";\n    }\n  }\n\n  if (dataStyle == \"string\" || dataStyle == \"list\") {\n    return buildDataString(data, gd, dataStyle, options, builder);\n  }\n\n  // style must be table\n  var result = \"\";\n  let recordData = data.recordData;\n  if (recordData) {\n    let keys = Object.keys(recordData);\n\n    keys = removeUnwantedKeysForTable(keys, recordData);\n    if (keys.length > 0) {\n      // start table\n      result = '{| border=\"1\"\\n';\n      let firstRow = true;\n\n      for (let key of keys) {\n        if (firstRow) {\n          firstRow = false;\n        } else {\n          result += \"|-\\n\";\n        }\n        result += \"| \" + key + \" || \" + recordData[key] + \"\\n\";\n      }\n\n      result += \"|}\";\n    }\n  }\n\n  return result;\n}\n\nfunction buildAncestryRecordTemplate(data, options) {\n  const domainParams = {\n    com: \"\",\n    \"co.uk\": \"uk\",\n    ca: \"ca\",\n    \"com.au\": \"au\",\n    de: \"de\",\n    it: \"it\",\n    fr: \"fr\",\n    se: \"se\",\n    mx: \"mx\",\n  };\n\n  let domainParam = undefined;\n\n  if (options.citation_ancestry_recordTemplateDomain == \"fromRecord\") {\n    domainParam = domainParams[data.domain];\n  } else {\n    let fullDomain = options.citation_ancestry_recordTemplateDomain;\n    let domain = fullDomain.replace(/ancestry.(.+)$/, \"$1\");\n    if (domain && domain != fullDomain) {\n      domainParam = domainParams[domain];\n    }\n  }\n\n  if (domainParam) {\n    return \"{{Ancestry Record|\" + data.dbId + \"|\" + data.recordId + \"|\" + domainParam + \"}}\";\n  }\n\n  return \"{{Ancestry Record|\" + data.dbId + \"|\" + data.recordId + \"}}\";\n}\n\nfunction buildAncestryImageTemplate(data, options) {\n  // Note that the Ancestry Image template has no 3rd (domain parameter)\n  return \"{{Ancestry Image|\" + data.dbId + \"|\" + data.recordId + \"}}\";\n}\n\nfunction buildAncestrySharingTemplateFromSharingDataObj(dataObj) {\n  // V1 versions\n  // https://www.ancestry.com/sharing/24274440?h=95cf5c\n  let num1 = dataObj.id;\n  let num2 = dataObj.hmac_id;\n\n  // V2 versions\n  if (dataObj.v2 && dataObj.v2.share_id && dataObj.v2.share_token) {\n    num1 = dataObj.v2.share_id;\n    num2 = dataObj.v2.share_token;\n  }\n\n  if (num1 && num2) {\n    let template = \"{{Ancestry Sharing|\" + num1 + \"|\" + num2 + \"}}\";\n    return template;\n  }\n}\n\nfunction cleanOriginalData(text) {\n  text = text.replace(/^Crown copyright images reproduced [^.]*\\./, \"\");\n  text = text.trim();\n\n  // remove bad Find a Grave links\n  text = text.replace(/^Find a Grave\\.\\s+Find a Grave\\./, \"Find a Grave.\");\n  text = text.trim();\n  text = text.replace(/^Find a Grave\\.\\s+http\\:\\/\\/www\\.findagrave\\.com\\/cgi\\-bin\\/fg\\.cgi\\.?/, \"\");\n  text = text.trim();\n\n  // The Original data string can get quite long and often has verbose ownership verbiage on the end that if not part\n  // of a normal citation. Note that this Original Data string is only used when there is no Source Citation string.\n  const endings = [\n    \"©\",\n    \"Crown copyright\",\n    \"Copyright\",\n    \"copyright\",\n    \"Published by permission\",\n    \"Used by permission\",\n    \"You must not\",\n    \"The Vitalsearch Company Worldwide\",\n  ];\n  for (let ending of endings) {\n    let index = text.indexOf(ending);\n    if (index != -1) {\n      text = text.substring(0, index);\n      let lastPeriodIndex = text.lastIndexOf(\".\");\n      if (lastPeriodIndex != -1) {\n        text = text.substring(0, lastPeriodIndex);\n      } else {\n        text = \"\";\n      }\n    }\n  }\n\n  // Remove links to VitalSearch as they may break or become malicious at some point\n  text = text.replace(\" (www.vitalsearch-worldwide.com)\", \"\");\n\n  // Sometimes there is duplicated information or the collection title is repeated in the Orginal data.\n  // A common example is:\n  // \"General Register Office. England and Wales Civil Registration Indexes. London, England: General Register Office\"\n  // Can we generically handle that?\n  let firstPeriodIndex = text.indexOf(\".\");\n  if (firstPeriodIndex != -1) {\n    let startText = text.substring(0, firstPeriodIndex);\n    if (text.length > firstPeriodIndex * 2) {\n      if (text.endsWith(startText)) {\n        // remove the duplicated sentence from the start\n        text = text.substring(firstPeriodIndex + 1).trim();\n      }\n    }\n  }\n\n  // replace weird hyphens with regular ones\n  text = text.replace(\"–\", \"-\");\n\n  // remove any trailing punctuation\n  text = text.replace(/[.,;]$/g, \"\");\n\n  text = text.trim();\n\n  return text;\n}\n\nfunction buildSourceReference(data, options) {\n  let sourceReference = data.sourceCitation;\n\n  if (!sourceReference && data.originalData) {\n    sourceReference = cleanOriginalData(data.originalData);\n  }\n\n  return cleanSourceCitation(sourceReference, options);\n}\n\nfunction buildCoreCitation(data, gd, options, sharingDataObj, builder) {\n  //console.log(\"buildCoreCitation, sharingDataObj is\");\n  //console.log(sharingDataObj);\n  //console.log(\"buildCoreCitation, data is\");\n  //console.log(data);\n\n  builder.sourceTitle = data.titleCollection;\n  builder.sourceReference = buildSourceReference(data, options);\n  addReferenceDataToSourceReference(data, builder, options);\n\n  if (sharingDataObj) {\n    let template = buildAncestrySharingTemplateFromSharingDataObj(sharingDataObj);\n    builder.sharingLinkOrTemplate = template;\n    builder.databaseHasImages = true;\n  }\n\n  builder.recordLinkOrTemplate = buildAncestryRecordTemplate(data, options);\n\n  let additionalInfo = getAdditionalInfo(data, gd, builder.type, options, builder);\n  if (additionalInfo) {\n    builder.dataString = additionalInfo;\n  }\n}\n\nfunction buildImageCitation(data, options, sharingDataObj, builder) {\n  builder.sourceTitle = data.titleCollection;\n  builder.databaseHasImages = true;\n\n  let sourceReference = data.imageBrowsePath;\n  if (data.totalImages && data.imageNumber) {\n    if (sourceReference) {\n      sourceReference += \" > \";\n    }\n    sourceReference += \"image \" + data.imageNumber + \" of \" + data.totalImages;\n  }\n  if (sourceReference) {\n    builder.sourceReference = sourceReference;\n  }\n\n  if (sharingDataObj) {\n    let template = buildAncestrySharingTemplateFromSharingDataObj(sharingDataObj);\n    builder.sharingLinkOrTemplate = template;\n  }\n\n  // builder.recordLinkOrTemplate = \"Ancestry \" + buildAncestryImageTemplate(data, options) + \" \" + data.dbId + \" \" + data.recordId;\n  builder.recordLinkOrTemplate = \"Ancestry \" + buildAncestryImageTemplate(data, options);\n\n  builder.dataString = data.titleName;\n\n  builder.meaningfulTitle = getImageRefTitle(data.titleCollection, data.imageBrowsePath);\n}\n\nfunction buildSharingPageCitation(data, options, builder) {\n  builder.sourceTitle = data.titleCollection;\n  builder.databaseHasImages = true;\n\n  // no source reference\n\n  if (data.ancestryTemplate) {\n    builder.sharingLinkOrTemplate = data.ancestryTemplate;\n  }\n\n  if (data.dbId && data.recordId) {\n    if (data.sharingType == \"v1\") {\n      builder.recordLinkOrTemplate = \"Ancestry \" + buildAncestryImageTemplate(data, options);\n    } else {\n      builder.recordLinkOrTemplate = buildAncestryRecordTemplate(data, options);\n    }\n  }\n\n  builder.dataString = data.personNarrative;\n\n  builder.meaningfulTitle = getSharingPageRefTitle(data.titleCollection, data.personNarrative);\n}\n\nfunction buildCitation(input) {\n  const data = input.extractedData;\n  const gd = input.generalizedData;\n  const runDate = input.runDate;\n  const sharingDataObj = input.sharingDataObj;\n  const options = input.options;\n  const type = input.type; // \"inline\", \"narrative\" or \"source\"\n\n  let builder = new _base_core_citation_builder_mjs__WEBPACK_IMPORTED_MODULE_0__.CitationBuilder(type, runDate, options);\n  builder.householdTableString = input.householdTableString;\n  builder.includeSubscriptionRequired = options.citation_ancestry_subscriptionRequired;\n\n  if (data.pageType == \"record\") {\n    buildCoreCitation(data, gd, options, sharingDataObj, builder);\n\n    var refTitle = getRefTitle(data, gd);\n    builder.meaningfulTitle = refTitle;\n\n    if (type == \"narrative\") {\n      builder.addNarrative(gd, input.dataCache, options);\n    }\n  } else if (data.pageType == \"image\") {\n    buildImageCitation(data, options, sharingDataObj, builder);\n  } else if (data.pageType == \"sharingImageOrRecord\") {\n    buildSharingPageCitation(data, options, builder);\n  }\n\n  // now the builder is setup use it to build the citation text\n  let fullCitation = builder.getCitationString();\n\n  var citationObject = {\n    citation: fullCitation,\n    type: type,\n  };\n\n  return citationObject;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/site/ancestry/core/ancestry_build_citation.mjs\n");

/***/ }),

/***/ "./extension/site/ancestry/core/ancestry_extract_data.mjs":
/*!****************************************************************!*\
  !*** ./extension/site/ancestry/core/ancestry_extract_data.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"detectPageType\": () => (/* binding */ detectPageType),\n/* harmony export */   \"extractData\": () => (/* binding */ extractData),\n/* harmony export */   \"extractRecord\": () => (/* binding */ extractRecord)\n/* harmony export */ });\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\nfunction cleanText(text) {\n  if (!text) {\n    return \"\";\n  }\n\n  text = text.replace(/\\s+/g, \" \"); // eliminate nbsp and multiple spaces etc\n\n  // sometimes the text is something like \"Zachariah Davey[Zechariah Pavey]\"\n  // in that case add a space before the [\n  text = text.replace(/([^\\s])\\[/, \"$1 [\");\n\n  text = text.trim();\n\n  return text;\n}\n\nfunction cleanLabel(text) {\n  if (!text) {\n    return \"\";\n  }\n\n  text = text.replace(/\\s/g, \" \"); // eliminate nbsp etc\n  text = text.trim();\n\n  // remove trailing :\n  text = text.replace(/\\s*\\:+$/, \"\");\n\n  return text;\n}\n\nfunction setSourceCitation(result, sourceTextNode) {\n  let sourceText = cleanText(sourceTextNode.textContent);\n  result.sourceCitation = sourceText;\n}\n\nfunction setSourceInformation(result, sourceTextNode) {\n  let sourceText = cleanText(sourceTextNode.textContent);\n  result.sourceInformation = sourceText;\n\n  let originalData = \"\";\n\n  const origDataStr = \"Original data:\";\n  // first see if there are child paragraphs\n  let paragraphNodes = sourceTextNode.querySelectorAll(\"p\");\n  if (paragraphNodes.length > 1) {\n    for (let para of paragraphNodes) {\n      let paraText = cleanText(para.textContent);\n      if (paraText.startsWith(origDataStr)) {\n        originalData = paraText.substring(origDataStr.length).trim();\n        break;\n      }\n    }\n  } else {\n    if (sourceText.startsWith(origDataStr)) {\n      originalData = sourceText.substring(origDataStr.length).trim();\n    }\n  }\n\n  if (originalData) {\n    result.originalData = cleanText(originalData);\n  }\n}\n\nfunction setSourceDescription(result, sourceTextNode) {\n  let sourceText = cleanText(sourceTextNode.textContent);\n  result.sourceDescription = sourceText;\n}\n\nfunction extractDbAndRecordId(result, url) {\n  //console.log(\"location href is\");\n  //console.log(url);\n\n  let dbId = \"\";\n  let recordId = \"\";\n  const dbIdStr = \"dbid=\"; // could have & or ? before dbid\n  const dbStr = \"db=\"; // On some records (like Birth Registrations) it is db rather than dbid\n  if (url.includes(dbIdStr) || url.includes(dbStr)) {\n    var dbIdOrDbStr = url.includes(dbIdStr) ? dbIdStr : dbStr;\n    let dbIdIndex = url.indexOf(dbIdOrDbStr);\n    dbIdIndex += dbIdOrDbStr.length;\n    let dbEndIndex = url.indexOf(\"&\", dbIdIndex);\n    if (dbEndIndex != -1) {\n      dbId = url.substring(dbIdIndex, dbEndIndex);\n      const recStr = \"&h=\";\n      let recIndex = url.indexOf(recStr, dbEndIndex);\n      if (recIndex != -1) {\n        recIndex += recStr.length;\n        let ampIndex = url.indexOf(\"&\", recIndex);\n        if (ampIndex != -1) {\n          recordId = url.substring(recIndex, ampIndex);\n        } else {\n          recordId = url.substring(recIndex);\n        }\n      }\n    }\n  } else if (url.includes(\"discoveryui-content\")) {\n    let rec = url.replace(/.*\\/discoveryui-content\\/view\\/([^:]+)\\:.*/, \"$1\");\n    let db = url.replace(/.*\\/discoveryui-content\\/view\\/[^:]+\\:(\\d+).*/, \"$1\");\n    if (db != \"\" && db != url && rec != \"\" && rec != url) {\n      dbId = db;\n      recordId = rec;\n    }\n  } else if (url.includes(\"/collections/\") && url.includes(\"/records/\")) {\n    let db = url.replace(/.*\\/collections\\/([^\\/]+)\\/records\\/.*/, \"$1\");\n    let rec = url.replace(/.*\\/collections\\/[^\\/]+\\/records\\/([^\\/]+)/, \"$1\");\n    if (db != \"\" && db != url && rec != \"\" && rec != url) {\n      dbId = db;\n      recordId = rec;\n    }\n  }\n  //console.log(\"dbId = \" + dbId + \", recordId = \" + recordId);\n\n  result.dbId = dbId;\n  result.recordId = recordId;\n  // Note this is overidden in buildCitation using use options\n  result.ancestryTemplate = \"{{Ancestry Record|\" + result.dbId + \"|\" + result.recordId + \"}}\";\n\n  let domain = url.replace(/.*\\.ancestry.([^\\/]+)\\/.*/, \"$1\");\n  result.domain = domain;\n}\n\nfunction extractRecordPageTitle(document, result) {\n  let titleName = \"\";\n  let titleCollection = \"\";\n\n  let pageTitle = document.querySelector(\"h1.pageTitle > span\");\n  if (pageTitle) {\n    // This is the normal case when there is a name and a title/link\n    titleName = pageTitle.textContent;\n    let pageIntro = document.querySelector(\"h1.pageTitle > p.pageIntro > a\");\n    titleCollection = pageIntro.textContent;\n  } else {\n    let pageTitleLink = document.querySelector(\"h1.pageTitle > a\");\n\n    if (pageTitleLink) {\n      titleCollection = pageTitleLink.textContent;\n    } else {\n      // this is a case that only seems to happen when fetching the page rather than opening it\n      // in a tab.\n      // There is a script that generates the span node we try to read above.\n      // The script is the next sibling to the pageTitleNode\n      let pageTitleNode = document.querySelector(\"h1.pageTitle\");\n      if (pageTitleNode) {\n        //console.log(\"pageTitle found, numChildren = \" + pageTitleNode.children.length);\n        let scriptNode = pageTitleNode.nextElementSibling;\n        if (scriptNode && scriptNode.tagName.toLowerCase() == \"script\") {\n          // we could evaluate the script but that might has security risks.\n          // since we know what the script looks like we could just search it for the string we want.\n          let scriptText = scriptNode.textContent;\n          //console.log(\"scriptText = \");\n          //console.log(scriptText);\n          const titleNamePrefix = 'nameSpanEl.textContent = \"';\n          let startIndex = scriptText.indexOf(titleNamePrefix);\n          if (startIndex != -1) {\n            startIndex += titleNamePrefix.length;\n            let endIndex = scriptText.indexOf('\"', startIndex);\n            if (endIndex != -1) {\n              titleName = scriptText.substring(startIndex, endIndex);\n            }\n          }\n          const titleCollectionPrefix = 'collectionAnchorEl.textContent = \"';\n          startIndex = scriptText.indexOf(titleCollectionPrefix);\n          if (startIndex != -1) {\n            startIndex += titleCollectionPrefix.length;\n            let endIndex = scriptText.indexOf('\"', startIndex);\n            if (endIndex != -1) {\n              titleCollection = scriptText.substring(startIndex, endIndex);\n            }\n          }\n          //console.log(\"titleName = \" + titleName);\n          //console.log(\"titleCollection = \" + titleCollection);\n        }\n      }\n    }\n  }\n\n  result.titleName = titleName;\n  result.titleCollection = titleCollection;\n}\n\nfunction extractRecordData(document, result) {\n  result.recordData = Object.create(null);\n\n  var recordDataRows = document.querySelectorAll(\"#recordData > table > tbody > tr\");\n\n  for (let row of recordDataRows.values()) {\n    // Get the label of the row (must be immediate child)\n    let labelNode = row.querySelector(\":scope > th\");\n    let label = labelNode ? labelNode.textContent : \"\";\n    if (label != \"\") {\n      label = cleanLabel(label);\n      let rowData = row.querySelector(\"td\");\n      let numChildren = rowData.children.length;\n\n      if (numChildren == 0) {\n        let value = rowData.textContent;\n        value = value.replace(/\\s+/g, \" \").trim();\n\n        if (!value.startsWith(\"Search for\")) {\n          //console.log(label + \" \" + value);\n          result.recordData[label] = value;\n        }\n      } else {\n        // there are children. There are several cases to handle here\n        if (rowData.classList.contains(\"p_embedTableTd\")) {\n          // Sub-tables are used for Household Members in census and Records on page in Marriage Reg\n          // If possible put each of the rows of the sub-table in the recordData with line breaks\n          if (label.includes(\"Household\")) {\n            result.household = {};\n            let headings = row.querySelectorAll(\"td.p_embedTableTd th.p_embedTableHead\");\n            if (headings.length > 0) {\n              result.household.headings = [];\n              result.household.members = [];\n              for (let heading of headings) {\n                result.household.headings.push(cleanText(heading.textContent));\n              }\n            }\n          }\n\n          let subTableRows = row.querySelectorAll(\"td.p_embedTableTd tr.p_embedTableRow\");\n          let value = \"\";\n          for (let subRow of subTableRows) {\n            if (value) {\n              value += \"<br/>\";\n            }\n            value += cleanText(subRow.textContent);\n\n            if (result.household !== undefined && result.household.members !== undefined) {\n              let member = {};\n              let subRowCells = subRow.querySelectorAll(\"td\");\n              if (subRowCells.length > 0) {\n                for (let cellIndex = 0; cellIndex < subRowCells.length; cellIndex++) {\n                  let cell = subRowCells[cellIndex];\n                  let memberText = cleanText(cell.textContent);\n                  let heading = result.household.headings[cellIndex];\n                  member[heading] = memberText;\n                  let linkNode = cell.querySelector(\"a\");\n                  if (linkNode) {\n                    let link = linkNode.getAttribute(\"href\");\n                    let extractResult = {};\n                    extractDbAndRecordId(extractResult, link);\n                    member.dbId = extractResult.dbId;\n                    member.recordId = extractResult.recordId;\n                    member.link = link; // used to fetch additional records if needed\n                  }\n                }\n              }\n\n              result.household.members.push(member);\n            }\n          }\n          if (value) {\n            result.recordData[label] = value;\n          }\n        } else {\n          // for now just get the text of all the children.\n          // there can be multiple children for \"Name:\" in death reg\n          // It can also happen for \"Inferred Spouse:\" in 1939 reg.\n          // We used to have code to handle more than one child and one child\n          // differently but now we threat then the same\n          // An example where this does not work is:\n          // https://search.ancestry.com/cgi-bin/sse.dll?indiv=1&db=61311&h=2913\n          let value = rowData.textContent;\n          value = cleanText(value);\n          if (value) {\n            if (!value.startsWith(\"Search for\") && !value.startsWith(\"View \")) {\n              // extra test - sometime the text includes a script. We definitely don't want to include that\n              let scriptNode = rowData.querySelector(\"script\");\n              if (!scriptNode) {\n                // If this is a link we also store the link - this is case we need to read that\n                // additional record (e.g. for a child baptism)\n                let linkNode = rowData.querySelector(\"a\");\n                if (linkNode) {\n                  // there are some links that are for viewing maps or ordering copies\n                  // It seems that these links have 'class=\"link\"' so if that is there ignore\n                  // this row\n                  if (linkNode.className != \"link\") {\n                    result.recordData[label] = value;\n\n                    let linkText = linkNode.textContent;\n                    // ignore links for alternate names\n                    if (!linkText || !linkText.startsWith(\"[\")) {\n                      let link = linkNode.getAttribute(\"href\");\n                      if (link) {\n                        if (!result.linkData) {\n                          result.linkData = {};\n                        }\n                        result.linkData[label] = link;\n                      }\n                    }\n                  }\n                } else {\n                  // no link just use all child text\n                  result.recordData[label] = value;\n                }\n              }\n            }\n          }\n        }\n      }\n    } else {\n      // this row doesn't have a <th> label. Could be something like \"Household members\"\n      if (row.classList.contains(`tableContainerRow`)) {\n        let table = row.querySelector(\"table\");\n\n        // collect all the headings and put them in a string with line breaks between them\n        let headings = table.querySelectorAll(\":scope thead tr th\");\n        let label = \"\";\n        for (let heading of headings) {\n          if (label) {\n            label += \"<br/>\";\n          }\n          label += cleanText(heading.textContent);\n        }\n\n        // now get each row of data and put them all in one string with line breaks between rows\n        let subTableRows = table.querySelectorAll(\":scope tbody tr\");\n        let value = \"\";\n        for (let subRow of subTableRows) {\n          if (value) {\n            value += \"<br/>\";\n          }\n          value += cleanText(subRow.textContent);\n        }\n        if (value) {\n          result.recordData[label] = value;\n        }\n\n        if (label.includes(\"Household\")) {\n          result.household = {};\n          if (headings.length > 0) {\n            result.household.headings = [];\n            result.household.members = [];\n            for (let heading of headings) {\n              result.household.headings.push(cleanText(heading.textContent));\n            }\n          }\n        }\n\n        for (let subRow of subTableRows.values()) {\n          if (result.household !== undefined && result.household.members !== undefined) {\n            let member = {};\n            let subRowCells = subRow.querySelectorAll(\"td\");\n            if (subRowCells.length > 0) {\n              for (let cellIndex = 0; cellIndex < subRowCells.length; cellIndex++) {\n                let cell = subRowCells[cellIndex];\n                let memberText = cleanText(cell.textContent);\n\n                if (cellIndex == 0) {\n                  // check for a closed record\n                  let lcText = memberText.toLowerCase();\n\n                  if (\n                    lcText == \"this record is officially closed.\" ||\n                    (lcText.includes(\"record\") && lcText.includes(\"closed\"))\n                  ) {\n                    member.isClosed = true;\n                    memberText = \"Closed Record\";\n                  }\n                }\n\n                let heading = result.household.headings[cellIndex];\n                member[heading] = memberText;\n\n                let linkNode = cell.querySelector(\"a\");\n                if (linkNode) {\n                  let link = linkNode.getAttribute(\"href\");\n                  let extractResult = {};\n                  extractDbAndRecordId(extractResult, link);\n                  member.dbId = extractResult.dbId;\n                  member.recordId = extractResult.recordId;\n                  member.link = link; // used to fetch additional records if needed\n                }\n              }\n            }\n\n            result.household.members.push(member);\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction extractRecordSourceCitation(document, result) {\n  // test is there are contentViewTabs, this allow you to select between Detail and Source\n  let contentViewTabs = document.querySelector(\"#contentViewTabs\");\n\n  if (contentViewTabs) {\n    // example electoral registers\n    let sourceCitationChildren = document.querySelector(\"#sourceCitation\").children;\n\n    if (sourceCitationChildren.length > 0) {\n      let lastCitationTitle = \"\";\n\n      for (let index = 0; index < sourceCitationChildren.length; index++) {\n        let div = sourceCitationChildren[index];\n\n        let childCitationTitle = div.querySelector(\"h4.citationTitle\");\n        if (childCitationTitle) {\n          let citationTitle = childCitationTitle.textContent;\n          let sourceTextNode = div.querySelector(\"div.sourceText\");\n          if (sourceTextNode) {\n            if (citationTitle == \"Source Citation\") {\n              setSourceCitation(result, sourceTextNode);\n            } else if (citationTitle == \"Source Information\") {\n              setSourceInformation(result, sourceTextNode);\n            } else if (citationTitle == \"Description\") {\n              setSourceDescription(result, sourceTextNode);\n            }\n          }\n        } else {\n          if (div.classList.contains(\"citationTitle\")) {\n            lastCitationTitle = cleanText(div.textContent);\n            //console.log(\"lastCitationTitle = \" + lastCitationTitle);\n          } else if (div.classList.contains(\"sourceText\")) {\n            if (lastCitationTitle == \"Source Information\") {\n              setSourceInformation(result, div);\n            } else if (lastCitationTitle == \"Description\") {\n              setSourceDescription(result, div);\n            }\n          }\n        }\n      }\n    }\n  } else {\n    let sourceAreaDivs = document.querySelectorAll(\"#sourceCitation > div.conBody > div\");\n\n    if (sourceAreaDivs.length > 0) {\n      for (let index = 0; index < sourceAreaDivs.length; index++) {\n        let div = sourceAreaDivs[index];\n        let citationTitleNode = div.querySelector(\"h4.citationTitle\");\n        let sourceTextNode = div.querySelector(\"div.sourceText\");\n        if (citationTitleNode && sourceTextNode) {\n          let citationTitle = citationTitleNode.textContent;\n          if (citationTitle == \"Source Citation\") {\n            setSourceCitation(result, sourceTextNode);\n          } else if (citationTitle == \"Source Information\") {\n            setSourceInformation(result, sourceTextNode);\n          } else if (citationTitle == \"Description\") {\n            setSourceDescription(result, sourceTextNode);\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction extractImageThumb(document, result) {\n  // Note (4 Sep 2021): Ancestry changed the web page to put an extra 2 div between\n  // imageThumb and the \"a\"\n  let thumbNode = document.querySelector(\"#thumbnailTools > div.imageThumb\");\n  //console.log(\"extractImageThumb, thumbNode = \");\n  //console.log(thumbNode);\n\n  if (thumbNode) {\n    let linkNode = thumbNode.querySelector(\"a\");\n    //console.log(\"extractImageThumb, linkNode = \");\n    //console.log(linkNode);\n\n    if (linkNode) {\n      let url = linkNode.getAttribute(\"href\");\n\n      //console.log(\"extractImageThumb, url = \" + url);\n\n      if (url) {\n        // Example:\n        // \"https://www.ancestry.com/imageviewer/collections/7814/images/LNDRG13_157_158-0095?pid=2229789&amp;backurl=https://search.ancestry.com/cgi-bin/sse.dll?dbid%3D7814%26h%3D2229789%26indiv%3Dtry%26o_vc%3DRecord:OtherRecord%26rhSource%3D8753&amp;treeid=&amp;personid=&amp;hintid=&amp;usePUB=true&amp;usePUBJs=true\"\n\n        let dbId = url.replace(/.*imageviewer\\/collections\\/([^\\/]+)\\/images\\/.*/, \"$1\");\n        let recordId = url.replace(/.*\\/images\\/([^?]+).*/, \"$1\");\n\n        result.imageUrl = url;\n        result.imageDbId = dbId;\n        result.imageRecordId = recordId;\n      }\n    } else {\n      // Sometimes in some browsers the linkNode is not there. This happens more when ther user is on the\n      // factEdit modal, especially in Firefox. It seems to be because the link node is generated by a script.\n      // This is a backup that gets the image id from the \"Report a problem\" link.\n      let reportProblemNode = document.querySelector(\"#thumbnailTools a.iconWarning\");\n      if (reportProblemNode) {\n        //console.log(\"extractImageThumb, reportProblemNode = \");\n        //console.log(reportProblemNode);\n\n        // Report problem node looks like:\n        // <a href=\"https://www.ancestry.com/feedback/reportissue?rp=RD&amp;pid=1903047&amp;dbid=2352&amp;imageId=rg14_00802_0395_03&amp;indexOnly=false&amp;backurl=http%3a%2f%2fsearch.ancestry.com%2fcgi-bin%2fsse.dll%3findiv%3d1%26dbid%3d2352%26h%3d1903047%26ssrc%3dpt%26tid%3d86808578%26pid%3d46552199708%26usePUB%3dtrue%26_gl%3d1*vivebz*_ga*MTA5NTMwNjUwOS4xNTg3ODQ4ODc3*_ga_4QT8FMEX30*MTY1MTYwMzE2NS4zMi4xLjE2NTE2MDYzNzkuMA..\" class=\"link icon iconWarning\"><span>Report a problem</span></a>\n\n        let url = reportProblemNode.getAttribute(\"href\");\n\n        //console.log(\"extractImageThumb, reportProblemNode URL = \");\n        //console.log(url);\n\n        if (url) {\n          let imageRecordId = \"\";\n          const imagePrefix = \"imageId=\";\n          let imageIndex = url.indexOf(imagePrefix);\n          if (imageIndex != -1) {\n            let endIndex = url.indexOf(\"&\", imageIndex);\n            if (endIndex != -1) {\n              imageRecordId = url.substring(imageIndex + imagePrefix.length, endIndex);\n              //console.log(\"extractImageThumb, imageRecordId = \" + imageRecordId);\n            }\n          }\n\n          let personId = \"\";\n          const personPrefix = \"pid=\";\n          let personIndex = url.indexOf(personPrefix);\n          if (personIndex != -1) {\n            let endIndex = url.indexOf(\"&\", personIndex);\n            if (endIndex != -1) {\n              personId = url.substring(personIndex + personPrefix.length, endIndex);\n              //console.log(\"extractImageThumb, personId = \" + personId);\n            }\n          }\n\n          if (result.domain && result.dbId && imageRecordId) {\n            result.imageRecordId = imageRecordId;\n            result.imageDbId = result.dbId;\n\n            if (imageRecordId && personId) {\n              // https://www.ancestry.com/imageviewer/collections/61596/images/tna_r39_0773_0773a_021?pid=10189262&treeid=113369578&personid=222372269795&usePUB=true&usePUBJs=true\n              result.imageUrl =\n                \"https://www.\" +\n                result.domain +\n                \"/imageviewer/collections/\" +\n                result.dbId +\n                \"/images/\" +\n                imageRecordId +\n                \"?pid=\" +\n                personId;\n            } else if (imageRecordId) {\n              result.imageUrl =\n                \"https://www.\" + result.domain + \"/imageviewer/collections/\" + result.dbId + \"/images/\" + imageRecordId;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction extractImagePageTitle(document, result) {\n  let titleCollection = \"\";\n  let titleName = \"\";\n\n  let titleCollectionNode = document.querySelector(\"div.collectionTitle > h1 > a\");\n  if (titleCollectionNode) {\n    titleCollection = titleCollectionNode.textContent;\n  }\n\n  let titleForNameNode = document.querySelector(\"div.collectionTitle > h1 > span\");\n  if (titleForNameNode) {\n    let titleForName = titleForNameNode.textContent;\n    titleForName = titleForName.replace(/^\\s*for\\s+/, \"\");\n    titleName = titleForName;\n  }\n\n  result.titleCollection = titleCollection;\n  result.titleName = titleName;\n}\n\nfunction extractImageBrowsePath(document, result) {\n  var wrapperNode = document.querySelector(\"div.browse-path-header > div.breadcrumbWrapper\");\n  let browsePath = \"\";\n  if (wrapperNode) {\n    let children = wrapperNode.children;\n    for (let index = 0; index < children.length; index++) {\n      let child = children[index];\n      if (child.classList.contains(\"breadcrumbItem\")) {\n        browsePath += child.textContent;\n      } else if (child.classList.contains(\"iconArrowRight\")) {\n        browsePath += \" > \";\n      }\n    }\n  }\n\n  if (browsePath) {\n    result.imageBrowsePath = browsePath;\n  }\n}\n\nfunction extractImageHasIndex(document, result) {\n  let indexButton = document.querySelector(\n    \"div.image-viewer-wrapper > div.container-space > div.bottom-container > div.paging-panel.panelTopHeight > div > button.indexToggle\"\n  );\n\n  if (indexButton) {\n    if (indexButton.classList.contains(\"disabled\")) {\n      result.imageHasIndex = false;\n    } else {\n      result.imageHasIndex = true;\n    }\n  }\n}\n\nfunction extractImageNumberAndTotal(document, result) {\n  let pageCountWrap = document.querySelector(\n    \"div.image-viewer-wrapper > div.container-space > div.bottom-container > div.paging-panel.panelTopHeight > div > div.imageNum.pageCountWrapInner\"\n  );\n\n  if (pageCountWrap) {\n    let pageNum = pageCountWrap.querySelector(\"input.page-input\");\n    if (pageNum) {\n      result.imageNumber = pageNum.value;\n    }\n\n    let imageCount = pageCountWrap.querySelector(\"span.imageCountText\");\n    if (imageCount) {\n      result.totalImages = imageCount.textContent;\n    }\n  }\n}\n\nfunction extractImageTemplate(result, url) {\n  // https://www.ancestry.com/imageviewer/collections/7814/images/LNDRG13_157_158-0095?treeid=&personid=&hintid=&usePUB=true&usePUBJs=true&_ga=2.91252573.636488732.1621444272-1095306509.1587848877&pId=2229789\n\n  let db = url.replace(/.*\\/imageviewer\\/collections\\/(\\w+)\\/.*/, \"$1\");\n  let rec = url.replace(/.*\\/images\\/([\\w\\d\\-_.]+).*/, \"$1\");\n  let pid = url.replace(/.*[\\?\\&]pId\\=(\\d+).*/, \"$1\");\n  let domain = url.replace(/.*\\.ancestry.([^\\/]+)\\/.*/, \"$1\");\n\n  if (db != \"\" && db != url && rec != \"\" && rec != url) {\n    result.dbId = db;\n    result.recordId = rec;\n    result.ancestryTemplate = \"{{Ancestry Image|\" + result.dbId + \"|\" + result.recordId + \"}}\";\n  }\n\n  if (pid != \"\" && pid != url) {\n    result.pid = pid;\n  }\n\n  if (domain != \"\" && domain != url) {\n    result.domain = domain;\n  }\n}\n\nfunction extractTreeTemplate(result, url) {\n  // e.g. \"https://www.ancestry.com/family-tree/person/tree/86808578/person/260133535006/facts\"\n  // becomes: {{Ancestry Tree|86808578|260133535006}}\n  const treePrefix = \"/family-tree/person/tree/\";\n  const personPrefix = \"/person/\";\n  let treePrefixIndex = url.indexOf(treePrefix);\n  if (treePrefixIndex != -1) {\n    let treeIndex = treePrefixIndex + treePrefix.length;\n    let personPrefixIndex = url.indexOf(personPrefix, treeIndex);\n    if (personPrefixIndex != -1) {\n      let tree = url.substring(treeIndex, personPrefixIndex);\n      let personIndex = personPrefixIndex + personPrefix.length;\n      let personEndIndex = url.indexOf(\"/\", personIndex);\n      if (personEndIndex != -1) {\n        let person = url.substring(personIndex, personEndIndex);\n        result.ancestryTemplate = \"{{Ancestry Tree|\" + tree + \"|\" + person + \"}}\";\n      }\n    }\n  }\n}\n\nfunction extractTreeMediaTemplate(result, url) {\n  // There are various URL forms:\n  // https://www.ancestry.com/family-tree/tree/86808578/media/d69a7d6a-c773-48b1-ab09-19100cd55c14\n  // https://www.ancestry.com/family-tree/tree/86808578/person/46552198684/media/d69a7d6a-c773-48b1-ab09-19100cd55c14\n  // https://www.ancestry.com/mediaui-viewer/tree/86808578/media/d69a7d6a-c773-48b1-ab09-19100cd55c14\n  // https://www.ancestry.com/mediaui-viewer/tree/86808578/person/46552198684/media/d69a7d6a-c773-48b1-ab09-19100cd55c14?usePUBJs=true\n\n  // becomes: {{Ancestry Tree Media|86808578|d69a7d6a-c773-48b1-ab09-19100cd55c14}}\n\n  const treePrefix = \"/tree/\";\n  const mediaPrefix = \"/media/\";\n  let treePrefixIndex = url.indexOf(treePrefix);\n  if (treePrefixIndex != -1) {\n    let treeIndex = treePrefixIndex + treePrefix.length;\n    let endTreeIndex = url.indexOf(\"/\", treeIndex);\n    if (endTreeIndex != -1) {\n      let tree = url.substring(treeIndex, endTreeIndex);\n\n      let mediaPrefixIndex = url.indexOf(mediaPrefix, endTreeIndex);\n      if (mediaPrefixIndex != -1) {\n        let mediaIndex = mediaPrefixIndex + mediaPrefix.length;\n        let mediaEndIndex = url.indexOf(\"/\", mediaIndex);\n        if (mediaEndIndex == -1) {\n          mediaEndIndex = url.indexOf(\"?\", mediaIndex);\n        }\n        if (mediaEndIndex == -1) {\n          mediaEndIndex = url.length;\n        }\n        if (mediaEndIndex != -1) {\n          let media = url.substring(mediaIndex, mediaEndIndex);\n          result.ancestryTemplate = \"{{Ancestry Tree Media|\" + tree + \"|\" + media + \"}}\";\n        }\n      }\n    }\n  }\n}\n\nfunction extractSharingUrlTemplate(document, result) {\n  let bandidoModal = document.querySelector(\"#modal > #modalFixed .bandido-modal-post-share .share-url\");\n  if (bandidoModal) {\n    let urlNode = bandidoModal.querySelector(\".url-input\");\n\n    if (urlNode) {\n      let url = urlNode.value;\n      // https://www.ancestry.com/sharing/24274440?h=95cf5c&utm_campaign=bandido-webparts&utm_source=post-share-modal&utm_medium=copy-url\n      let num1 = url.replace(/.*\\/sharing\\/(\\w+)\\?h\\=\\w+\\&.*/, \"$1\");\n      let num2 = url.replace(/.*\\/sharing\\/\\w+\\?h\\=(\\w+)\\&.*/, \"$1\");\n\n      result.ancestryTemplate = \"{{Ancestry Sharing|\" + num1 + \"|\" + num2 + \"}}\";\n\n      result.sharingUrl = url.replace(/(^.*\\/sharing\\/\\w+\\?h\\=\\w+)\\&.*/, \"$1\");\n    }\n  }\n}\n\nfunction extractSharingImageFullSizeLink(document, result) {\n  //console.log(\"extractSharingImageFullSizeLink\");\n\n  let attachmentContainer = document.querySelector(\"div.main-container > div.attachment-container\");\n  if (attachmentContainer) {\n    let zoomImg = attachmentContainer.querySelector(\"#zoomModal > #zoomContent > #zoomImg\");\n\n    let imageUrl = \"\";\n\n    if (zoomImg) {\n      imageUrl = zoomImg.getAttribute(\"src\");\n    } else {\n      let img = attachmentContainer.querySelector(\"img.attachment-image\");\n      if (img) {\n        imageUrl = img.getAttribute(\"src\");\n      }\n    }\n\n    //console.log(\"imageUrl is \" + imageUrl);\n\n    if (imageUrl) {\n      let maxParamIndex = imageUrl.toLowerCase().indexOf(\"&maxwidth=\");\n      if (maxParamIndex != -1) {\n        imageUrl = imageUrl.substring(0, maxParamIndex);\n      }\n      result.fullSizeSharingImageUrl = imageUrl;\n    }\n  }\n}\n\nfunction extractSharingImageFullSizeLinkV2(document, result) {\n  //console.log(\"extractSharingImageFullSizeLinkV2\");\n\n  let imageUrl = \"\";\n\n  let img = document.querySelector(\"#landingPageContent div.photo > img\");\n  if (img) {\n    imageUrl = img.getAttribute(\"src\");\n  }\n\n  //console.log(\"imageUrl is \" + imageUrl);\n\n  if (imageUrl) {\n    let maxParamIndex = imageUrl.toLowerCase().indexOf(\"&maxwidth=\");\n    if (maxParamIndex != -1) {\n      imageUrl = imageUrl.substring(0, maxParamIndex);\n    }\n    result.fullSizeSharingImageUrl = imageUrl;\n  }\n}\n\nfunction extractSharingImageFullSizeLinkDiscoveries(document, result) {\n  //console.log(\"extractSharingImageFullSizeLinkV2\");\n\n  let imageUrl = \"\";\n\n  let img = document.querySelector(\"#interactiveImageWidgetContainer > div > img\");\n  if (img) {\n    imageUrl = img.getAttribute(\"src\");\n\n    //console.log(\"imageUrl is \" + imageUrl);\n\n    // Example imageURL:\n    // https://mediasvc.ancestry.com/v2/image/namespaces/2442/media/m-t0627-02314-00441.jpg?securitytoken=xwf0ad4ee289f5eb0ebc4290c1c3a06f8ae8dac110959bce00&download=True&client=discoveryui-contentservice\n\n    // we want to remove the \"&download=True\" and onwards\n    if (imageUrl) {\n      let downloadParamIndex = imageUrl.toLowerCase().indexOf(\"&download=\");\n      if (downloadParamIndex != -1) {\n        imageUrl = imageUrl.substring(0, downloadParamIndex);\n      }\n      result.fullSizeSharingImageUrl = imageUrl;\n\n      const altString = img.getAttribute(\"alt\");\n      if (altString) {\n        result.titleCollection = altString;\n      }\n    }\n  } else {\n    // head > meta:nth-child(18)\n    let meta = document.querySelector(\"head > meta[content^='https://mediasvc.ancestry.']\");\n\n    if (meta) {\n      let imageUrl = meta.getAttribute(\"content\");\n\n      if (imageUrl) {\n        let maxParamIndex = imageUrl.toLowerCase().indexOf(\"&maxwidth=\");\n        if (maxParamIndex != -1) {\n          imageUrl = imageUrl.substring(0, maxParamIndex);\n        }\n        result.fullSizeSharingImageUrl = imageUrl;\n      }\n    }\n  }\n}\n\nfunction extractSharingImageOrRecordDetails(document, result) {\n  //console.log(\"extractSharingImageOrRecordDetails\");\n\n  if (result.fullSizeSharingImageUrl) {\n    // extract the dbId and imageId from image URL\n    // https://mediasvc.ancestry.com/v2/image/namespaces/6598/media/LNDRG12_136_137-0719.jpg?securityToken=xw9176821728cabb787654ce65368a763ae9313f7a99db0000&NamespaceId=6598&Client=Share\n\n    const dbId = result.fullSizeSharingImageUrl.replace(\n      /https?\\:\\/\\/[^\\/]+\\/v2\\/image\\/namespaces\\/([^\\/]+)\\/media\\/([^\\?\\.]+).*/,\n      \"$1\"\n    );\n    const imageId = result.fullSizeSharingImageUrl.replace(\n      /https?\\:\\/\\/[^\\/]+\\/v2\\/image\\/namespaces\\/([^\\/]+)\\/media\\/([^\\?\\.]+).*/,\n      \"$2\"\n    );\n\n    if (dbId && dbId != result.fullSizeSharingImageUrl) {\n      result.dbId = dbId;\n    }\n\n    if (imageId && imageId != result.fullSizeSharingImageUrl) {\n      result.recordId = imageId;\n    }\n  }\n\n  const titleElement = document.querySelector(\"title\");\n  if (titleElement) {\n    let title = titleElement.textContent;\n    const prefix = \"discovered in \";\n    const prefixIndex = title.indexOf(prefix);\n    if (prefixIndex != -1) {\n      let remainder = title.substring(prefixIndex + prefix.length);\n      const suffix = \" collection\";\n      if (remainder.endsWith(suffix)) {\n        remainder = remainder.substring(0, remainder.length - suffix.length);\n      }\n\n      if (remainder) {\n        result.titleCollection = remainder;\n      }\n    }\n  }\n\n  const titleName = document.querySelector(\"h1.subject-name\");\n  if (titleName && titleName.textContent) {\n    result.titleName = titleName.textContent.trim();\n  }\n\n  const personNarrative = document.querySelector(\"p.content-caption\");\n  if (personNarrative && personNarrative.textContent) {\n    result.personNarrative = personNarrative.textContent.trim();\n  }\n\n  // https://www.ancestry.com/sharing/26032858?h=db10de&clickref=1011lwhmEYYb%2C1011lwhmEYYb&adref=&o_xid=01011l4xx5&o_lid=01011l4xx5&o_sch=Affiliate+External\n  let num1 = result.url.replace(/.*\\.ancestry[^\\/]+\\/sharing\\/([^\\?]+)\\?.*/, \"$1\");\n  let num2 = result.url.replace(/.*\\.ancestry[^\\/]+\\/sharing\\/[^\\?]+\\?h\\=([^\\?\\&]+).*/, \"$1\");\n\n  if (num1 && num2) {\n    result.ancestryTemplate = \"{{Ancestry Sharing|\" + num1 + \"|\" + num2 + \"}}\";\n  }\n}\n\nfunction extractSharingImageOrRecordDetailsV2(document, result) {\n  //console.log(\"extractSharingImageOrRecordDetailsV2\");\n\n  const contentDiv = document.querySelector(\"#landingPageContent\");\n  if (contentDiv) {\n    const dataObjectId = contentDiv.getAttribute(\"data-object-id\");\n    if (dataObjectId) {\n      // example: \"7163-38659916\"\n      const dashIndex = dataObjectId.indexOf(\"-\");\n      if (dashIndex != -1) {\n        const dbId = dataObjectId.substring(0, dashIndex);\n        const recordId = dataObjectId.substring(dashIndex + 1);\n        if (dbId && recordId) {\n          result.dbId = dbId;\n          result.recordId = recordId;\n        }\n      }\n    }\n  }\n\n  const titleElement = document.querySelector(\"title\");\n  if (titleElement) {\n    let title = titleElement.textContent;\n    const prefix = \"Discovered by \";\n    if (title.startsWith(prefix)) {\n      const collectionIndex = title.indexOf(\" in \", prefix.length);\n      let remainder = title.substring(collectionIndex + 4);\n      const suffix = \" collection\";\n      if (remainder.endsWith(suffix)) {\n        remainder = remainder.substring(0, remainder.length - suffix.length);\n      }\n\n      if (remainder) {\n        result.titleCollection = remainder;\n      }\n    }\n  }\n\n  const titleName = document.querySelector(\"h2.conTitle\");\n  if (titleName && titleName.textContent) {\n    result.titleName = titleName.textContent.trim();\n  }\n\n  const personNarrative = document.querySelector(\"div.conBody > p\");\n  if (personNarrative && personNarrative.textContent) {\n    result.personNarrative = personNarrative.textContent.trim();\n  }\n\n  // https://www.ancestry.com/sharing/236392?token=3832226f2908014024cae3a4bbf644cc019539bca23c8b7133f0affb1529385c\n\n  let num1 = result.url.replace(/.*\\.ancestry[^\\/]+\\/sharing\\/([^\\?]+)\\?.*/, \"$1\");\n  let num2 = result.url.replace(/.*\\.ancestry[^\\/]+\\/sharing\\/[^\\?]+\\?token\\=([^\\?\\&]+).*/, \"$1\");\n\n  if (num1 && num2) {\n    result.ancestryTemplate = \"{{Ancestry Sharing|\" + num1 + \"|\" + num2 + \"}}\";\n  }\n}\n\nfunction extractSharingImageOrRecordDetailsDiscoveries(document, result) {\n  //console.log(\"extractSharingImageOrRecordDetailsDiscoveries\");\n\n  function getQueryField(regex) {\n    let value = result.url.replace(regex, \"$1\");\n\n    if (value && value != result.url) {\n      return value;\n    }\n  }\n\n  function setFromQueryField(regex, resultField) {\n    let value = getQueryField(regex);\n\n    if (value) {\n      result[resultField] = value;\n    }\n  }\n\n  // url contains dbid and recordid:\n  // https://www.ancestry.com/census-search/discoveries\n  // ?matchdbid=2442&matchrecordid=130891334\n  // &matchrelative=relative&share=1&matchgid=ZKaJzrJ3pquxvoYavEO5Hka1nA1QpAf5Wb\n  // &matchfirstname=Leslie%20R&matchlastname=Cox&matchbirthdate=1931&matchgender=male\n  setFromQueryField(/^.*[&?]matchdbid\\=([^&]+).*/, \"dbId\");\n  setFromQueryField(/^.*[&?]matchrecordid\\=([^&]+).*/, \"recordId\");\n\n  let fullName = \"\";\n  const firstNames = getQueryField(/^.*[&?]matchfirstname\\=([^&]+).*/);\n  const lastNames = getQueryField(/^.*[&?]matchlastname\\=([^&]+).*/);\n  if (firstNames) {\n    fullName = decodeURIComponent(firstNames);\n  }\n  if (lastNames) {\n    if (fullName) {\n      fullName += \" \";\n    }\n    fullName += decodeURIComponent(lastNames);\n  }\n  if (fullName) {\n    result.titleName = fullName;\n  }\n\n  // div.app-card-content > p.text2xlrg.textalt.topSpacing\n\n  const personNarrative = document.querySelector(\"div.app-card-content > p.text2xlrg.textalt.topSpacing\");\n  if (personNarrative && personNarrative.textContent) {\n    result.personNarrative = personNarrative.textContent.trim();\n  }\n}\n\nfunction detectPageType(document, result, url) {\n  if (url.includes(\"/imageviewer/collections/\")) {\n    let bandidoModal = document.querySelector(\"#modal > #modalFixed .bandido-modal-post-share .share-url\");\n    if (bandidoModal) {\n      result.pageType = \"sharingUrl\";\n    } else {\n      result.pageType = \"image\";\n    }\n  } else if (url.includes(\"/person/\") && url.includes(\"/facts\")) {\n    result.pageType = \"personFacts\";\n\n    let citationRecord = document.querySelector(\".modalContents #FactEditComponent section.citationRecord\");\n    if (citationRecord) {\n      result.pageType = \"personSourceCitation\";\n    }\n  } else if (url.includes(\"/discoveries\") || url.includes(\"matchdbid=\")) {\n    result.pageType = \"sharingImageOrRecord\";\n    result.sharingType = \"discoveries\";\n  } else if (url.includes(\"dbid=\") || url.includes(\"db=\") || url.includes(\"discoveryui-content\")) {\n    result.pageType = \"record\";\n  } else if (url.includes(\"/collections/\") && url.includes(\"/records/\")) {\n    result.pageType = \"record\";\n  } else if (url.includes(\"/sharing/\") && url.includes(\"?h=\")) {\n    result.pageType = \"sharingImageOrRecord\";\n    result.sharingType = \"v1\";\n  } else if (url.includes(\"/sharing/\") && url.includes(\"?token=\")) {\n    result.pageType = \"sharingImageOrRecord\";\n    result.sharingType = \"v2\";\n  } else if (url.includes(\"/media/\") && url.includes(\"/tree/\")) {\n    result.pageType = \"treeMedia\";\n  } else {\n    result.pageType = \"unknown\";\n  }\n\n  //console.log(\"detectPageType, result.pageType = \" + result.pageType);\n}\n\nfunction handlePersonSourceCitation(document, result) {\n  // This saves the extra click of having to click on \"View record\"\n\n  let modalContents = document.querySelector(\".modalContents\");\n  if (modalContents) {\n    let factEdit = modalContents.querySelector(\"#FactEditComponent\");\n    if (factEdit) {\n      let link = modalContents.querySelector(\"#viewRecordLink\");\n      if (link) {\n        let recordUrl = link.getAttribute(\"href\");\n\n        // for the normal case this is all we need since we will extract the rest of the data\n        // with a fetch using this. This gets us better data (mainly the link data)\n        result.recordUrl = recordUrl;\n\n        // However, if someones subscription doesn't allow acess to this record we may as well\n        // extract what we can.\n        extractDbAndRecordId(result, recordUrl);\n      }\n\n      let imageLink = modalContents.querySelector(\"#viewRecordImageLink\");\n      if (imageLink) {\n        let url = imageLink.getAttribute(\"href\");\n\n        //console.log(\"handlePersonSourceCitation, url = \" + url);\n\n        if (url) {\n          // Example:\n\n          // \"https://www.ancestry.com/interactive/2352/rg14_14817_0059_03/55565824\n          //    ?backurl=https://www.ancestry.com/family-tree/person/tree/86808578/person/46548439562/facts/citation/323635602069/edit/record\"\n          // clicking on this goes to:\n          // https://www.ancestry.com/imageviewer/collections/2352/images/rg14_14817_0059_03?pId=55565824\n\n          let dbId = \"\";\n          let recordId = \"\";\n\n          if (url.includes(\"/imageviewer/\")) {\n            dbId = url.replace(/.*imageviewer\\/collections\\/([^\\/]+)\\/images\\/.*/, \"$1\");\n            recordId = url.replace(/.*\\/images\\/([^?]+).*/, \"$1\");\n          } else if (url.includes(\"/interactive/\")) {\n            dbId = url.replace(/.*interactive\\/([^\\/]+)\\/[^\\/]+\\/.*/, \"$1\");\n            recordId = url.replace(/.*interactive\\/[^\\/]+\\/([^\\/]+)\\/.*/, \"$1\");\n            let base = url.replace(/(.*)\\/interactive\\/[^\\/]+\\/[^\\/]+\\/.*/, \"$1\");\n            url = base + \"/imageviewer/collections/\" + dbId + \"/images/\" + recordId;\n          }\n\n          result.imageUrl = url;\n          result.imageDbId = dbId;\n          result.imageRecordId = recordId;\n        }\n      }\n\n      let citationRecord = factEdit.querySelector(\"section.citationRecord\");\n      if (citationRecord) {\n        result.recordData = {};\n\n        let titleNode = citationRecord.querySelector(\"h3.conTitle\");\n        if (titleNode) {\n          result.titleCollection = titleNode.textContent;\n        }\n\n        let displayFields = citationRecord.querySelectorAll(\"tr[id^='displayFields']\");\n        for (let displayField of displayFields) {\n          let header = displayField.querySelector(\"th\");\n          let data = displayField.querySelector(\"td\");\n          if (header && data) {\n            let key = header.textContent;\n            let value = data.textContent;\n            if (key && value) {\n              // Marital Status can be \"Marital Status\" if no subscription etc\n              // That would be interpreted as \"Married\" if we set it\n              if (key != value) {\n                const placeholderValues = [\"city\", \"location\", \"gender\"];\n                if (!placeholderValues.includes(value)) {\n                  result.recordData[key] = value;\n                }\n              }\n            }\n          }\n        }\n\n        let householdMembers = citationRecord.querySelectorAll(\"tr[id^='householdMembers']\");\n        if (householdMembers && householdMembers.length > 0) {\n          result.household = {};\n          let tbody = householdMembers[0].parentElement;\n          if (tbody) {\n            let thead = tbody.previousElementSibling;\n            if (thead) {\n              let headingRow = thead.querySelector(\"tr\");\n              if (headingRow) {\n                result.household.headings = [];\n                result.household.members = [];\n                let headings = headingRow.querySelectorAll(\"th\");\n                for (let heading of headings) {\n                  result.household.headings.push(cleanText(heading.textContent));\n                }\n\n                let rows = tbody.querySelectorAll(\"tr\");\n                for (let row of rows) {\n                  let member = {};\n                  let subRowCells = row.querySelectorAll(\"th, td\");\n                  if (subRowCells.length > 0) {\n                    for (let cellIndex = 0; cellIndex < subRowCells.length; cellIndex++) {\n                      let cell = subRowCells[cellIndex];\n                      let memberText = cleanText(cell.textContent);\n                      member[result.household.headings[cellIndex]] = memberText;\n                    }\n                  }\n                  result.household.members.push(member);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      let citationInfo = factEdit.querySelector(\"section.citationInformation\");\n      if (citationInfo) {\n        let body = citationInfo.querySelector(\"div.conBody\");\n        if (body) {\n          let dtNodes = body.querySelectorAll(\"dt\");\n          let ddNodes = body.querySelectorAll(\"dd\");\n          if (dtNodes.length == 1 && ddNodes.length == 1) {\n            let sourceText = cleanText(ddNodes[0].textContent);\n            result.sourceCitation = sourceText;\n          } else {\n            let sourceText = cleanText(body.textContent);\n            result.sourceCitation = sourceText;\n          }\n        }\n      }\n\n      let sourceInfo = factEdit.querySelector(\"section.sourceInformation\");\n      if (sourceInfo) {\n        let body = sourceInfo.querySelector(\"div.conBody\");\n        if (body) {\n          let sourceText = cleanText(body.textContent);\n          result.sourceInformation = sourceText;\n        }\n      }\n    }\n  }\n\n  //console.log(\"handleFactEdit, recordUrl is: \" + result.recordUrl);\n}\n\n// Extracting the HTML elements is working but I am unable to get the given name\n// and last name separately that way. There may be a way via a fetch.\n// This request:\n// https://www.ancestry.com/api/treesui-list/trees/11748183/recentlyviewedperson?expires=1667171853706\n// Gets this response:\n// {\"pid\":\"12992988602\",\"gname\":\"Fannie L.\",\"sname\":\"(Kemper) Money Barber\",\"isLiving\":false}\n// The pid can be compared with the pid of the page to make sure it is the right person.\nfunction handlePersonFacts(document, result) {\n  let personCardContainer = document.querySelector(\"#personCardContainer\");\n  if (personCardContainer) {\n    // There is no way that I have found to find the given name and surname separated in the\n    // HTML elements. But it can be found in a script.\n    let scriptElements = personCardContainer.querySelectorAll(\"script\");\n    for (let scriptElement of scriptElements) {\n      let text = scriptElement.textContent;\n      let fullNameIndex = text.indexOf(\"fullName:\");\n      if (fullNameIndex != -1) {\n        let endIndex = text.indexOf(\"}\", fullNameIndex);\n        if (endIndex != -1) {\n          let fullNameText = text.substring(fullNameIndex, endIndex);\n          let givenName = fullNameText.replace(/fullName: { given: '([^']*)', surname: '(([^']*))',.*/, \"$1\");\n          let surname = fullNameText.replace(/fullName: { given: '([^']*)', surname: '(([^']*))',.*/, \"$2\");\n          if (givenName && givenName != fullNameText) {\n            result.givenName = givenName;\n          }\n          if (surname && surname != fullNameText) {\n            result.surname = surname;\n          }\n        }\n      }\n    }\n\n    let userCardTitle = personCardContainer.querySelector(\".userCardTitle\");\n    if (userCardTitle) {\n      let fullName = userCardTitle.textContent;\n      if (fullName) {\n        result.titleName = fullName;\n      }\n    }\n\n    let userCardEvents = personCardContainer.querySelector(\".userCardEvents\");\n    if (userCardEvents) {\n      let birthDateSpan = userCardEvents.querySelector(\"span.birthDate\");\n      if (birthDateSpan) {\n        result.birthDate = birthDateSpan.textContent;\n      }\n      let birthPlaceSpan = userCardEvents.querySelector(\"span.birthPlace\");\n      if (birthPlaceSpan) {\n        result.birthPlace = birthPlaceSpan.textContent;\n      }\n\n      let deathDateSpan = userCardEvents.querySelector(\"span.deathDate\");\n      if (deathDateSpan) {\n        result.deathDate = deathDateSpan.textContent;\n      }\n      let deathPlaceSpan = userCardEvents.querySelector(\"span.deathPlace\");\n      if (deathPlaceSpan) {\n        result.deathPlace = deathPlaceSpan.textContent;\n      }\n    }\n  }\n\n  let researchListFacts = document.querySelector(\"#researchListFacts\");\n  if (researchListFacts) {\n    let factList = researchListFacts.querySelectorAll(\"li.researchListItem\");\n    for (let fact of factList) {\n      if (fact.classList.contains(\"researchListItemGender\")) {\n        let valueNode = fact.querySelector(\"h4\");\n        if (valueNode) {\n          let gender = valueNode.textContent;\n          if (gender) {\n            result.gender = gender;\n          }\n        }\n      } else {\n        let factItem = fact.querySelector(\"div.factItemFact\");\n        if (factItem) {\n          if (factItem.classList.contains(\"preferredEventMarriage\")) {\n            let marriage = {};\n            let dateNode = factItem.querySelector(\"span.factItemDate\");\n            if (dateNode) {\n              let date = dateNode.textContent;\n              if (date) {\n                marriage.date = date;\n              }\n            }\n            let placeNode = factItem.querySelector(\"span.factItemLocation\");\n            if (placeNode) {\n              let place = placeNode.textContent;\n              if (place) {\n                marriage.place = place;\n              }\n            }\n            let spouseNode = factItem.querySelector(\"h5.userCardTitle\");\n            if (spouseNode) {\n              let spouseName = spouseNode.textContent;\n              if (spouseName) {\n                marriage.spouseName = spouseName;\n              }\n            }\n\n            // add the marriage\n            if (!result.marriages) {\n              result.marriages = [];\n            }\n            result.marriages.push(marriage);\n          }\n        }\n      }\n    }\n  }\n\n  let familySection = document.querySelector(\"#familySection\");\n  if (familySection) {\n    // there can be multiple research lists but parents should always be first one\n    let parentResearchList = familySection.querySelector(\"ul.researchList\");\n\n    let parentItems = parentResearchList.querySelectorAll(\"li.researchListItem\");\n\n    if (parentItems.length == 2) {\n      let fatherItem = parentItems[0];\n      let fatherTitle = fatherItem.querySelector(\"h4.userCardTitle\");\n      if (fatherTitle) {\n        result.fatherName = fatherTitle.textContent;\n      }\n\n      let motherItem = parentItems[1];\n      let motherTitle = motherItem.querySelector(\"h4.userCardTitle\");\n      if (motherTitle) {\n        result.motherName = motherTitle.textContent;\n      }\n    }\n  }\n\n  // #family46552199474 > div.noTopSpacing.userCard.userCardSize2 > div.userCardContent.textWrap > h4\n\n  //console.log(\"handleFactEdit, recordUrl is: \" + result.recordUrl);\n}\n\n// Used by background for extracting a referenced record\nfunction extractRecord(document, url, result) {\n  extractDbAndRecordId(result, url);\n  extractRecordPageTitle(document, result);\n  extractRecordData(document, result);\n  extractImageThumb(document, result);\n  extractRecordSourceCitation(document, result);\n}\n\nfunction extractData(document, url) {\n  var result = {};\n\n  result.url = url; // useful to know what domain this record is from\n\n  //console.log(\"Ancestry extractData, url = \" + url);\n\n  // first determine what kind of page we are in.\n  // - Record page\n  // - Image page\n  // - Image page with sharing url up\n\n  detectPageType(document, result, url);\n\n  //console.log(\"Ancestry pageType is \" + result.pageType);\n\n  if (result.pageType == \"record\") {\n    //console.log(\"This is an Ancestry record page\");\n    extractDbAndRecordId(result, url);\n    extractRecordPageTitle(document, result);\n    extractRecordData(document, result);\n    extractImageThumb(document, result);\n    extractRecordSourceCitation(document, result);\n  } else if (result.pageType == \"image\") {\n    extractImagePageTitle(document, result);\n    extractImageTemplate(result, url);\n    extractImageBrowsePath(document, result);\n    extractImageNumberAndTotal(document, result);\n    extractImageHasIndex(document, result);\n  } else if (result.pageType == \"sharingUrl\") {\n    extractImagePageTitle(document, result);\n    extractSharingUrlTemplate(document, result);\n  } else if (result.pageType == \"sharingImageOrRecord\") {\n    if (result.sharingType == \"v1\") {\n      extractSharingImageFullSizeLink(document, result);\n      extractSharingImageOrRecordDetails(document, result);\n    } else if (result.sharingType == \"v2\") {\n      extractSharingImageFullSizeLinkV2(document, result);\n      extractSharingImageOrRecordDetailsV2(document, result);\n    } else if (result.sharingType == \"discoveries\") {\n      extractSharingImageFullSizeLinkDiscoveries(document, result);\n      extractSharingImageOrRecordDetailsDiscoveries(document, result);\n    }\n  } else if (result.pageType == \"personSourceCitation\") {\n    handlePersonSourceCitation(document, result);\n  } else if (result.pageType == \"personFacts\") {\n    handlePersonFacts(document, result);\n    extractTreeTemplate(result, url);\n  } else if (result.pageType == \"treeMedia\") {\n    extractTreeMediaTemplate(result, url);\n  }\n\n  //console.log(\"result of extractData on Ancestry\");\n  //console.log(result);\n\n  return result;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb24vc2l0ZS9hbmNlc3RyeS9jb3JlL2FuY2VzdHJ5X2V4dHJhY3RfZGF0YS5tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9DQUFvQzs7QUFFcEM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DO0FBQ25DOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQix1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsNkRBQTZEOztBQUU1RjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLGdDQUFnQztBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLGdDQUFnQztBQUN0RTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSwwQkFBMEIsdUNBQXVDO0FBQ2pFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQSwwQkFBMEIsK0JBQStCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSw4R0FBOEcsOElBQThJLFlBQVksY0FBYyxZQUFZLGdCQUFnQjs7QUFFbFQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRFQUE0RSxnQkFBZ0IsY0FBYywrQkFBK0Isb0JBQW9COztBQUU3Sjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUJBQXlCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsNERBQTREO0FBQzdGOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQywyQ0FBMkM7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdCQUFnQjs7QUFFaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsZ0RBQWdEO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQ0FBbUMsNENBQTRDOztBQUUvRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQ0FBaUMsNENBQTRDO0FBQzdFO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGlDQUFpQyw0Q0FBNEM7QUFDN0U7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsZ0NBQWdDO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0EsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxvQkFBb0I7O0FBRXBCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFc0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaXRhdGlvbkV4dHJhY3Rvci8uL2V4dGVuc2lvbi9zaXRlL2FuY2VzdHJ5L2NvcmUvYW5jZXN0cnlfZXh0cmFjdF9kYXRhLm1qcz9mZGZkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjAgUm9iZXJ0IE0gUGF2ZXlcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuZnVuY3Rpb24gY2xlYW5UZXh0KHRleHQpIHtcbiAgaWYgKCF0ZXh0KSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHMrL2csIFwiIFwiKTsgLy8gZWxpbWluYXRlIG5ic3AgYW5kIG11bHRpcGxlIHNwYWNlcyBldGNcblxuICAvLyBzb21ldGltZXMgdGhlIHRleHQgaXMgc29tZXRoaW5nIGxpa2UgXCJaYWNoYXJpYWggRGF2ZXlbWmVjaGFyaWFoIFBhdmV5XVwiXG4gIC8vIGluIHRoYXQgY2FzZSBhZGQgYSBzcGFjZSBiZWZvcmUgdGhlIFtcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvKFteXFxzXSlcXFsvLCBcIiQxIFtcIik7XG5cbiAgdGV4dCA9IHRleHQudHJpbSgpO1xuXG4gIHJldHVybiB0ZXh0O1xufVxuXG5mdW5jdGlvbiBjbGVhbkxhYmVsKHRleHQpIHtcbiAgaWYgKCF0ZXh0KSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHMvZywgXCIgXCIpOyAvLyBlbGltaW5hdGUgbmJzcCBldGNcbiAgdGV4dCA9IHRleHQudHJpbSgpO1xuXG4gIC8vIHJlbW92ZSB0cmFpbGluZyA6XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xccypcXDorJC8sIFwiXCIpO1xuXG4gIHJldHVybiB0ZXh0O1xufVxuXG5mdW5jdGlvbiBzZXRTb3VyY2VDaXRhdGlvbihyZXN1bHQsIHNvdXJjZVRleHROb2RlKSB7XG4gIGxldCBzb3VyY2VUZXh0ID0gY2xlYW5UZXh0KHNvdXJjZVRleHROb2RlLnRleHRDb250ZW50KTtcbiAgcmVzdWx0LnNvdXJjZUNpdGF0aW9uID0gc291cmNlVGV4dDtcbn1cblxuZnVuY3Rpb24gc2V0U291cmNlSW5mb3JtYXRpb24ocmVzdWx0LCBzb3VyY2VUZXh0Tm9kZSkge1xuICBsZXQgc291cmNlVGV4dCA9IGNsZWFuVGV4dChzb3VyY2VUZXh0Tm9kZS50ZXh0Q29udGVudCk7XG4gIHJlc3VsdC5zb3VyY2VJbmZvcm1hdGlvbiA9IHNvdXJjZVRleHQ7XG5cbiAgbGV0IG9yaWdpbmFsRGF0YSA9IFwiXCI7XG5cbiAgY29uc3Qgb3JpZ0RhdGFTdHIgPSBcIk9yaWdpbmFsIGRhdGE6XCI7XG4gIC8vIGZpcnN0IHNlZSBpZiB0aGVyZSBhcmUgY2hpbGQgcGFyYWdyYXBoc1xuICBsZXQgcGFyYWdyYXBoTm9kZXMgPSBzb3VyY2VUZXh0Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKFwicFwiKTtcbiAgaWYgKHBhcmFncmFwaE5vZGVzLmxlbmd0aCA+IDEpIHtcbiAgICBmb3IgKGxldCBwYXJhIG9mIHBhcmFncmFwaE5vZGVzKSB7XG4gICAgICBsZXQgcGFyYVRleHQgPSBjbGVhblRleHQocGFyYS50ZXh0Q29udGVudCk7XG4gICAgICBpZiAocGFyYVRleHQuc3RhcnRzV2l0aChvcmlnRGF0YVN0cikpIHtcbiAgICAgICAgb3JpZ2luYWxEYXRhID0gcGFyYVRleHQuc3Vic3RyaW5nKG9yaWdEYXRhU3RyLmxlbmd0aCkudHJpbSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNvdXJjZVRleHQuc3RhcnRzV2l0aChvcmlnRGF0YVN0cikpIHtcbiAgICAgIG9yaWdpbmFsRGF0YSA9IHNvdXJjZVRleHQuc3Vic3RyaW5nKG9yaWdEYXRhU3RyLmxlbmd0aCkudHJpbSgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcmlnaW5hbERhdGEpIHtcbiAgICByZXN1bHQub3JpZ2luYWxEYXRhID0gY2xlYW5UZXh0KG9yaWdpbmFsRGF0YSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0U291cmNlRGVzY3JpcHRpb24ocmVzdWx0LCBzb3VyY2VUZXh0Tm9kZSkge1xuICBsZXQgc291cmNlVGV4dCA9IGNsZWFuVGV4dChzb3VyY2VUZXh0Tm9kZS50ZXh0Q29udGVudCk7XG4gIHJlc3VsdC5zb3VyY2VEZXNjcmlwdGlvbiA9IHNvdXJjZVRleHQ7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3REYkFuZFJlY29yZElkKHJlc3VsdCwgdXJsKSB7XG4gIC8vY29uc29sZS5sb2coXCJsb2NhdGlvbiBocmVmIGlzXCIpO1xuICAvL2NvbnNvbGUubG9nKHVybCk7XG5cbiAgbGV0IGRiSWQgPSBcIlwiO1xuICBsZXQgcmVjb3JkSWQgPSBcIlwiO1xuICBjb25zdCBkYklkU3RyID0gXCJkYmlkPVwiOyAvLyBjb3VsZCBoYXZlICYgb3IgPyBiZWZvcmUgZGJpZFxuICBjb25zdCBkYlN0ciA9IFwiZGI9XCI7IC8vIE9uIHNvbWUgcmVjb3JkcyAobGlrZSBCaXJ0aCBSZWdpc3RyYXRpb25zKSBpdCBpcyBkYiByYXRoZXIgdGhhbiBkYmlkXG4gIGlmICh1cmwuaW5jbHVkZXMoZGJJZFN0cikgfHwgdXJsLmluY2x1ZGVzKGRiU3RyKSkge1xuICAgIHZhciBkYklkT3JEYlN0ciA9IHVybC5pbmNsdWRlcyhkYklkU3RyKSA/IGRiSWRTdHIgOiBkYlN0cjtcbiAgICBsZXQgZGJJZEluZGV4ID0gdXJsLmluZGV4T2YoZGJJZE9yRGJTdHIpO1xuICAgIGRiSWRJbmRleCArPSBkYklkT3JEYlN0ci5sZW5ndGg7XG4gICAgbGV0IGRiRW5kSW5kZXggPSB1cmwuaW5kZXhPZihcIiZcIiwgZGJJZEluZGV4KTtcbiAgICBpZiAoZGJFbmRJbmRleCAhPSAtMSkge1xuICAgICAgZGJJZCA9IHVybC5zdWJzdHJpbmcoZGJJZEluZGV4LCBkYkVuZEluZGV4KTtcbiAgICAgIGNvbnN0IHJlY1N0ciA9IFwiJmg9XCI7XG4gICAgICBsZXQgcmVjSW5kZXggPSB1cmwuaW5kZXhPZihyZWNTdHIsIGRiRW5kSW5kZXgpO1xuICAgICAgaWYgKHJlY0luZGV4ICE9IC0xKSB7XG4gICAgICAgIHJlY0luZGV4ICs9IHJlY1N0ci5sZW5ndGg7XG4gICAgICAgIGxldCBhbXBJbmRleCA9IHVybC5pbmRleE9mKFwiJlwiLCByZWNJbmRleCk7XG4gICAgICAgIGlmIChhbXBJbmRleCAhPSAtMSkge1xuICAgICAgICAgIHJlY29yZElkID0gdXJsLnN1YnN0cmluZyhyZWNJbmRleCwgYW1wSW5kZXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlY29yZElkID0gdXJsLnN1YnN0cmluZyhyZWNJbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodXJsLmluY2x1ZGVzKFwiZGlzY292ZXJ5dWktY29udGVudFwiKSkge1xuICAgIGxldCByZWMgPSB1cmwucmVwbGFjZSgvLipcXC9kaXNjb3Zlcnl1aS1jb250ZW50XFwvdmlld1xcLyhbXjpdKylcXDouKi8sIFwiJDFcIik7XG4gICAgbGV0IGRiID0gdXJsLnJlcGxhY2UoLy4qXFwvZGlzY292ZXJ5dWktY29udGVudFxcL3ZpZXdcXC9bXjpdK1xcOihcXGQrKS4qLywgXCIkMVwiKTtcbiAgICBpZiAoZGIgIT0gXCJcIiAmJiBkYiAhPSB1cmwgJiYgcmVjICE9IFwiXCIgJiYgcmVjICE9IHVybCkge1xuICAgICAgZGJJZCA9IGRiO1xuICAgICAgcmVjb3JkSWQgPSByZWM7XG4gICAgfVxuICB9IGVsc2UgaWYgKHVybC5pbmNsdWRlcyhcIi9jb2xsZWN0aW9ucy9cIikgJiYgdXJsLmluY2x1ZGVzKFwiL3JlY29yZHMvXCIpKSB7XG4gICAgbGV0IGRiID0gdXJsLnJlcGxhY2UoLy4qXFwvY29sbGVjdGlvbnNcXC8oW15cXC9dKylcXC9yZWNvcmRzXFwvLiovLCBcIiQxXCIpO1xuICAgIGxldCByZWMgPSB1cmwucmVwbGFjZSgvLipcXC9jb2xsZWN0aW9uc1xcL1teXFwvXStcXC9yZWNvcmRzXFwvKFteXFwvXSspLywgXCIkMVwiKTtcbiAgICBpZiAoZGIgIT0gXCJcIiAmJiBkYiAhPSB1cmwgJiYgcmVjICE9IFwiXCIgJiYgcmVjICE9IHVybCkge1xuICAgICAgZGJJZCA9IGRiO1xuICAgICAgcmVjb3JkSWQgPSByZWM7XG4gICAgfVxuICB9XG4gIC8vY29uc29sZS5sb2coXCJkYklkID0gXCIgKyBkYklkICsgXCIsIHJlY29yZElkID0gXCIgKyByZWNvcmRJZCk7XG5cbiAgcmVzdWx0LmRiSWQgPSBkYklkO1xuICByZXN1bHQucmVjb3JkSWQgPSByZWNvcmRJZDtcbiAgLy8gTm90ZSB0aGlzIGlzIG92ZXJpZGRlbiBpbiBidWlsZENpdGF0aW9uIHVzaW5nIHVzZSBvcHRpb25zXG4gIHJlc3VsdC5hbmNlc3RyeVRlbXBsYXRlID0gXCJ7e0FuY2VzdHJ5IFJlY29yZHxcIiArIHJlc3VsdC5kYklkICsgXCJ8XCIgKyByZXN1bHQucmVjb3JkSWQgKyBcIn19XCI7XG5cbiAgbGV0IGRvbWFpbiA9IHVybC5yZXBsYWNlKC8uKlxcLmFuY2VzdHJ5LihbXlxcL10rKVxcLy4qLywgXCIkMVwiKTtcbiAgcmVzdWx0LmRvbWFpbiA9IGRvbWFpbjtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdFJlY29yZFBhZ2VUaXRsZShkb2N1bWVudCwgcmVzdWx0KSB7XG4gIGxldCB0aXRsZU5hbWUgPSBcIlwiO1xuICBsZXQgdGl0bGVDb2xsZWN0aW9uID0gXCJcIjtcblxuICBsZXQgcGFnZVRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImgxLnBhZ2VUaXRsZSA+IHNwYW5cIik7XG4gIGlmIChwYWdlVGl0bGUpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBub3JtYWwgY2FzZSB3aGVuIHRoZXJlIGlzIGEgbmFtZSBhbmQgYSB0aXRsZS9saW5rXG4gICAgdGl0bGVOYW1lID0gcGFnZVRpdGxlLnRleHRDb250ZW50O1xuICAgIGxldCBwYWdlSW50cm8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaDEucGFnZVRpdGxlID4gcC5wYWdlSW50cm8gPiBhXCIpO1xuICAgIHRpdGxlQ29sbGVjdGlvbiA9IHBhZ2VJbnRyby50ZXh0Q29udGVudDtcbiAgfSBlbHNlIHtcbiAgICBsZXQgcGFnZVRpdGxlTGluayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoMS5wYWdlVGl0bGUgPiBhXCIpO1xuXG4gICAgaWYgKHBhZ2VUaXRsZUxpbmspIHtcbiAgICAgIHRpdGxlQ29sbGVjdGlvbiA9IHBhZ2VUaXRsZUxpbmsudGV4dENvbnRlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRoaXMgaXMgYSBjYXNlIHRoYXQgb25seSBzZWVtcyB0byBoYXBwZW4gd2hlbiBmZXRjaGluZyB0aGUgcGFnZSByYXRoZXIgdGhhbiBvcGVuaW5nIGl0XG4gICAgICAvLyBpbiBhIHRhYi5cbiAgICAgIC8vIFRoZXJlIGlzIGEgc2NyaXB0IHRoYXQgZ2VuZXJhdGVzIHRoZSBzcGFuIG5vZGUgd2UgdHJ5IHRvIHJlYWQgYWJvdmUuXG4gICAgICAvLyBUaGUgc2NyaXB0IGlzIHRoZSBuZXh0IHNpYmxpbmcgdG8gdGhlIHBhZ2VUaXRsZU5vZGVcbiAgICAgIGxldCBwYWdlVGl0bGVOb2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImgxLnBhZ2VUaXRsZVwiKTtcbiAgICAgIGlmIChwYWdlVGl0bGVOb2RlKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJwYWdlVGl0bGUgZm91bmQsIG51bUNoaWxkcmVuID0gXCIgKyBwYWdlVGl0bGVOb2RlLmNoaWxkcmVuLmxlbmd0aCk7XG4gICAgICAgIGxldCBzY3JpcHROb2RlID0gcGFnZVRpdGxlTm9kZS5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgIGlmIChzY3JpcHROb2RlICYmIHNjcmlwdE5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09IFwic2NyaXB0XCIpIHtcbiAgICAgICAgICAvLyB3ZSBjb3VsZCBldmFsdWF0ZSB0aGUgc2NyaXB0IGJ1dCB0aGF0IG1pZ2h0IGhhcyBzZWN1cml0eSByaXNrcy5cbiAgICAgICAgICAvLyBzaW5jZSB3ZSBrbm93IHdoYXQgdGhlIHNjcmlwdCBsb29rcyBsaWtlIHdlIGNvdWxkIGp1c3Qgc2VhcmNoIGl0IGZvciB0aGUgc3RyaW5nIHdlIHdhbnQuXG4gICAgICAgICAgbGV0IHNjcmlwdFRleHQgPSBzY3JpcHROb2RlLnRleHRDb250ZW50O1xuICAgICAgICAgIC8vY29uc29sZS5sb2coXCJzY3JpcHRUZXh0ID0gXCIpO1xuICAgICAgICAgIC8vY29uc29sZS5sb2coc2NyaXB0VGV4dCk7XG4gICAgICAgICAgY29uc3QgdGl0bGVOYW1lUHJlZml4ID0gJ25hbWVTcGFuRWwudGV4dENvbnRlbnQgPSBcIic7XG4gICAgICAgICAgbGV0IHN0YXJ0SW5kZXggPSBzY3JpcHRUZXh0LmluZGV4T2YodGl0bGVOYW1lUHJlZml4KTtcbiAgICAgICAgICBpZiAoc3RhcnRJbmRleCAhPSAtMSkge1xuICAgICAgICAgICAgc3RhcnRJbmRleCArPSB0aXRsZU5hbWVQcmVmaXgubGVuZ3RoO1xuICAgICAgICAgICAgbGV0IGVuZEluZGV4ID0gc2NyaXB0VGV4dC5pbmRleE9mKCdcIicsIHN0YXJ0SW5kZXgpO1xuICAgICAgICAgICAgaWYgKGVuZEluZGV4ICE9IC0xKSB7XG4gICAgICAgICAgICAgIHRpdGxlTmFtZSA9IHNjcmlwdFRleHQuc3Vic3RyaW5nKHN0YXJ0SW5kZXgsIGVuZEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgdGl0bGVDb2xsZWN0aW9uUHJlZml4ID0gJ2NvbGxlY3Rpb25BbmNob3JFbC50ZXh0Q29udGVudCA9IFwiJztcbiAgICAgICAgICBzdGFydEluZGV4ID0gc2NyaXB0VGV4dC5pbmRleE9mKHRpdGxlQ29sbGVjdGlvblByZWZpeCk7XG4gICAgICAgICAgaWYgKHN0YXJ0SW5kZXggIT0gLTEpIHtcbiAgICAgICAgICAgIHN0YXJ0SW5kZXggKz0gdGl0bGVDb2xsZWN0aW9uUHJlZml4Lmxlbmd0aDtcbiAgICAgICAgICAgIGxldCBlbmRJbmRleCA9IHNjcmlwdFRleHQuaW5kZXhPZignXCInLCBzdGFydEluZGV4KTtcbiAgICAgICAgICAgIGlmIChlbmRJbmRleCAhPSAtMSkge1xuICAgICAgICAgICAgICB0aXRsZUNvbGxlY3Rpb24gPSBzY3JpcHRUZXh0LnN1YnN0cmluZyhzdGFydEluZGV4LCBlbmRJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vY29uc29sZS5sb2coXCJ0aXRsZU5hbWUgPSBcIiArIHRpdGxlTmFtZSk7XG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhcInRpdGxlQ29sbGVjdGlvbiA9IFwiICsgdGl0bGVDb2xsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJlc3VsdC50aXRsZU5hbWUgPSB0aXRsZU5hbWU7XG4gIHJlc3VsdC50aXRsZUNvbGxlY3Rpb24gPSB0aXRsZUNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RSZWNvcmREYXRhKGRvY3VtZW50LCByZXN1bHQpIHtcbiAgcmVzdWx0LnJlY29yZERhdGEgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHZhciByZWNvcmREYXRhUm93cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIjcmVjb3JkRGF0YSA+IHRhYmxlID4gdGJvZHkgPiB0clwiKTtcblxuICBmb3IgKGxldCByb3cgb2YgcmVjb3JkRGF0YVJvd3MudmFsdWVzKCkpIHtcbiAgICAvLyBHZXQgdGhlIGxhYmVsIG9mIHRoZSByb3cgKG11c3QgYmUgaW1tZWRpYXRlIGNoaWxkKVxuICAgIGxldCBsYWJlbE5vZGUgPSByb3cucXVlcnlTZWxlY3RvcihcIjpzY29wZSA+IHRoXCIpO1xuICAgIGxldCBsYWJlbCA9IGxhYmVsTm9kZSA/IGxhYmVsTm9kZS50ZXh0Q29udGVudCA6IFwiXCI7XG4gICAgaWYgKGxhYmVsICE9IFwiXCIpIHtcbiAgICAgIGxhYmVsID0gY2xlYW5MYWJlbChsYWJlbCk7XG4gICAgICBsZXQgcm93RGF0YSA9IHJvdy5xdWVyeVNlbGVjdG9yKFwidGRcIik7XG4gICAgICBsZXQgbnVtQ2hpbGRyZW4gPSByb3dEYXRhLmNoaWxkcmVuLmxlbmd0aDtcblxuICAgICAgaWYgKG51bUNoaWxkcmVuID09IDApIHtcbiAgICAgICAgbGV0IHZhbHVlID0gcm93RGF0YS50ZXh0Q29udGVudDtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXHMrL2csIFwiIFwiKS50cmltKCk7XG5cbiAgICAgICAgaWYgKCF2YWx1ZS5zdGFydHNXaXRoKFwiU2VhcmNoIGZvclwiKSkge1xuICAgICAgICAgIC8vY29uc29sZS5sb2cobGFiZWwgKyBcIiBcIiArIHZhbHVlKTtcbiAgICAgICAgICByZXN1bHQucmVjb3JkRGF0YVtsYWJlbF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdGhlcmUgYXJlIGNoaWxkcmVuLiBUaGVyZSBhcmUgc2V2ZXJhbCBjYXNlcyB0byBoYW5kbGUgaGVyZVxuICAgICAgICBpZiAocm93RGF0YS5jbGFzc0xpc3QuY29udGFpbnMoXCJwX2VtYmVkVGFibGVUZFwiKSkge1xuICAgICAgICAgIC8vIFN1Yi10YWJsZXMgYXJlIHVzZWQgZm9yIEhvdXNlaG9sZCBNZW1iZXJzIGluIGNlbnN1cyBhbmQgUmVjb3JkcyBvbiBwYWdlIGluIE1hcnJpYWdlIFJlZ1xuICAgICAgICAgIC8vIElmIHBvc3NpYmxlIHB1dCBlYWNoIG9mIHRoZSByb3dzIG9mIHRoZSBzdWItdGFibGUgaW4gdGhlIHJlY29yZERhdGEgd2l0aCBsaW5lIGJyZWFrc1xuICAgICAgICAgIGlmIChsYWJlbC5pbmNsdWRlcyhcIkhvdXNlaG9sZFwiKSkge1xuICAgICAgICAgICAgcmVzdWx0LmhvdXNlaG9sZCA9IHt9O1xuICAgICAgICAgICAgbGV0IGhlYWRpbmdzID0gcm93LnF1ZXJ5U2VsZWN0b3JBbGwoXCJ0ZC5wX2VtYmVkVGFibGVUZCB0aC5wX2VtYmVkVGFibGVIZWFkXCIpO1xuICAgICAgICAgICAgaWYgKGhlYWRpbmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgcmVzdWx0LmhvdXNlaG9sZC5oZWFkaW5ncyA9IFtdO1xuICAgICAgICAgICAgICByZXN1bHQuaG91c2Vob2xkLm1lbWJlcnMgPSBbXTtcbiAgICAgICAgICAgICAgZm9yIChsZXQgaGVhZGluZyBvZiBoZWFkaW5ncykge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5ob3VzZWhvbGQuaGVhZGluZ3MucHVzaChjbGVhblRleHQoaGVhZGluZy50ZXh0Q29udGVudCkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGV0IHN1YlRhYmxlUm93cyA9IHJvdy5xdWVyeVNlbGVjdG9yQWxsKFwidGQucF9lbWJlZFRhYmxlVGQgdHIucF9lbWJlZFRhYmxlUm93XCIpO1xuICAgICAgICAgIGxldCB2YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgZm9yIChsZXQgc3ViUm93IG9mIHN1YlRhYmxlUm93cykge1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgIHZhbHVlICs9IFwiPGJyLz5cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlICs9IGNsZWFuVGV4dChzdWJSb3cudGV4dENvbnRlbnQpO1xuXG4gICAgICAgICAgICBpZiAocmVzdWx0LmhvdXNlaG9sZCAhPT0gdW5kZWZpbmVkICYmIHJlc3VsdC5ob3VzZWhvbGQubWVtYmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGxldCBtZW1iZXIgPSB7fTtcbiAgICAgICAgICAgICAgbGV0IHN1YlJvd0NlbGxzID0gc3ViUm93LnF1ZXJ5U2VsZWN0b3JBbGwoXCJ0ZFwiKTtcbiAgICAgICAgICAgICAgaWYgKHN1YlJvd0NlbGxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjZWxsSW5kZXggPSAwOyBjZWxsSW5kZXggPCBzdWJSb3dDZWxscy5sZW5ndGg7IGNlbGxJbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICBsZXQgY2VsbCA9IHN1YlJvd0NlbGxzW2NlbGxJbmRleF07XG4gICAgICAgICAgICAgICAgICBsZXQgbWVtYmVyVGV4dCA9IGNsZWFuVGV4dChjZWxsLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgICAgICAgIGxldCBoZWFkaW5nID0gcmVzdWx0LmhvdXNlaG9sZC5oZWFkaW5nc1tjZWxsSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgbWVtYmVyW2hlYWRpbmddID0gbWVtYmVyVGV4dDtcbiAgICAgICAgICAgICAgICAgIGxldCBsaW5rTm9kZSA9IGNlbGwucXVlcnlTZWxlY3RvcihcImFcIik7XG4gICAgICAgICAgICAgICAgICBpZiAobGlua05vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmsgPSBsaW5rTm9kZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZXh0cmFjdFJlc3VsdCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBleHRyYWN0RGJBbmRSZWNvcmRJZChleHRyYWN0UmVzdWx0LCBsaW5rKTtcbiAgICAgICAgICAgICAgICAgICAgbWVtYmVyLmRiSWQgPSBleHRyYWN0UmVzdWx0LmRiSWQ7XG4gICAgICAgICAgICAgICAgICAgIG1lbWJlci5yZWNvcmRJZCA9IGV4dHJhY3RSZXN1bHQucmVjb3JkSWQ7XG4gICAgICAgICAgICAgICAgICAgIG1lbWJlci5saW5rID0gbGluazsgLy8gdXNlZCB0byBmZXRjaCBhZGRpdGlvbmFsIHJlY29yZHMgaWYgbmVlZGVkXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmVzdWx0LmhvdXNlaG9sZC5tZW1iZXJzLnB1c2gobWVtYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICByZXN1bHQucmVjb3JkRGF0YVtsYWJlbF0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZm9yIG5vdyBqdXN0IGdldCB0aGUgdGV4dCBvZiBhbGwgdGhlIGNoaWxkcmVuLlxuICAgICAgICAgIC8vIHRoZXJlIGNhbiBiZSBtdWx0aXBsZSBjaGlsZHJlbiBmb3IgXCJOYW1lOlwiIGluIGRlYXRoIHJlZ1xuICAgICAgICAgIC8vIEl0IGNhbiBhbHNvIGhhcHBlbiBmb3IgXCJJbmZlcnJlZCBTcG91c2U6XCIgaW4gMTkzOSByZWcuXG4gICAgICAgICAgLy8gV2UgdXNlZCB0byBoYXZlIGNvZGUgdG8gaGFuZGxlIG1vcmUgdGhhbiBvbmUgY2hpbGQgYW5kIG9uZSBjaGlsZFxuICAgICAgICAgIC8vIGRpZmZlcmVudGx5IGJ1dCBub3cgd2UgdGhyZWF0IHRoZW4gdGhlIHNhbWVcbiAgICAgICAgICAvLyBBbiBleGFtcGxlIHdoZXJlIHRoaXMgZG9lcyBub3Qgd29yayBpczpcbiAgICAgICAgICAvLyBodHRwczovL3NlYXJjaC5hbmNlc3RyeS5jb20vY2dpLWJpbi9zc2UuZGxsP2luZGl2PTEmZGI9NjEzMTEmaD0yOTEzXG4gICAgICAgICAgbGV0IHZhbHVlID0gcm93RGF0YS50ZXh0Q29udGVudDtcbiAgICAgICAgICB2YWx1ZSA9IGNsZWFuVGV4dCh2YWx1ZSk7XG4gICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIXZhbHVlLnN0YXJ0c1dpdGgoXCJTZWFyY2ggZm9yXCIpICYmICF2YWx1ZS5zdGFydHNXaXRoKFwiVmlldyBcIikpIHtcbiAgICAgICAgICAgICAgLy8gZXh0cmEgdGVzdCAtIHNvbWV0aW1lIHRoZSB0ZXh0IGluY2x1ZGVzIGEgc2NyaXB0LiBXZSBkZWZpbml0ZWx5IGRvbid0IHdhbnQgdG8gaW5jbHVkZSB0aGF0XG4gICAgICAgICAgICAgIGxldCBzY3JpcHROb2RlID0gcm93RGF0YS5xdWVyeVNlbGVjdG9yKFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgICBpZiAoIXNjcmlwdE5vZGUpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGlzIGEgbGluayB3ZSBhbHNvIHN0b3JlIHRoZSBsaW5rIC0gdGhpcyBpcyBjYXNlIHdlIG5lZWQgdG8gcmVhZCB0aGF0XG4gICAgICAgICAgICAgICAgLy8gYWRkaXRpb25hbCByZWNvcmQgKGUuZy4gZm9yIGEgY2hpbGQgYmFwdGlzbSlcbiAgICAgICAgICAgICAgICBsZXQgbGlua05vZGUgPSByb3dEYXRhLnF1ZXJ5U2VsZWN0b3IoXCJhXCIpO1xuICAgICAgICAgICAgICAgIGlmIChsaW5rTm9kZSkge1xuICAgICAgICAgICAgICAgICAgLy8gdGhlcmUgYXJlIHNvbWUgbGlua3MgdGhhdCBhcmUgZm9yIHZpZXdpbmcgbWFwcyBvciBvcmRlcmluZyBjb3BpZXNcbiAgICAgICAgICAgICAgICAgIC8vIEl0IHNlZW1zIHRoYXQgdGhlc2UgbGlua3MgaGF2ZSAnY2xhc3M9XCJsaW5rXCInIHNvIGlmIHRoYXQgaXMgdGhlcmUgaWdub3JlXG4gICAgICAgICAgICAgICAgICAvLyB0aGlzIHJvd1xuICAgICAgICAgICAgICAgICAgaWYgKGxpbmtOb2RlLmNsYXNzTmFtZSAhPSBcImxpbmtcIikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucmVjb3JkRGF0YVtsYWJlbF0gPSB2YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgbGlua1RleHQgPSBsaW5rTm9kZS50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlIGxpbmtzIGZvciBhbHRlcm5hdGUgbmFtZXNcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFsaW5rVGV4dCB8fCAhbGlua1RleHQuc3RhcnRzV2l0aChcIltcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICBsZXQgbGluayA9IGxpbmtOb2RlLmdldEF0dHJpYnV0ZShcImhyZWZcIik7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0LmxpbmtEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5saW5rRGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmxpbmtEYXRhW2xhYmVsXSA9IGxpbms7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIC8vIG5vIGxpbmsganVzdCB1c2UgYWxsIGNoaWxkIHRleHRcbiAgICAgICAgICAgICAgICAgIHJlc3VsdC5yZWNvcmREYXRhW2xhYmVsXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0aGlzIHJvdyBkb2Vzbid0IGhhdmUgYSA8dGg+IGxhYmVsLiBDb3VsZCBiZSBzb21ldGhpbmcgbGlrZSBcIkhvdXNlaG9sZCBtZW1iZXJzXCJcbiAgICAgIGlmIChyb3cuY2xhc3NMaXN0LmNvbnRhaW5zKGB0YWJsZUNvbnRhaW5lclJvd2ApKSB7XG4gICAgICAgIGxldCB0YWJsZSA9IHJvdy5xdWVyeVNlbGVjdG9yKFwidGFibGVcIik7XG5cbiAgICAgICAgLy8gY29sbGVjdCBhbGwgdGhlIGhlYWRpbmdzIGFuZCBwdXQgdGhlbSBpbiBhIHN0cmluZyB3aXRoIGxpbmUgYnJlYWtzIGJldHdlZW4gdGhlbVxuICAgICAgICBsZXQgaGVhZGluZ3MgPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKFwiOnNjb3BlIHRoZWFkIHRyIHRoXCIpO1xuICAgICAgICBsZXQgbGFiZWwgPSBcIlwiO1xuICAgICAgICBmb3IgKGxldCBoZWFkaW5nIG9mIGhlYWRpbmdzKSB7XG4gICAgICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgICAgICBsYWJlbCArPSBcIjxici8+XCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxhYmVsICs9IGNsZWFuVGV4dChoZWFkaW5nLnRleHRDb250ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG5vdyBnZXQgZWFjaCByb3cgb2YgZGF0YSBhbmQgcHV0IHRoZW0gYWxsIGluIG9uZSBzdHJpbmcgd2l0aCBsaW5lIGJyZWFrcyBiZXR3ZWVuIHJvd3NcbiAgICAgICAgbGV0IHN1YlRhYmxlUm93cyA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6c2NvcGUgdGJvZHkgdHJcIik7XG4gICAgICAgIGxldCB2YWx1ZSA9IFwiXCI7XG4gICAgICAgIGZvciAobGV0IHN1YlJvdyBvZiBzdWJUYWJsZVJvd3MpIHtcbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhbHVlICs9IFwiPGJyLz5cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWUgKz0gY2xlYW5UZXh0KHN1YlJvdy50ZXh0Q29udGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0LnJlY29yZERhdGFbbGFiZWxdID0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGFiZWwuaW5jbHVkZXMoXCJIb3VzZWhvbGRcIikpIHtcbiAgICAgICAgICByZXN1bHQuaG91c2Vob2xkID0ge307XG4gICAgICAgICAgaWYgKGhlYWRpbmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlc3VsdC5ob3VzZWhvbGQuaGVhZGluZ3MgPSBbXTtcbiAgICAgICAgICAgIHJlc3VsdC5ob3VzZWhvbGQubWVtYmVycyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaGVhZGluZyBvZiBoZWFkaW5ncykge1xuICAgICAgICAgICAgICByZXN1bHQuaG91c2Vob2xkLmhlYWRpbmdzLnB1c2goY2xlYW5UZXh0KGhlYWRpbmcudGV4dENvbnRlbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBzdWJSb3cgb2Ygc3ViVGFibGVSb3dzLnZhbHVlcygpKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdC5ob3VzZWhvbGQgIT09IHVuZGVmaW5lZCAmJiByZXN1bHQuaG91c2Vob2xkLm1lbWJlcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGV0IG1lbWJlciA9IHt9O1xuICAgICAgICAgICAgbGV0IHN1YlJvd0NlbGxzID0gc3ViUm93LnF1ZXJ5U2VsZWN0b3JBbGwoXCJ0ZFwiKTtcbiAgICAgICAgICAgIGlmIChzdWJSb3dDZWxscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGZvciAobGV0IGNlbGxJbmRleCA9IDA7IGNlbGxJbmRleCA8IHN1YlJvd0NlbGxzLmxlbmd0aDsgY2VsbEluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY2VsbCA9IHN1YlJvd0NlbGxzW2NlbGxJbmRleF07XG4gICAgICAgICAgICAgICAgbGV0IG1lbWJlclRleHQgPSBjbGVhblRleHQoY2VsbC50ZXh0Q29udGVudCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2VsbEluZGV4ID09IDApIHtcbiAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGZvciBhIGNsb3NlZCByZWNvcmRcbiAgICAgICAgICAgICAgICAgIGxldCBsY1RleHQgPSBtZW1iZXJUZXh0LnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgbGNUZXh0ID09IFwidGhpcyByZWNvcmQgaXMgb2ZmaWNpYWxseSBjbG9zZWQuXCIgfHxcbiAgICAgICAgICAgICAgICAgICAgKGxjVGV4dC5pbmNsdWRlcyhcInJlY29yZFwiKSAmJiBsY1RleHQuaW5jbHVkZXMoXCJjbG9zZWRcIikpXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgbWVtYmVyLmlzQ2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbWVtYmVyVGV4dCA9IFwiQ2xvc2VkIFJlY29yZFwiO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBoZWFkaW5nID0gcmVzdWx0LmhvdXNlaG9sZC5oZWFkaW5nc1tjZWxsSW5kZXhdO1xuICAgICAgICAgICAgICAgIG1lbWJlcltoZWFkaW5nXSA9IG1lbWJlclRleHQ7XG5cbiAgICAgICAgICAgICAgICBsZXQgbGlua05vZGUgPSBjZWxsLnF1ZXJ5U2VsZWN0b3IoXCJhXCIpO1xuICAgICAgICAgICAgICAgIGlmIChsaW5rTm9kZSkge1xuICAgICAgICAgICAgICAgICAgbGV0IGxpbmsgPSBsaW5rTm9kZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuICAgICAgICAgICAgICAgICAgbGV0IGV4dHJhY3RSZXN1bHQgPSB7fTtcbiAgICAgICAgICAgICAgICAgIGV4dHJhY3REYkFuZFJlY29yZElkKGV4dHJhY3RSZXN1bHQsIGxpbmspO1xuICAgICAgICAgICAgICAgICAgbWVtYmVyLmRiSWQgPSBleHRyYWN0UmVzdWx0LmRiSWQ7XG4gICAgICAgICAgICAgICAgICBtZW1iZXIucmVjb3JkSWQgPSBleHRyYWN0UmVzdWx0LnJlY29yZElkO1xuICAgICAgICAgICAgICAgICAgbWVtYmVyLmxpbmsgPSBsaW5rOyAvLyB1c2VkIHRvIGZldGNoIGFkZGl0aW9uYWwgcmVjb3JkcyBpZiBuZWVkZWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVzdWx0LmhvdXNlaG9sZC5tZW1iZXJzLnB1c2gobWVtYmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFJlY29yZFNvdXJjZUNpdGF0aW9uKGRvY3VtZW50LCByZXN1bHQpIHtcbiAgLy8gdGVzdCBpcyB0aGVyZSBhcmUgY29udGVudFZpZXdUYWJzLCB0aGlzIGFsbG93IHlvdSB0byBzZWxlY3QgYmV0d2VlbiBEZXRhaWwgYW5kIFNvdXJjZVxuICBsZXQgY29udGVudFZpZXdUYWJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjb250ZW50Vmlld1RhYnNcIik7XG5cbiAgaWYgKGNvbnRlbnRWaWV3VGFicykge1xuICAgIC8vIGV4YW1wbGUgZWxlY3RvcmFsIHJlZ2lzdGVyc1xuICAgIGxldCBzb3VyY2VDaXRhdGlvbkNoaWxkcmVuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzb3VyY2VDaXRhdGlvblwiKS5jaGlsZHJlbjtcblxuICAgIGlmIChzb3VyY2VDaXRhdGlvbkNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIGxldCBsYXN0Q2l0YXRpb25UaXRsZSA9IFwiXCI7XG5cbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBzb3VyY2VDaXRhdGlvbkNoaWxkcmVuLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBsZXQgZGl2ID0gc291cmNlQ2l0YXRpb25DaGlsZHJlbltpbmRleF07XG5cbiAgICAgICAgbGV0IGNoaWxkQ2l0YXRpb25UaXRsZSA9IGRpdi5xdWVyeVNlbGVjdG9yKFwiaDQuY2l0YXRpb25UaXRsZVwiKTtcbiAgICAgICAgaWYgKGNoaWxkQ2l0YXRpb25UaXRsZSkge1xuICAgICAgICAgIGxldCBjaXRhdGlvblRpdGxlID0gY2hpbGRDaXRhdGlvblRpdGxlLnRleHRDb250ZW50O1xuICAgICAgICAgIGxldCBzb3VyY2VUZXh0Tm9kZSA9IGRpdi5xdWVyeVNlbGVjdG9yKFwiZGl2LnNvdXJjZVRleHRcIik7XG4gICAgICAgICAgaWYgKHNvdXJjZVRleHROb2RlKSB7XG4gICAgICAgICAgICBpZiAoY2l0YXRpb25UaXRsZSA9PSBcIlNvdXJjZSBDaXRhdGlvblwiKSB7XG4gICAgICAgICAgICAgIHNldFNvdXJjZUNpdGF0aW9uKHJlc3VsdCwgc291cmNlVGV4dE5vZGUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaXRhdGlvblRpdGxlID09IFwiU291cmNlIEluZm9ybWF0aW9uXCIpIHtcbiAgICAgICAgICAgICAgc2V0U291cmNlSW5mb3JtYXRpb24ocmVzdWx0LCBzb3VyY2VUZXh0Tm9kZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNpdGF0aW9uVGl0bGUgPT0gXCJEZXNjcmlwdGlvblwiKSB7XG4gICAgICAgICAgICAgIHNldFNvdXJjZURlc2NyaXB0aW9uKHJlc3VsdCwgc291cmNlVGV4dE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZGl2LmNsYXNzTGlzdC5jb250YWlucyhcImNpdGF0aW9uVGl0bGVcIikpIHtcbiAgICAgICAgICAgIGxhc3RDaXRhdGlvblRpdGxlID0gY2xlYW5UZXh0KGRpdi50ZXh0Q29udGVudCk7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwibGFzdENpdGF0aW9uVGl0bGUgPSBcIiArIGxhc3RDaXRhdGlvblRpdGxlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGRpdi5jbGFzc0xpc3QuY29udGFpbnMoXCJzb3VyY2VUZXh0XCIpKSB7XG4gICAgICAgICAgICBpZiAobGFzdENpdGF0aW9uVGl0bGUgPT0gXCJTb3VyY2UgSW5mb3JtYXRpb25cIikge1xuICAgICAgICAgICAgICBzZXRTb3VyY2VJbmZvcm1hdGlvbihyZXN1bHQsIGRpdik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3RDaXRhdGlvblRpdGxlID09IFwiRGVzY3JpcHRpb25cIikge1xuICAgICAgICAgICAgICBzZXRTb3VyY2VEZXNjcmlwdGlvbihyZXN1bHQsIGRpdik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBzb3VyY2VBcmVhRGl2cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIjc291cmNlQ2l0YXRpb24gPiBkaXYuY29uQm9keSA+IGRpdlwiKTtcblxuICAgIGlmIChzb3VyY2VBcmVhRGl2cy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgc291cmNlQXJlYURpdnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGxldCBkaXYgPSBzb3VyY2VBcmVhRGl2c1tpbmRleF07XG4gICAgICAgIGxldCBjaXRhdGlvblRpdGxlTm9kZSA9IGRpdi5xdWVyeVNlbGVjdG9yKFwiaDQuY2l0YXRpb25UaXRsZVwiKTtcbiAgICAgICAgbGV0IHNvdXJjZVRleHROb2RlID0gZGl2LnF1ZXJ5U2VsZWN0b3IoXCJkaXYuc291cmNlVGV4dFwiKTtcbiAgICAgICAgaWYgKGNpdGF0aW9uVGl0bGVOb2RlICYmIHNvdXJjZVRleHROb2RlKSB7XG4gICAgICAgICAgbGV0IGNpdGF0aW9uVGl0bGUgPSBjaXRhdGlvblRpdGxlTm9kZS50ZXh0Q29udGVudDtcbiAgICAgICAgICBpZiAoY2l0YXRpb25UaXRsZSA9PSBcIlNvdXJjZSBDaXRhdGlvblwiKSB7XG4gICAgICAgICAgICBzZXRTb3VyY2VDaXRhdGlvbihyZXN1bHQsIHNvdXJjZVRleHROb2RlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNpdGF0aW9uVGl0bGUgPT0gXCJTb3VyY2UgSW5mb3JtYXRpb25cIikge1xuICAgICAgICAgICAgc2V0U291cmNlSW5mb3JtYXRpb24ocmVzdWx0LCBzb3VyY2VUZXh0Tm9kZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaXRhdGlvblRpdGxlID09IFwiRGVzY3JpcHRpb25cIikge1xuICAgICAgICAgICAgc2V0U291cmNlRGVzY3JpcHRpb24ocmVzdWx0LCBzb3VyY2VUZXh0Tm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RJbWFnZVRodW1iKGRvY3VtZW50LCByZXN1bHQpIHtcbiAgLy8gTm90ZSAoNCBTZXAgMjAyMSk6IEFuY2VzdHJ5IGNoYW5nZWQgdGhlIHdlYiBwYWdlIHRvIHB1dCBhbiBleHRyYSAyIGRpdiBiZXR3ZWVuXG4gIC8vIGltYWdlVGh1bWIgYW5kIHRoZSBcImFcIlxuICBsZXQgdGh1bWJOb2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0aHVtYm5haWxUb29scyA+IGRpdi5pbWFnZVRodW1iXCIpO1xuICAvL2NvbnNvbGUubG9nKFwiZXh0cmFjdEltYWdlVGh1bWIsIHRodW1iTm9kZSA9IFwiKTtcbiAgLy9jb25zb2xlLmxvZyh0aHVtYk5vZGUpO1xuXG4gIGlmICh0aHVtYk5vZGUpIHtcbiAgICBsZXQgbGlua05vZGUgPSB0aHVtYk5vZGUucXVlcnlTZWxlY3RvcihcImFcIik7XG4gICAgLy9jb25zb2xlLmxvZyhcImV4dHJhY3RJbWFnZVRodW1iLCBsaW5rTm9kZSA9IFwiKTtcbiAgICAvL2NvbnNvbGUubG9nKGxpbmtOb2RlKTtcblxuICAgIGlmIChsaW5rTm9kZSkge1xuICAgICAgbGV0IHVybCA9IGxpbmtOb2RlLmdldEF0dHJpYnV0ZShcImhyZWZcIik7XG5cbiAgICAgIC8vY29uc29sZS5sb2coXCJleHRyYWN0SW1hZ2VUaHVtYiwgdXJsID0gXCIgKyB1cmwpO1xuXG4gICAgICBpZiAodXJsKSB7XG4gICAgICAgIC8vIEV4YW1wbGU6XG4gICAgICAgIC8vIFwiaHR0cHM6Ly93d3cuYW5jZXN0cnkuY29tL2ltYWdldmlld2VyL2NvbGxlY3Rpb25zLzc4MTQvaW1hZ2VzL0xORFJHMTNfMTU3XzE1OC0wMDk1P3BpZD0yMjI5Nzg5JmFtcDtiYWNrdXJsPWh0dHBzOi8vc2VhcmNoLmFuY2VzdHJ5LmNvbS9jZ2ktYmluL3NzZS5kbGw/ZGJpZCUzRDc4MTQlMjZoJTNEMjIyOTc4OSUyNmluZGl2JTNEdHJ5JTI2b192YyUzRFJlY29yZDpPdGhlclJlY29yZCUyNnJoU291cmNlJTNEODc1MyZhbXA7dHJlZWlkPSZhbXA7cGVyc29uaWQ9JmFtcDtoaW50aWQ9JmFtcDt1c2VQVUI9dHJ1ZSZhbXA7dXNlUFVCSnM9dHJ1ZVwiXG5cbiAgICAgICAgbGV0IGRiSWQgPSB1cmwucmVwbGFjZSgvLippbWFnZXZpZXdlclxcL2NvbGxlY3Rpb25zXFwvKFteXFwvXSspXFwvaW1hZ2VzXFwvLiovLCBcIiQxXCIpO1xuICAgICAgICBsZXQgcmVjb3JkSWQgPSB1cmwucmVwbGFjZSgvLipcXC9pbWFnZXNcXC8oW14/XSspLiovLCBcIiQxXCIpO1xuXG4gICAgICAgIHJlc3VsdC5pbWFnZVVybCA9IHVybDtcbiAgICAgICAgcmVzdWx0LmltYWdlRGJJZCA9IGRiSWQ7XG4gICAgICAgIHJlc3VsdC5pbWFnZVJlY29yZElkID0gcmVjb3JkSWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNvbWV0aW1lcyBpbiBzb21lIGJyb3dzZXJzIHRoZSBsaW5rTm9kZSBpcyBub3QgdGhlcmUuIFRoaXMgaGFwcGVucyBtb3JlIHdoZW4gdGhlciB1c2VyIGlzIG9uIHRoZVxuICAgICAgLy8gZmFjdEVkaXQgbW9kYWwsIGVzcGVjaWFsbHkgaW4gRmlyZWZveC4gSXQgc2VlbXMgdG8gYmUgYmVjYXVzZSB0aGUgbGluayBub2RlIGlzIGdlbmVyYXRlZCBieSBhIHNjcmlwdC5cbiAgICAgIC8vIFRoaXMgaXMgYSBiYWNrdXAgdGhhdCBnZXRzIHRoZSBpbWFnZSBpZCBmcm9tIHRoZSBcIlJlcG9ydCBhIHByb2JsZW1cIiBsaW5rLlxuICAgICAgbGV0IHJlcG9ydFByb2JsZW1Ob2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0aHVtYm5haWxUb29scyBhLmljb25XYXJuaW5nXCIpO1xuICAgICAgaWYgKHJlcG9ydFByb2JsZW1Ob2RlKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJleHRyYWN0SW1hZ2VUaHVtYiwgcmVwb3J0UHJvYmxlbU5vZGUgPSBcIik7XG4gICAgICAgIC8vY29uc29sZS5sb2cocmVwb3J0UHJvYmxlbU5vZGUpO1xuXG4gICAgICAgIC8vIFJlcG9ydCBwcm9ibGVtIG5vZGUgbG9va3MgbGlrZTpcbiAgICAgICAgLy8gPGEgaHJlZj1cImh0dHBzOi8vd3d3LmFuY2VzdHJ5LmNvbS9mZWVkYmFjay9yZXBvcnRpc3N1ZT9ycD1SRCZhbXA7cGlkPTE5MDMwNDcmYW1wO2RiaWQ9MjM1MiZhbXA7aW1hZ2VJZD1yZzE0XzAwODAyXzAzOTVfMDMmYW1wO2luZGV4T25seT1mYWxzZSZhbXA7YmFja3VybD1odHRwJTNhJTJmJTJmc2VhcmNoLmFuY2VzdHJ5LmNvbSUyZmNnaS1iaW4lMmZzc2UuZGxsJTNmaW5kaXYlM2QxJTI2ZGJpZCUzZDIzNTIlMjZoJTNkMTkwMzA0NyUyNnNzcmMlM2RwdCUyNnRpZCUzZDg2ODA4NTc4JTI2cGlkJTNkNDY1NTIxOTk3MDglMjZ1c2VQVUIlM2R0cnVlJTI2X2dsJTNkMSp2aXZlYnoqX2dhKk1UQTVOVE13TmpVd09TNHhOVGczT0RRNE9EYzMqX2dhXzRRVDhGTUVYMzAqTVRZMU1UWXdNekUyTlM0ek1pNHhMakUyTlRFMk1EWXpOemt1TUEuLlwiIGNsYXNzPVwibGluayBpY29uIGljb25XYXJuaW5nXCI+PHNwYW4+UmVwb3J0IGEgcHJvYmxlbTwvc3Bhbj48L2E+XG5cbiAgICAgICAgbGV0IHVybCA9IHJlcG9ydFByb2JsZW1Ob2RlLmdldEF0dHJpYnV0ZShcImhyZWZcIik7XG5cbiAgICAgICAgLy9jb25zb2xlLmxvZyhcImV4dHJhY3RJbWFnZVRodW1iLCByZXBvcnRQcm9ibGVtTm9kZSBVUkwgPSBcIik7XG4gICAgICAgIC8vY29uc29sZS5sb2codXJsKTtcblxuICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgbGV0IGltYWdlUmVjb3JkSWQgPSBcIlwiO1xuICAgICAgICAgIGNvbnN0IGltYWdlUHJlZml4ID0gXCJpbWFnZUlkPVwiO1xuICAgICAgICAgIGxldCBpbWFnZUluZGV4ID0gdXJsLmluZGV4T2YoaW1hZ2VQcmVmaXgpO1xuICAgICAgICAgIGlmIChpbWFnZUluZGV4ICE9IC0xKSB7XG4gICAgICAgICAgICBsZXQgZW5kSW5kZXggPSB1cmwuaW5kZXhPZihcIiZcIiwgaW1hZ2VJbmRleCk7XG4gICAgICAgICAgICBpZiAoZW5kSW5kZXggIT0gLTEpIHtcbiAgICAgICAgICAgICAgaW1hZ2VSZWNvcmRJZCA9IHVybC5zdWJzdHJpbmcoaW1hZ2VJbmRleCArIGltYWdlUHJlZml4Lmxlbmd0aCwgZW5kSW5kZXgpO1xuICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiZXh0cmFjdEltYWdlVGh1bWIsIGltYWdlUmVjb3JkSWQgPSBcIiArIGltYWdlUmVjb3JkSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGxldCBwZXJzb25JZCA9IFwiXCI7XG4gICAgICAgICAgY29uc3QgcGVyc29uUHJlZml4ID0gXCJwaWQ9XCI7XG4gICAgICAgICAgbGV0IHBlcnNvbkluZGV4ID0gdXJsLmluZGV4T2YocGVyc29uUHJlZml4KTtcbiAgICAgICAgICBpZiAocGVyc29uSW5kZXggIT0gLTEpIHtcbiAgICAgICAgICAgIGxldCBlbmRJbmRleCA9IHVybC5pbmRleE9mKFwiJlwiLCBwZXJzb25JbmRleCk7XG4gICAgICAgICAgICBpZiAoZW5kSW5kZXggIT0gLTEpIHtcbiAgICAgICAgICAgICAgcGVyc29uSWQgPSB1cmwuc3Vic3RyaW5nKHBlcnNvbkluZGV4ICsgcGVyc29uUHJlZml4Lmxlbmd0aCwgZW5kSW5kZXgpO1xuICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiZXh0cmFjdEltYWdlVGh1bWIsIHBlcnNvbklkID0gXCIgKyBwZXJzb25JZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJlc3VsdC5kb21haW4gJiYgcmVzdWx0LmRiSWQgJiYgaW1hZ2VSZWNvcmRJZCkge1xuICAgICAgICAgICAgcmVzdWx0LmltYWdlUmVjb3JkSWQgPSBpbWFnZVJlY29yZElkO1xuICAgICAgICAgICAgcmVzdWx0LmltYWdlRGJJZCA9IHJlc3VsdC5kYklkO1xuXG4gICAgICAgICAgICBpZiAoaW1hZ2VSZWNvcmRJZCAmJiBwZXJzb25JZCkge1xuICAgICAgICAgICAgICAvLyBodHRwczovL3d3dy5hbmNlc3RyeS5jb20vaW1hZ2V2aWV3ZXIvY29sbGVjdGlvbnMvNjE1OTYvaW1hZ2VzL3RuYV9yMzlfMDc3M18wNzczYV8wMjE/cGlkPTEwMTg5MjYyJnRyZWVpZD0xMTMzNjk1NzgmcGVyc29uaWQ9MjIyMzcyMjY5Nzk1JnVzZVBVQj10cnVlJnVzZVBVQkpzPXRydWVcbiAgICAgICAgICAgICAgcmVzdWx0LmltYWdlVXJsID1cbiAgICAgICAgICAgICAgICBcImh0dHBzOi8vd3d3LlwiICtcbiAgICAgICAgICAgICAgICByZXN1bHQuZG9tYWluICtcbiAgICAgICAgICAgICAgICBcIi9pbWFnZXZpZXdlci9jb2xsZWN0aW9ucy9cIiArXG4gICAgICAgICAgICAgICAgcmVzdWx0LmRiSWQgK1xuICAgICAgICAgICAgICAgIFwiL2ltYWdlcy9cIiArXG4gICAgICAgICAgICAgICAgaW1hZ2VSZWNvcmRJZCArXG4gICAgICAgICAgICAgICAgXCI/cGlkPVwiICtcbiAgICAgICAgICAgICAgICBwZXJzb25JZDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW1hZ2VSZWNvcmRJZCkge1xuICAgICAgICAgICAgICByZXN1bHQuaW1hZ2VVcmwgPVxuICAgICAgICAgICAgICAgIFwiaHR0cHM6Ly93d3cuXCIgKyByZXN1bHQuZG9tYWluICsgXCIvaW1hZ2V2aWV3ZXIvY29sbGVjdGlvbnMvXCIgKyByZXN1bHQuZGJJZCArIFwiL2ltYWdlcy9cIiArIGltYWdlUmVjb3JkSWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RJbWFnZVBhZ2VUaXRsZShkb2N1bWVudCwgcmVzdWx0KSB7XG4gIGxldCB0aXRsZUNvbGxlY3Rpb24gPSBcIlwiO1xuICBsZXQgdGl0bGVOYW1lID0gXCJcIjtcblxuICBsZXQgdGl0bGVDb2xsZWN0aW9uTm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJkaXYuY29sbGVjdGlvblRpdGxlID4gaDEgPiBhXCIpO1xuICBpZiAodGl0bGVDb2xsZWN0aW9uTm9kZSkge1xuICAgIHRpdGxlQ29sbGVjdGlvbiA9IHRpdGxlQ29sbGVjdGlvbk5vZGUudGV4dENvbnRlbnQ7XG4gIH1cblxuICBsZXQgdGl0bGVGb3JOYW1lTm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJkaXYuY29sbGVjdGlvblRpdGxlID4gaDEgPiBzcGFuXCIpO1xuICBpZiAodGl0bGVGb3JOYW1lTm9kZSkge1xuICAgIGxldCB0aXRsZUZvck5hbWUgPSB0aXRsZUZvck5hbWVOb2RlLnRleHRDb250ZW50O1xuICAgIHRpdGxlRm9yTmFtZSA9IHRpdGxlRm9yTmFtZS5yZXBsYWNlKC9eXFxzKmZvclxccysvLCBcIlwiKTtcbiAgICB0aXRsZU5hbWUgPSB0aXRsZUZvck5hbWU7XG4gIH1cblxuICByZXN1bHQudGl0bGVDb2xsZWN0aW9uID0gdGl0bGVDb2xsZWN0aW9uO1xuICByZXN1bHQudGl0bGVOYW1lID0gdGl0bGVOYW1lO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0SW1hZ2VCcm93c2VQYXRoKGRvY3VtZW50LCByZXN1bHQpIHtcbiAgdmFyIHdyYXBwZXJOb2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImRpdi5icm93c2UtcGF0aC1oZWFkZXIgPiBkaXYuYnJlYWRjcnVtYldyYXBwZXJcIik7XG4gIGxldCBicm93c2VQYXRoID0gXCJcIjtcbiAgaWYgKHdyYXBwZXJOb2RlKSB7XG4gICAgbGV0IGNoaWxkcmVuID0gd3JhcHBlck5vZGUuY2hpbGRyZW47XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGNoaWxkcmVuLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgbGV0IGNoaWxkID0gY2hpbGRyZW5baW5kZXhdO1xuICAgICAgaWYgKGNoaWxkLmNsYXNzTGlzdC5jb250YWlucyhcImJyZWFkY3J1bWJJdGVtXCIpKSB7XG4gICAgICAgIGJyb3dzZVBhdGggKz0gY2hpbGQudGV4dENvbnRlbnQ7XG4gICAgICB9IGVsc2UgaWYgKGNoaWxkLmNsYXNzTGlzdC5jb250YWlucyhcImljb25BcnJvd1JpZ2h0XCIpKSB7XG4gICAgICAgIGJyb3dzZVBhdGggKz0gXCIgPiBcIjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoYnJvd3NlUGF0aCkge1xuICAgIHJlc3VsdC5pbWFnZUJyb3dzZVBhdGggPSBicm93c2VQYXRoO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RJbWFnZUhhc0luZGV4KGRvY3VtZW50LCByZXN1bHQpIHtcbiAgbGV0IGluZGV4QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICBcImRpdi5pbWFnZS12aWV3ZXItd3JhcHBlciA+IGRpdi5jb250YWluZXItc3BhY2UgPiBkaXYuYm90dG9tLWNvbnRhaW5lciA+IGRpdi5wYWdpbmctcGFuZWwucGFuZWxUb3BIZWlnaHQgPiBkaXYgPiBidXR0b24uaW5kZXhUb2dnbGVcIlxuICApO1xuXG4gIGlmIChpbmRleEJ1dHRvbikge1xuICAgIGlmIChpbmRleEJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoXCJkaXNhYmxlZFwiKSkge1xuICAgICAgcmVzdWx0LmltYWdlSGFzSW5kZXggPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LmltYWdlSGFzSW5kZXggPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0SW1hZ2VOdW1iZXJBbmRUb3RhbChkb2N1bWVudCwgcmVzdWx0KSB7XG4gIGxldCBwYWdlQ291bnRXcmFwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICBcImRpdi5pbWFnZS12aWV3ZXItd3JhcHBlciA+IGRpdi5jb250YWluZXItc3BhY2UgPiBkaXYuYm90dG9tLWNvbnRhaW5lciA+IGRpdi5wYWdpbmctcGFuZWwucGFuZWxUb3BIZWlnaHQgPiBkaXYgPiBkaXYuaW1hZ2VOdW0ucGFnZUNvdW50V3JhcElubmVyXCJcbiAgKTtcblxuICBpZiAocGFnZUNvdW50V3JhcCkge1xuICAgIGxldCBwYWdlTnVtID0gcGFnZUNvdW50V3JhcC5xdWVyeVNlbGVjdG9yKFwiaW5wdXQucGFnZS1pbnB1dFwiKTtcbiAgICBpZiAocGFnZU51bSkge1xuICAgICAgcmVzdWx0LmltYWdlTnVtYmVyID0gcGFnZU51bS52YWx1ZTtcbiAgICB9XG5cbiAgICBsZXQgaW1hZ2VDb3VudCA9IHBhZ2VDb3VudFdyYXAucXVlcnlTZWxlY3RvcihcInNwYW4uaW1hZ2VDb3VudFRleHRcIik7XG4gICAgaWYgKGltYWdlQ291bnQpIHtcbiAgICAgIHJlc3VsdC50b3RhbEltYWdlcyA9IGltYWdlQ291bnQudGV4dENvbnRlbnQ7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RJbWFnZVRlbXBsYXRlKHJlc3VsdCwgdXJsKSB7XG4gIC8vIGh0dHBzOi8vd3d3LmFuY2VzdHJ5LmNvbS9pbWFnZXZpZXdlci9jb2xsZWN0aW9ucy83ODE0L2ltYWdlcy9MTkRSRzEzXzE1N18xNTgtMDA5NT90cmVlaWQ9JnBlcnNvbmlkPSZoaW50aWQ9JnVzZVBVQj10cnVlJnVzZVBVQkpzPXRydWUmX2dhPTIuOTEyNTI1NzMuNjM2NDg4NzMyLjE2MjE0NDQyNzItMTA5NTMwNjUwOS4xNTg3ODQ4ODc3JnBJZD0yMjI5Nzg5XG5cbiAgbGV0IGRiID0gdXJsLnJlcGxhY2UoLy4qXFwvaW1hZ2V2aWV3ZXJcXC9jb2xsZWN0aW9uc1xcLyhcXHcrKVxcLy4qLywgXCIkMVwiKTtcbiAgbGV0IHJlYyA9IHVybC5yZXBsYWNlKC8uKlxcL2ltYWdlc1xcLyhbXFx3XFxkXFwtXy5dKykuKi8sIFwiJDFcIik7XG4gIGxldCBwaWQgPSB1cmwucmVwbGFjZSgvLipbXFw/XFwmXXBJZFxcPShcXGQrKS4qLywgXCIkMVwiKTtcbiAgbGV0IGRvbWFpbiA9IHVybC5yZXBsYWNlKC8uKlxcLmFuY2VzdHJ5LihbXlxcL10rKVxcLy4qLywgXCIkMVwiKTtcblxuICBpZiAoZGIgIT0gXCJcIiAmJiBkYiAhPSB1cmwgJiYgcmVjICE9IFwiXCIgJiYgcmVjICE9IHVybCkge1xuICAgIHJlc3VsdC5kYklkID0gZGI7XG4gICAgcmVzdWx0LnJlY29yZElkID0gcmVjO1xuICAgIHJlc3VsdC5hbmNlc3RyeVRlbXBsYXRlID0gXCJ7e0FuY2VzdHJ5IEltYWdlfFwiICsgcmVzdWx0LmRiSWQgKyBcInxcIiArIHJlc3VsdC5yZWNvcmRJZCArIFwifX1cIjtcbiAgfVxuXG4gIGlmIChwaWQgIT0gXCJcIiAmJiBwaWQgIT0gdXJsKSB7XG4gICAgcmVzdWx0LnBpZCA9IHBpZDtcbiAgfVxuXG4gIGlmIChkb21haW4gIT0gXCJcIiAmJiBkb21haW4gIT0gdXJsKSB7XG4gICAgcmVzdWx0LmRvbWFpbiA9IGRvbWFpbjtcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VHJlZVRlbXBsYXRlKHJlc3VsdCwgdXJsKSB7XG4gIC8vIGUuZy4gXCJodHRwczovL3d3dy5hbmNlc3RyeS5jb20vZmFtaWx5LXRyZWUvcGVyc29uL3RyZWUvODY4MDg1NzgvcGVyc29uLzI2MDEzMzUzNTAwNi9mYWN0c1wiXG4gIC8vIGJlY29tZXM6IHt7QW5jZXN0cnkgVHJlZXw4NjgwODU3OHwyNjAxMzM1MzUwMDZ9fVxuICBjb25zdCB0cmVlUHJlZml4ID0gXCIvZmFtaWx5LXRyZWUvcGVyc29uL3RyZWUvXCI7XG4gIGNvbnN0IHBlcnNvblByZWZpeCA9IFwiL3BlcnNvbi9cIjtcbiAgbGV0IHRyZWVQcmVmaXhJbmRleCA9IHVybC5pbmRleE9mKHRyZWVQcmVmaXgpO1xuICBpZiAodHJlZVByZWZpeEluZGV4ICE9IC0xKSB7XG4gICAgbGV0IHRyZWVJbmRleCA9IHRyZWVQcmVmaXhJbmRleCArIHRyZWVQcmVmaXgubGVuZ3RoO1xuICAgIGxldCBwZXJzb25QcmVmaXhJbmRleCA9IHVybC5pbmRleE9mKHBlcnNvblByZWZpeCwgdHJlZUluZGV4KTtcbiAgICBpZiAocGVyc29uUHJlZml4SW5kZXggIT0gLTEpIHtcbiAgICAgIGxldCB0cmVlID0gdXJsLnN1YnN0cmluZyh0cmVlSW5kZXgsIHBlcnNvblByZWZpeEluZGV4KTtcbiAgICAgIGxldCBwZXJzb25JbmRleCA9IHBlcnNvblByZWZpeEluZGV4ICsgcGVyc29uUHJlZml4Lmxlbmd0aDtcbiAgICAgIGxldCBwZXJzb25FbmRJbmRleCA9IHVybC5pbmRleE9mKFwiL1wiLCBwZXJzb25JbmRleCk7XG4gICAgICBpZiAocGVyc29uRW5kSW5kZXggIT0gLTEpIHtcbiAgICAgICAgbGV0IHBlcnNvbiA9IHVybC5zdWJzdHJpbmcocGVyc29uSW5kZXgsIHBlcnNvbkVuZEluZGV4KTtcbiAgICAgICAgcmVzdWx0LmFuY2VzdHJ5VGVtcGxhdGUgPSBcInt7QW5jZXN0cnkgVHJlZXxcIiArIHRyZWUgKyBcInxcIiArIHBlcnNvbiArIFwifX1cIjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFRyZWVNZWRpYVRlbXBsYXRlKHJlc3VsdCwgdXJsKSB7XG4gIC8vIFRoZXJlIGFyZSB2YXJpb3VzIFVSTCBmb3JtczpcbiAgLy8gaHR0cHM6Ly93d3cuYW5jZXN0cnkuY29tL2ZhbWlseS10cmVlL3RyZWUvODY4MDg1NzgvbWVkaWEvZDY5YTdkNmEtYzc3My00OGIxLWFiMDktMTkxMDBjZDU1YzE0XG4gIC8vIGh0dHBzOi8vd3d3LmFuY2VzdHJ5LmNvbS9mYW1pbHktdHJlZS90cmVlLzg2ODA4NTc4L3BlcnNvbi80NjU1MjE5ODY4NC9tZWRpYS9kNjlhN2Q2YS1jNzczLTQ4YjEtYWIwOS0xOTEwMGNkNTVjMTRcbiAgLy8gaHR0cHM6Ly93d3cuYW5jZXN0cnkuY29tL21lZGlhdWktdmlld2VyL3RyZWUvODY4MDg1NzgvbWVkaWEvZDY5YTdkNmEtYzc3My00OGIxLWFiMDktMTkxMDBjZDU1YzE0XG4gIC8vIGh0dHBzOi8vd3d3LmFuY2VzdHJ5LmNvbS9tZWRpYXVpLXZpZXdlci90cmVlLzg2ODA4NTc4L3BlcnNvbi80NjU1MjE5ODY4NC9tZWRpYS9kNjlhN2Q2YS1jNzczLTQ4YjEtYWIwOS0xOTEwMGNkNTVjMTQ/dXNlUFVCSnM9dHJ1ZVxuXG4gIC8vIGJlY29tZXM6IHt7QW5jZXN0cnkgVHJlZSBNZWRpYXw4NjgwODU3OHxkNjlhN2Q2YS1jNzczLTQ4YjEtYWIwOS0xOTEwMGNkNTVjMTR9fVxuXG4gIGNvbnN0IHRyZWVQcmVmaXggPSBcIi90cmVlL1wiO1xuICBjb25zdCBtZWRpYVByZWZpeCA9IFwiL21lZGlhL1wiO1xuICBsZXQgdHJlZVByZWZpeEluZGV4ID0gdXJsLmluZGV4T2YodHJlZVByZWZpeCk7XG4gIGlmICh0cmVlUHJlZml4SW5kZXggIT0gLTEpIHtcbiAgICBsZXQgdHJlZUluZGV4ID0gdHJlZVByZWZpeEluZGV4ICsgdHJlZVByZWZpeC5sZW5ndGg7XG4gICAgbGV0IGVuZFRyZWVJbmRleCA9IHVybC5pbmRleE9mKFwiL1wiLCB0cmVlSW5kZXgpO1xuICAgIGlmIChlbmRUcmVlSW5kZXggIT0gLTEpIHtcbiAgICAgIGxldCB0cmVlID0gdXJsLnN1YnN0cmluZyh0cmVlSW5kZXgsIGVuZFRyZWVJbmRleCk7XG5cbiAgICAgIGxldCBtZWRpYVByZWZpeEluZGV4ID0gdXJsLmluZGV4T2YobWVkaWFQcmVmaXgsIGVuZFRyZWVJbmRleCk7XG4gICAgICBpZiAobWVkaWFQcmVmaXhJbmRleCAhPSAtMSkge1xuICAgICAgICBsZXQgbWVkaWFJbmRleCA9IG1lZGlhUHJlZml4SW5kZXggKyBtZWRpYVByZWZpeC5sZW5ndGg7XG4gICAgICAgIGxldCBtZWRpYUVuZEluZGV4ID0gdXJsLmluZGV4T2YoXCIvXCIsIG1lZGlhSW5kZXgpO1xuICAgICAgICBpZiAobWVkaWFFbmRJbmRleCA9PSAtMSkge1xuICAgICAgICAgIG1lZGlhRW5kSW5kZXggPSB1cmwuaW5kZXhPZihcIj9cIiwgbWVkaWFJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lZGlhRW5kSW5kZXggPT0gLTEpIHtcbiAgICAgICAgICBtZWRpYUVuZEluZGV4ID0gdXJsLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVkaWFFbmRJbmRleCAhPSAtMSkge1xuICAgICAgICAgIGxldCBtZWRpYSA9IHVybC5zdWJzdHJpbmcobWVkaWFJbmRleCwgbWVkaWFFbmRJbmRleCk7XG4gICAgICAgICAgcmVzdWx0LmFuY2VzdHJ5VGVtcGxhdGUgPSBcInt7QW5jZXN0cnkgVHJlZSBNZWRpYXxcIiArIHRyZWUgKyBcInxcIiArIG1lZGlhICsgXCJ9fVwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RTaGFyaW5nVXJsVGVtcGxhdGUoZG9jdW1lbnQsIHJlc3VsdCkge1xuICBsZXQgYmFuZGlkb01vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtb2RhbCA+ICNtb2RhbEZpeGVkIC5iYW5kaWRvLW1vZGFsLXBvc3Qtc2hhcmUgLnNoYXJlLXVybFwiKTtcbiAgaWYgKGJhbmRpZG9Nb2RhbCkge1xuICAgIGxldCB1cmxOb2RlID0gYmFuZGlkb01vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIudXJsLWlucHV0XCIpO1xuXG4gICAgaWYgKHVybE5vZGUpIHtcbiAgICAgIGxldCB1cmwgPSB1cmxOb2RlLnZhbHVlO1xuICAgICAgLy8gaHR0cHM6Ly93d3cuYW5jZXN0cnkuY29tL3NoYXJpbmcvMjQyNzQ0NDA/aD05NWNmNWMmdXRtX2NhbXBhaWduPWJhbmRpZG8td2VicGFydHMmdXRtX3NvdXJjZT1wb3N0LXNoYXJlLW1vZGFsJnV0bV9tZWRpdW09Y29weS11cmxcbiAgICAgIGxldCBudW0xID0gdXJsLnJlcGxhY2UoLy4qXFwvc2hhcmluZ1xcLyhcXHcrKVxcP2hcXD1cXHcrXFwmLiovLCBcIiQxXCIpO1xuICAgICAgbGV0IG51bTIgPSB1cmwucmVwbGFjZSgvLipcXC9zaGFyaW5nXFwvXFx3K1xcP2hcXD0oXFx3KylcXCYuKi8sIFwiJDFcIik7XG5cbiAgICAgIHJlc3VsdC5hbmNlc3RyeVRlbXBsYXRlID0gXCJ7e0FuY2VzdHJ5IFNoYXJpbmd8XCIgKyBudW0xICsgXCJ8XCIgKyBudW0yICsgXCJ9fVwiO1xuXG4gICAgICByZXN1bHQuc2hhcmluZ1VybCA9IHVybC5yZXBsYWNlKC8oXi4qXFwvc2hhcmluZ1xcL1xcdytcXD9oXFw9XFx3KylcXCYuKi8sIFwiJDFcIik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RTaGFyaW5nSW1hZ2VGdWxsU2l6ZUxpbmsoZG9jdW1lbnQsIHJlc3VsdCkge1xuICAvL2NvbnNvbGUubG9nKFwiZXh0cmFjdFNoYXJpbmdJbWFnZUZ1bGxTaXplTGlua1wiKTtcblxuICBsZXQgYXR0YWNobWVudENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJkaXYubWFpbi1jb250YWluZXIgPiBkaXYuYXR0YWNobWVudC1jb250YWluZXJcIik7XG4gIGlmIChhdHRhY2htZW50Q29udGFpbmVyKSB7XG4gICAgbGV0IHpvb21JbWcgPSBhdHRhY2htZW50Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIjem9vbU1vZGFsID4gI3pvb21Db250ZW50ID4gI3pvb21JbWdcIik7XG5cbiAgICBsZXQgaW1hZ2VVcmwgPSBcIlwiO1xuXG4gICAgaWYgKHpvb21JbWcpIHtcbiAgICAgIGltYWdlVXJsID0gem9vbUltZy5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBpbWcgPSBhdHRhY2htZW50Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCJpbWcuYXR0YWNobWVudC1pbWFnZVwiKTtcbiAgICAgIGlmIChpbWcpIHtcbiAgICAgICAgaW1hZ2VVcmwgPSBpbWcuZ2V0QXR0cmlidXRlKFwic3JjXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vY29uc29sZS5sb2coXCJpbWFnZVVybCBpcyBcIiArIGltYWdlVXJsKTtcblxuICAgIGlmIChpbWFnZVVybCkge1xuICAgICAgbGV0IG1heFBhcmFtSW5kZXggPSBpbWFnZVVybC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCImbWF4d2lkdGg9XCIpO1xuICAgICAgaWYgKG1heFBhcmFtSW5kZXggIT0gLTEpIHtcbiAgICAgICAgaW1hZ2VVcmwgPSBpbWFnZVVybC5zdWJzdHJpbmcoMCwgbWF4UGFyYW1JbmRleCk7XG4gICAgICB9XG4gICAgICByZXN1bHQuZnVsbFNpemVTaGFyaW5nSW1hZ2VVcmwgPSBpbWFnZVVybDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFNoYXJpbmdJbWFnZUZ1bGxTaXplTGlua1YyKGRvY3VtZW50LCByZXN1bHQpIHtcbiAgLy9jb25zb2xlLmxvZyhcImV4dHJhY3RTaGFyaW5nSW1hZ2VGdWxsU2l6ZUxpbmtWMlwiKTtcblxuICBsZXQgaW1hZ2VVcmwgPSBcIlwiO1xuXG4gIGxldCBpbWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2xhbmRpbmdQYWdlQ29udGVudCBkaXYucGhvdG8gPiBpbWdcIik7XG4gIGlmIChpbWcpIHtcbiAgICBpbWFnZVVybCA9IGltZy5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gIH1cblxuICAvL2NvbnNvbGUubG9nKFwiaW1hZ2VVcmwgaXMgXCIgKyBpbWFnZVVybCk7XG5cbiAgaWYgKGltYWdlVXJsKSB7XG4gICAgbGV0IG1heFBhcmFtSW5kZXggPSBpbWFnZVVybC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCImbWF4d2lkdGg9XCIpO1xuICAgIGlmIChtYXhQYXJhbUluZGV4ICE9IC0xKSB7XG4gICAgICBpbWFnZVVybCA9IGltYWdlVXJsLnN1YnN0cmluZygwLCBtYXhQYXJhbUluZGV4KTtcbiAgICB9XG4gICAgcmVzdWx0LmZ1bGxTaXplU2hhcmluZ0ltYWdlVXJsID0gaW1hZ2VVcmw7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFNoYXJpbmdJbWFnZUZ1bGxTaXplTGlua0Rpc2NvdmVyaWVzKGRvY3VtZW50LCByZXN1bHQpIHtcbiAgLy9jb25zb2xlLmxvZyhcImV4dHJhY3RTaGFyaW5nSW1hZ2VGdWxsU2l6ZUxpbmtWMlwiKTtcblxuICBsZXQgaW1hZ2VVcmwgPSBcIlwiO1xuXG4gIGxldCBpbWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2ludGVyYWN0aXZlSW1hZ2VXaWRnZXRDb250YWluZXIgPiBkaXYgPiBpbWdcIik7XG4gIGlmIChpbWcpIHtcbiAgICBpbWFnZVVybCA9IGltZy5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG5cbiAgICAvL2NvbnNvbGUubG9nKFwiaW1hZ2VVcmwgaXMgXCIgKyBpbWFnZVVybCk7XG5cbiAgICAvLyBFeGFtcGxlIGltYWdlVVJMOlxuICAgIC8vIGh0dHBzOi8vbWVkaWFzdmMuYW5jZXN0cnkuY29tL3YyL2ltYWdlL25hbWVzcGFjZXMvMjQ0Mi9tZWRpYS9tLXQwNjI3LTAyMzE0LTAwNDQxLmpwZz9zZWN1cml0eXRva2VuPXh3ZjBhZDRlZTI4OWY1ZWIwZWJjNDI5MGMxYzNhMDZmOGFlOGRhYzExMDk1OWJjZTAwJmRvd25sb2FkPVRydWUmY2xpZW50PWRpc2NvdmVyeXVpLWNvbnRlbnRzZXJ2aWNlXG5cbiAgICAvLyB3ZSB3YW50IHRvIHJlbW92ZSB0aGUgXCImZG93bmxvYWQ9VHJ1ZVwiIGFuZCBvbndhcmRzXG4gICAgaWYgKGltYWdlVXJsKSB7XG4gICAgICBsZXQgZG93bmxvYWRQYXJhbUluZGV4ID0gaW1hZ2VVcmwudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiJmRvd25sb2FkPVwiKTtcbiAgICAgIGlmIChkb3dubG9hZFBhcmFtSW5kZXggIT0gLTEpIHtcbiAgICAgICAgaW1hZ2VVcmwgPSBpbWFnZVVybC5zdWJzdHJpbmcoMCwgZG93bmxvYWRQYXJhbUluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5mdWxsU2l6ZVNoYXJpbmdJbWFnZVVybCA9IGltYWdlVXJsO1xuXG4gICAgICBjb25zdCBhbHRTdHJpbmcgPSBpbWcuZ2V0QXR0cmlidXRlKFwiYWx0XCIpO1xuICAgICAgaWYgKGFsdFN0cmluZykge1xuICAgICAgICByZXN1bHQudGl0bGVDb2xsZWN0aW9uID0gYWx0U3RyaW5nO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBoZWFkID4gbWV0YTpudGgtY2hpbGQoMTgpXG4gICAgbGV0IG1ldGEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaGVhZCA+IG1ldGFbY29udGVudF49J2h0dHBzOi8vbWVkaWFzdmMuYW5jZXN0cnkuJ11cIik7XG5cbiAgICBpZiAobWV0YSkge1xuICAgICAgbGV0IGltYWdlVXJsID0gbWV0YS5nZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIpO1xuXG4gICAgICBpZiAoaW1hZ2VVcmwpIHtcbiAgICAgICAgbGV0IG1heFBhcmFtSW5kZXggPSBpbWFnZVVybC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCImbWF4d2lkdGg9XCIpO1xuICAgICAgICBpZiAobWF4UGFyYW1JbmRleCAhPSAtMSkge1xuICAgICAgICAgIGltYWdlVXJsID0gaW1hZ2VVcmwuc3Vic3RyaW5nKDAsIG1heFBhcmFtSW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5mdWxsU2l6ZVNoYXJpbmdJbWFnZVVybCA9IGltYWdlVXJsO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0U2hhcmluZ0ltYWdlT3JSZWNvcmREZXRhaWxzKGRvY3VtZW50LCByZXN1bHQpIHtcbiAgLy9jb25zb2xlLmxvZyhcImV4dHJhY3RTaGFyaW5nSW1hZ2VPclJlY29yZERldGFpbHNcIik7XG5cbiAgaWYgKHJlc3VsdC5mdWxsU2l6ZVNoYXJpbmdJbWFnZVVybCkge1xuICAgIC8vIGV4dHJhY3QgdGhlIGRiSWQgYW5kIGltYWdlSWQgZnJvbSBpbWFnZSBVUkxcbiAgICAvLyBodHRwczovL21lZGlhc3ZjLmFuY2VzdHJ5LmNvbS92Mi9pbWFnZS9uYW1lc3BhY2VzLzY1OTgvbWVkaWEvTE5EUkcxMl8xMzZfMTM3LTA3MTkuanBnP3NlY3VyaXR5VG9rZW49eHc5MTc2ODIxNzI4Y2FiYjc4NzY1NGNlNjUzNjhhNzYzYWU5MzEzZjdhOTlkYjAwMDAmTmFtZXNwYWNlSWQ9NjU5OCZDbGllbnQ9U2hhcmVcblxuICAgIGNvbnN0IGRiSWQgPSByZXN1bHQuZnVsbFNpemVTaGFyaW5nSW1hZ2VVcmwucmVwbGFjZShcbiAgICAgIC9odHRwcz9cXDpcXC9cXC9bXlxcL10rXFwvdjJcXC9pbWFnZVxcL25hbWVzcGFjZXNcXC8oW15cXC9dKylcXC9tZWRpYVxcLyhbXlxcP1xcLl0rKS4qLyxcbiAgICAgIFwiJDFcIlxuICAgICk7XG4gICAgY29uc3QgaW1hZ2VJZCA9IHJlc3VsdC5mdWxsU2l6ZVNoYXJpbmdJbWFnZVVybC5yZXBsYWNlKFxuICAgICAgL2h0dHBzP1xcOlxcL1xcL1teXFwvXStcXC92MlxcL2ltYWdlXFwvbmFtZXNwYWNlc1xcLyhbXlxcL10rKVxcL21lZGlhXFwvKFteXFw/XFwuXSspLiovLFxuICAgICAgXCIkMlwiXG4gICAgKTtcblxuICAgIGlmIChkYklkICYmIGRiSWQgIT0gcmVzdWx0LmZ1bGxTaXplU2hhcmluZ0ltYWdlVXJsKSB7XG4gICAgICByZXN1bHQuZGJJZCA9IGRiSWQ7XG4gICAgfVxuXG4gICAgaWYgKGltYWdlSWQgJiYgaW1hZ2VJZCAhPSByZXN1bHQuZnVsbFNpemVTaGFyaW5nSW1hZ2VVcmwpIHtcbiAgICAgIHJlc3VsdC5yZWNvcmRJZCA9IGltYWdlSWQ7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgdGl0bGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInRpdGxlXCIpO1xuICBpZiAodGl0bGVFbGVtZW50KSB7XG4gICAgbGV0IHRpdGxlID0gdGl0bGVFbGVtZW50LnRleHRDb250ZW50O1xuICAgIGNvbnN0IHByZWZpeCA9IFwiZGlzY292ZXJlZCBpbiBcIjtcbiAgICBjb25zdCBwcmVmaXhJbmRleCA9IHRpdGxlLmluZGV4T2YocHJlZml4KTtcbiAgICBpZiAocHJlZml4SW5kZXggIT0gLTEpIHtcbiAgICAgIGxldCByZW1haW5kZXIgPSB0aXRsZS5zdWJzdHJpbmcocHJlZml4SW5kZXggKyBwcmVmaXgubGVuZ3RoKTtcbiAgICAgIGNvbnN0IHN1ZmZpeCA9IFwiIGNvbGxlY3Rpb25cIjtcbiAgICAgIGlmIChyZW1haW5kZXIuZW5kc1dpdGgoc3VmZml4KSkge1xuICAgICAgICByZW1haW5kZXIgPSByZW1haW5kZXIuc3Vic3RyaW5nKDAsIHJlbWFpbmRlci5sZW5ndGggLSBzdWZmaXgubGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbWFpbmRlcikge1xuICAgICAgICByZXN1bHQudGl0bGVDb2xsZWN0aW9uID0gcmVtYWluZGVyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHRpdGxlTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoMS5zdWJqZWN0LW5hbWVcIik7XG4gIGlmICh0aXRsZU5hbWUgJiYgdGl0bGVOYW1lLnRleHRDb250ZW50KSB7XG4gICAgcmVzdWx0LnRpdGxlTmFtZSA9IHRpdGxlTmFtZS50ZXh0Q29udGVudC50cmltKCk7XG4gIH1cblxuICBjb25zdCBwZXJzb25OYXJyYXRpdmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwicC5jb250ZW50LWNhcHRpb25cIik7XG4gIGlmIChwZXJzb25OYXJyYXRpdmUgJiYgcGVyc29uTmFycmF0aXZlLnRleHRDb250ZW50KSB7XG4gICAgcmVzdWx0LnBlcnNvbk5hcnJhdGl2ZSA9IHBlcnNvbk5hcnJhdGl2ZS50ZXh0Q29udGVudC50cmltKCk7XG4gIH1cblxuICAvLyBodHRwczovL3d3dy5hbmNlc3RyeS5jb20vc2hhcmluZy8yNjAzMjg1OD9oPWRiMTBkZSZjbGlja3JlZj0xMDExbHdobUVZWWIlMkMxMDExbHdobUVZWWImYWRyZWY9Jm9feGlkPTAxMDExbDR4eDUmb19saWQ9MDEwMTFsNHh4NSZvX3NjaD1BZmZpbGlhdGUrRXh0ZXJuYWxcbiAgbGV0IG51bTEgPSByZXN1bHQudXJsLnJlcGxhY2UoLy4qXFwuYW5jZXN0cnlbXlxcL10rXFwvc2hhcmluZ1xcLyhbXlxcP10rKVxcPy4qLywgXCIkMVwiKTtcbiAgbGV0IG51bTIgPSByZXN1bHQudXJsLnJlcGxhY2UoLy4qXFwuYW5jZXN0cnlbXlxcL10rXFwvc2hhcmluZ1xcL1teXFw/XStcXD9oXFw9KFteXFw/XFwmXSspLiovLCBcIiQxXCIpO1xuXG4gIGlmIChudW0xICYmIG51bTIpIHtcbiAgICByZXN1bHQuYW5jZXN0cnlUZW1wbGF0ZSA9IFwie3tBbmNlc3RyeSBTaGFyaW5nfFwiICsgbnVtMSArIFwifFwiICsgbnVtMiArIFwifX1cIjtcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0U2hhcmluZ0ltYWdlT3JSZWNvcmREZXRhaWxzVjIoZG9jdW1lbnQsIHJlc3VsdCkge1xuICAvL2NvbnNvbGUubG9nKFwiZXh0cmFjdFNoYXJpbmdJbWFnZU9yUmVjb3JkRGV0YWlsc1YyXCIpO1xuXG4gIGNvbnN0IGNvbnRlbnREaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2xhbmRpbmdQYWdlQ29udGVudFwiKTtcbiAgaWYgKGNvbnRlbnREaXYpIHtcbiAgICBjb25zdCBkYXRhT2JqZWN0SWQgPSBjb250ZW50RGl2LmdldEF0dHJpYnV0ZShcImRhdGEtb2JqZWN0LWlkXCIpO1xuICAgIGlmIChkYXRhT2JqZWN0SWQpIHtcbiAgICAgIC8vIGV4YW1wbGU6IFwiNzE2My0zODY1OTkxNlwiXG4gICAgICBjb25zdCBkYXNoSW5kZXggPSBkYXRhT2JqZWN0SWQuaW5kZXhPZihcIi1cIik7XG4gICAgICBpZiAoZGFzaEluZGV4ICE9IC0xKSB7XG4gICAgICAgIGNvbnN0IGRiSWQgPSBkYXRhT2JqZWN0SWQuc3Vic3RyaW5nKDAsIGRhc2hJbmRleCk7XG4gICAgICAgIGNvbnN0IHJlY29yZElkID0gZGF0YU9iamVjdElkLnN1YnN0cmluZyhkYXNoSW5kZXggKyAxKTtcbiAgICAgICAgaWYgKGRiSWQgJiYgcmVjb3JkSWQpIHtcbiAgICAgICAgICByZXN1bHQuZGJJZCA9IGRiSWQ7XG4gICAgICAgICAgcmVzdWx0LnJlY29yZElkID0gcmVjb3JkSWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdCB0aXRsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwidGl0bGVcIik7XG4gIGlmICh0aXRsZUVsZW1lbnQpIHtcbiAgICBsZXQgdGl0bGUgPSB0aXRsZUVsZW1lbnQudGV4dENvbnRlbnQ7XG4gICAgY29uc3QgcHJlZml4ID0gXCJEaXNjb3ZlcmVkIGJ5IFwiO1xuICAgIGlmICh0aXRsZS5zdGFydHNXaXRoKHByZWZpeCkpIHtcbiAgICAgIGNvbnN0IGNvbGxlY3Rpb25JbmRleCA9IHRpdGxlLmluZGV4T2YoXCIgaW4gXCIsIHByZWZpeC5sZW5ndGgpO1xuICAgICAgbGV0IHJlbWFpbmRlciA9IHRpdGxlLnN1YnN0cmluZyhjb2xsZWN0aW9uSW5kZXggKyA0KTtcbiAgICAgIGNvbnN0IHN1ZmZpeCA9IFwiIGNvbGxlY3Rpb25cIjtcbiAgICAgIGlmIChyZW1haW5kZXIuZW5kc1dpdGgoc3VmZml4KSkge1xuICAgICAgICByZW1haW5kZXIgPSByZW1haW5kZXIuc3Vic3RyaW5nKDAsIHJlbWFpbmRlci5sZW5ndGggLSBzdWZmaXgubGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbWFpbmRlcikge1xuICAgICAgICByZXN1bHQudGl0bGVDb2xsZWN0aW9uID0gcmVtYWluZGVyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHRpdGxlTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoMi5jb25UaXRsZVwiKTtcbiAgaWYgKHRpdGxlTmFtZSAmJiB0aXRsZU5hbWUudGV4dENvbnRlbnQpIHtcbiAgICByZXN1bHQudGl0bGVOYW1lID0gdGl0bGVOYW1lLnRleHRDb250ZW50LnRyaW0oKTtcbiAgfVxuXG4gIGNvbnN0IHBlcnNvbk5hcnJhdGl2ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJkaXYuY29uQm9keSA+IHBcIik7XG4gIGlmIChwZXJzb25OYXJyYXRpdmUgJiYgcGVyc29uTmFycmF0aXZlLnRleHRDb250ZW50KSB7XG4gICAgcmVzdWx0LnBlcnNvbk5hcnJhdGl2ZSA9IHBlcnNvbk5hcnJhdGl2ZS50ZXh0Q29udGVudC50cmltKCk7XG4gIH1cblxuICAvLyBodHRwczovL3d3dy5hbmNlc3RyeS5jb20vc2hhcmluZy8yMzYzOTI/dG9rZW49MzgzMjIyNmYyOTA4MDE0MDI0Y2FlM2E0YmJmNjQ0Y2MwMTk1MzliY2EyM2M4YjcxMzNmMGFmZmIxNTI5Mzg1Y1xuXG4gIGxldCBudW0xID0gcmVzdWx0LnVybC5yZXBsYWNlKC8uKlxcLmFuY2VzdHJ5W15cXC9dK1xcL3NoYXJpbmdcXC8oW15cXD9dKylcXD8uKi8sIFwiJDFcIik7XG4gIGxldCBudW0yID0gcmVzdWx0LnVybC5yZXBsYWNlKC8uKlxcLmFuY2VzdHJ5W15cXC9dK1xcL3NoYXJpbmdcXC9bXlxcP10rXFw/dG9rZW5cXD0oW15cXD9cXCZdKykuKi8sIFwiJDFcIik7XG5cbiAgaWYgKG51bTEgJiYgbnVtMikge1xuICAgIHJlc3VsdC5hbmNlc3RyeVRlbXBsYXRlID0gXCJ7e0FuY2VzdHJ5IFNoYXJpbmd8XCIgKyBudW0xICsgXCJ8XCIgKyBudW0yICsgXCJ9fVwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RTaGFyaW5nSW1hZ2VPclJlY29yZERldGFpbHNEaXNjb3Zlcmllcyhkb2N1bWVudCwgcmVzdWx0KSB7XG4gIC8vY29uc29sZS5sb2coXCJleHRyYWN0U2hhcmluZ0ltYWdlT3JSZWNvcmREZXRhaWxzRGlzY292ZXJpZXNcIik7XG5cbiAgZnVuY3Rpb24gZ2V0UXVlcnlGaWVsZChyZWdleCkge1xuICAgIGxldCB2YWx1ZSA9IHJlc3VsdC51cmwucmVwbGFjZShyZWdleCwgXCIkMVwiKTtcblxuICAgIGlmICh2YWx1ZSAmJiB2YWx1ZSAhPSByZXN1bHQudXJsKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0RnJvbVF1ZXJ5RmllbGQocmVnZXgsIHJlc3VsdEZpZWxkKSB7XG4gICAgbGV0IHZhbHVlID0gZ2V0UXVlcnlGaWVsZChyZWdleCk7XG5cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHJlc3VsdFtyZXN1bHRGaWVsZF0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICAvLyB1cmwgY29udGFpbnMgZGJpZCBhbmQgcmVjb3JkaWQ6XG4gIC8vIGh0dHBzOi8vd3d3LmFuY2VzdHJ5LmNvbS9jZW5zdXMtc2VhcmNoL2Rpc2NvdmVyaWVzXG4gIC8vID9tYXRjaGRiaWQ9MjQ0MiZtYXRjaHJlY29yZGlkPTEzMDg5MTMzNFxuICAvLyAmbWF0Y2hyZWxhdGl2ZT1yZWxhdGl2ZSZzaGFyZT0xJm1hdGNoZ2lkPVpLYUp6ckozcHF1eHZvWWF2RU81SGthMW5BMVFwQWY1V2JcbiAgLy8gJm1hdGNoZmlyc3RuYW1lPUxlc2xpZSUyMFImbWF0Y2hsYXN0bmFtZT1Db3gmbWF0Y2hiaXJ0aGRhdGU9MTkzMSZtYXRjaGdlbmRlcj1tYWxlXG4gIHNldEZyb21RdWVyeUZpZWxkKC9eLipbJj9dbWF0Y2hkYmlkXFw9KFteJl0rKS4qLywgXCJkYklkXCIpO1xuICBzZXRGcm9tUXVlcnlGaWVsZCgvXi4qWyY/XW1hdGNocmVjb3JkaWRcXD0oW14mXSspLiovLCBcInJlY29yZElkXCIpO1xuXG4gIGxldCBmdWxsTmFtZSA9IFwiXCI7XG4gIGNvbnN0IGZpcnN0TmFtZXMgPSBnZXRRdWVyeUZpZWxkKC9eLipbJj9dbWF0Y2hmaXJzdG5hbWVcXD0oW14mXSspLiovKTtcbiAgY29uc3QgbGFzdE5hbWVzID0gZ2V0UXVlcnlGaWVsZCgvXi4qWyY/XW1hdGNobGFzdG5hbWVcXD0oW14mXSspLiovKTtcbiAgaWYgKGZpcnN0TmFtZXMpIHtcbiAgICBmdWxsTmFtZSA9IGRlY29kZVVSSUNvbXBvbmVudChmaXJzdE5hbWVzKTtcbiAgfVxuICBpZiAobGFzdE5hbWVzKSB7XG4gICAgaWYgKGZ1bGxOYW1lKSB7XG4gICAgICBmdWxsTmFtZSArPSBcIiBcIjtcbiAgICB9XG4gICAgZnVsbE5hbWUgKz0gZGVjb2RlVVJJQ29tcG9uZW50KGxhc3ROYW1lcyk7XG4gIH1cbiAgaWYgKGZ1bGxOYW1lKSB7XG4gICAgcmVzdWx0LnRpdGxlTmFtZSA9IGZ1bGxOYW1lO1xuICB9XG5cbiAgLy8gZGl2LmFwcC1jYXJkLWNvbnRlbnQgPiBwLnRleHQyeGxyZy50ZXh0YWx0LnRvcFNwYWNpbmdcblxuICBjb25zdCBwZXJzb25OYXJyYXRpdmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiZGl2LmFwcC1jYXJkLWNvbnRlbnQgPiBwLnRleHQyeGxyZy50ZXh0YWx0LnRvcFNwYWNpbmdcIik7XG4gIGlmIChwZXJzb25OYXJyYXRpdmUgJiYgcGVyc29uTmFycmF0aXZlLnRleHRDb250ZW50KSB7XG4gICAgcmVzdWx0LnBlcnNvbk5hcnJhdGl2ZSA9IHBlcnNvbk5hcnJhdGl2ZS50ZXh0Q29udGVudC50cmltKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGV0ZWN0UGFnZVR5cGUoZG9jdW1lbnQsIHJlc3VsdCwgdXJsKSB7XG4gIGlmICh1cmwuaW5jbHVkZXMoXCIvaW1hZ2V2aWV3ZXIvY29sbGVjdGlvbnMvXCIpKSB7XG4gICAgbGV0IGJhbmRpZG9Nb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbW9kYWwgPiAjbW9kYWxGaXhlZCAuYmFuZGlkby1tb2RhbC1wb3N0LXNoYXJlIC5zaGFyZS11cmxcIik7XG4gICAgaWYgKGJhbmRpZG9Nb2RhbCkge1xuICAgICAgcmVzdWx0LnBhZ2VUeXBlID0gXCJzaGFyaW5nVXJsXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYWdlVHlwZSA9IFwiaW1hZ2VcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAodXJsLmluY2x1ZGVzKFwiL3BlcnNvbi9cIikgJiYgdXJsLmluY2x1ZGVzKFwiL2ZhY3RzXCIpKSB7XG4gICAgcmVzdWx0LnBhZ2VUeXBlID0gXCJwZXJzb25GYWN0c1wiO1xuXG4gICAgbGV0IGNpdGF0aW9uUmVjb3JkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbENvbnRlbnRzICNGYWN0RWRpdENvbXBvbmVudCBzZWN0aW9uLmNpdGF0aW9uUmVjb3JkXCIpO1xuICAgIGlmIChjaXRhdGlvblJlY29yZCkge1xuICAgICAgcmVzdWx0LnBhZ2VUeXBlID0gXCJwZXJzb25Tb3VyY2VDaXRhdGlvblwiO1xuICAgIH1cbiAgfSBlbHNlIGlmICh1cmwuaW5jbHVkZXMoXCIvZGlzY292ZXJpZXNcIikgfHwgdXJsLmluY2x1ZGVzKFwibWF0Y2hkYmlkPVwiKSkge1xuICAgIHJlc3VsdC5wYWdlVHlwZSA9IFwic2hhcmluZ0ltYWdlT3JSZWNvcmRcIjtcbiAgICByZXN1bHQuc2hhcmluZ1R5cGUgPSBcImRpc2NvdmVyaWVzXCI7XG4gIH0gZWxzZSBpZiAodXJsLmluY2x1ZGVzKFwiZGJpZD1cIikgfHwgdXJsLmluY2x1ZGVzKFwiZGI9XCIpIHx8IHVybC5pbmNsdWRlcyhcImRpc2NvdmVyeXVpLWNvbnRlbnRcIikpIHtcbiAgICByZXN1bHQucGFnZVR5cGUgPSBcInJlY29yZFwiO1xuICB9IGVsc2UgaWYgKHVybC5pbmNsdWRlcyhcIi9jb2xsZWN0aW9ucy9cIikgJiYgdXJsLmluY2x1ZGVzKFwiL3JlY29yZHMvXCIpKSB7XG4gICAgcmVzdWx0LnBhZ2VUeXBlID0gXCJyZWNvcmRcIjtcbiAgfSBlbHNlIGlmICh1cmwuaW5jbHVkZXMoXCIvc2hhcmluZy9cIikgJiYgdXJsLmluY2x1ZGVzKFwiP2g9XCIpKSB7XG4gICAgcmVzdWx0LnBhZ2VUeXBlID0gXCJzaGFyaW5nSW1hZ2VPclJlY29yZFwiO1xuICAgIHJlc3VsdC5zaGFyaW5nVHlwZSA9IFwidjFcIjtcbiAgfSBlbHNlIGlmICh1cmwuaW5jbHVkZXMoXCIvc2hhcmluZy9cIikgJiYgdXJsLmluY2x1ZGVzKFwiP3Rva2VuPVwiKSkge1xuICAgIHJlc3VsdC5wYWdlVHlwZSA9IFwic2hhcmluZ0ltYWdlT3JSZWNvcmRcIjtcbiAgICByZXN1bHQuc2hhcmluZ1R5cGUgPSBcInYyXCI7XG4gIH0gZWxzZSBpZiAodXJsLmluY2x1ZGVzKFwiL21lZGlhL1wiKSAmJiB1cmwuaW5jbHVkZXMoXCIvdHJlZS9cIikpIHtcbiAgICByZXN1bHQucGFnZVR5cGUgPSBcInRyZWVNZWRpYVwiO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdC5wYWdlVHlwZSA9IFwidW5rbm93blwiO1xuICB9XG5cbiAgLy9jb25zb2xlLmxvZyhcImRldGVjdFBhZ2VUeXBlLCByZXN1bHQucGFnZVR5cGUgPSBcIiArIHJlc3VsdC5wYWdlVHlwZSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVBlcnNvblNvdXJjZUNpdGF0aW9uKGRvY3VtZW50LCByZXN1bHQpIHtcbiAgLy8gVGhpcyBzYXZlcyB0aGUgZXh0cmEgY2xpY2sgb2YgaGF2aW5nIHRvIGNsaWNrIG9uIFwiVmlldyByZWNvcmRcIlxuXG4gIGxldCBtb2RhbENvbnRlbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbENvbnRlbnRzXCIpO1xuICBpZiAobW9kYWxDb250ZW50cykge1xuICAgIGxldCBmYWN0RWRpdCA9IG1vZGFsQ29udGVudHMucXVlcnlTZWxlY3RvcihcIiNGYWN0RWRpdENvbXBvbmVudFwiKTtcbiAgICBpZiAoZmFjdEVkaXQpIHtcbiAgICAgIGxldCBsaW5rID0gbW9kYWxDb250ZW50cy5xdWVyeVNlbGVjdG9yKFwiI3ZpZXdSZWNvcmRMaW5rXCIpO1xuICAgICAgaWYgKGxpbmspIHtcbiAgICAgICAgbGV0IHJlY29yZFVybCA9IGxpbmsuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcblxuICAgICAgICAvLyBmb3IgdGhlIG5vcm1hbCBjYXNlIHRoaXMgaXMgYWxsIHdlIG5lZWQgc2luY2Ugd2Ugd2lsbCBleHRyYWN0IHRoZSByZXN0IG9mIHRoZSBkYXRhXG4gICAgICAgIC8vIHdpdGggYSBmZXRjaCB1c2luZyB0aGlzLiBUaGlzIGdldHMgdXMgYmV0dGVyIGRhdGEgKG1haW5seSB0aGUgbGluayBkYXRhKVxuICAgICAgICByZXN1bHQucmVjb3JkVXJsID0gcmVjb3JkVXJsO1xuXG4gICAgICAgIC8vIEhvd2V2ZXIsIGlmIHNvbWVvbmVzIHN1YnNjcmlwdGlvbiBkb2Vzbid0IGFsbG93IGFjZXNzIHRvIHRoaXMgcmVjb3JkIHdlIG1heSBhcyB3ZWxsXG4gICAgICAgIC8vIGV4dHJhY3Qgd2hhdCB3ZSBjYW4uXG4gICAgICAgIGV4dHJhY3REYkFuZFJlY29yZElkKHJlc3VsdCwgcmVjb3JkVXJsKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGltYWdlTGluayA9IG1vZGFsQ29udGVudHMucXVlcnlTZWxlY3RvcihcIiN2aWV3UmVjb3JkSW1hZ2VMaW5rXCIpO1xuICAgICAgaWYgKGltYWdlTGluaykge1xuICAgICAgICBsZXQgdXJsID0gaW1hZ2VMaW5rLmdldEF0dHJpYnV0ZShcImhyZWZcIik7XG5cbiAgICAgICAgLy9jb25zb2xlLmxvZyhcImhhbmRsZVBlcnNvblNvdXJjZUNpdGF0aW9uLCB1cmwgPSBcIiArIHVybCk7XG5cbiAgICAgICAgaWYgKHVybCkge1xuICAgICAgICAgIC8vIEV4YW1wbGU6XG5cbiAgICAgICAgICAvLyBcImh0dHBzOi8vd3d3LmFuY2VzdHJ5LmNvbS9pbnRlcmFjdGl2ZS8yMzUyL3JnMTRfMTQ4MTdfMDA1OV8wMy81NTU2NTgyNFxuICAgICAgICAgIC8vICAgID9iYWNrdXJsPWh0dHBzOi8vd3d3LmFuY2VzdHJ5LmNvbS9mYW1pbHktdHJlZS9wZXJzb24vdHJlZS84NjgwODU3OC9wZXJzb24vNDY1NDg0Mzk1NjIvZmFjdHMvY2l0YXRpb24vMzIzNjM1NjAyMDY5L2VkaXQvcmVjb3JkXCJcbiAgICAgICAgICAvLyBjbGlja2luZyBvbiB0aGlzIGdvZXMgdG86XG4gICAgICAgICAgLy8gaHR0cHM6Ly93d3cuYW5jZXN0cnkuY29tL2ltYWdldmlld2VyL2NvbGxlY3Rpb25zLzIzNTIvaW1hZ2VzL3JnMTRfMTQ4MTdfMDA1OV8wMz9wSWQ9NTU1NjU4MjRcblxuICAgICAgICAgIGxldCBkYklkID0gXCJcIjtcbiAgICAgICAgICBsZXQgcmVjb3JkSWQgPSBcIlwiO1xuXG4gICAgICAgICAgaWYgKHVybC5pbmNsdWRlcyhcIi9pbWFnZXZpZXdlci9cIikpIHtcbiAgICAgICAgICAgIGRiSWQgPSB1cmwucmVwbGFjZSgvLippbWFnZXZpZXdlclxcL2NvbGxlY3Rpb25zXFwvKFteXFwvXSspXFwvaW1hZ2VzXFwvLiovLCBcIiQxXCIpO1xuICAgICAgICAgICAgcmVjb3JkSWQgPSB1cmwucmVwbGFjZSgvLipcXC9pbWFnZXNcXC8oW14/XSspLiovLCBcIiQxXCIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodXJsLmluY2x1ZGVzKFwiL2ludGVyYWN0aXZlL1wiKSkge1xuICAgICAgICAgICAgZGJJZCA9IHVybC5yZXBsYWNlKC8uKmludGVyYWN0aXZlXFwvKFteXFwvXSspXFwvW15cXC9dK1xcLy4qLywgXCIkMVwiKTtcbiAgICAgICAgICAgIHJlY29yZElkID0gdXJsLnJlcGxhY2UoLy4qaW50ZXJhY3RpdmVcXC9bXlxcL10rXFwvKFteXFwvXSspXFwvLiovLCBcIiQxXCIpO1xuICAgICAgICAgICAgbGV0IGJhc2UgPSB1cmwucmVwbGFjZSgvKC4qKVxcL2ludGVyYWN0aXZlXFwvW15cXC9dK1xcL1teXFwvXStcXC8uKi8sIFwiJDFcIik7XG4gICAgICAgICAgICB1cmwgPSBiYXNlICsgXCIvaW1hZ2V2aWV3ZXIvY29sbGVjdGlvbnMvXCIgKyBkYklkICsgXCIvaW1hZ2VzL1wiICsgcmVjb3JkSWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVzdWx0LmltYWdlVXJsID0gdXJsO1xuICAgICAgICAgIHJlc3VsdC5pbWFnZURiSWQgPSBkYklkO1xuICAgICAgICAgIHJlc3VsdC5pbWFnZVJlY29yZElkID0gcmVjb3JkSWQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGV0IGNpdGF0aW9uUmVjb3JkID0gZmFjdEVkaXQucXVlcnlTZWxlY3RvcihcInNlY3Rpb24uY2l0YXRpb25SZWNvcmRcIik7XG4gICAgICBpZiAoY2l0YXRpb25SZWNvcmQpIHtcbiAgICAgICAgcmVzdWx0LnJlY29yZERhdGEgPSB7fTtcblxuICAgICAgICBsZXQgdGl0bGVOb2RlID0gY2l0YXRpb25SZWNvcmQucXVlcnlTZWxlY3RvcihcImgzLmNvblRpdGxlXCIpO1xuICAgICAgICBpZiAodGl0bGVOb2RlKSB7XG4gICAgICAgICAgcmVzdWx0LnRpdGxlQ29sbGVjdGlvbiA9IHRpdGxlTm9kZS50ZXh0Q29udGVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBkaXNwbGF5RmllbGRzID0gY2l0YXRpb25SZWNvcmQucXVlcnlTZWxlY3RvckFsbChcInRyW2lkXj0nZGlzcGxheUZpZWxkcyddXCIpO1xuICAgICAgICBmb3IgKGxldCBkaXNwbGF5RmllbGQgb2YgZGlzcGxheUZpZWxkcykge1xuICAgICAgICAgIGxldCBoZWFkZXIgPSBkaXNwbGF5RmllbGQucXVlcnlTZWxlY3RvcihcInRoXCIpO1xuICAgICAgICAgIGxldCBkYXRhID0gZGlzcGxheUZpZWxkLnF1ZXJ5U2VsZWN0b3IoXCJ0ZFwiKTtcbiAgICAgICAgICBpZiAoaGVhZGVyICYmIGRhdGEpIHtcbiAgICAgICAgICAgIGxldCBrZXkgPSBoZWFkZXIudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBkYXRhLnRleHRDb250ZW50O1xuICAgICAgICAgICAgaWYgKGtleSAmJiB2YWx1ZSkge1xuICAgICAgICAgICAgICAvLyBNYXJpdGFsIFN0YXR1cyBjYW4gYmUgXCJNYXJpdGFsIFN0YXR1c1wiIGlmIG5vIHN1YnNjcmlwdGlvbiBldGNcbiAgICAgICAgICAgICAgLy8gVGhhdCB3b3VsZCBiZSBpbnRlcnByZXRlZCBhcyBcIk1hcnJpZWRcIiBpZiB3ZSBzZXQgaXRcbiAgICAgICAgICAgICAgaWYgKGtleSAhPSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyVmFsdWVzID0gW1wiY2l0eVwiLCBcImxvY2F0aW9uXCIsIFwiZ2VuZGVyXCJdO1xuICAgICAgICAgICAgICAgIGlmICghcGxhY2Vob2xkZXJWYWx1ZXMuaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICByZXN1bHQucmVjb3JkRGF0YVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhvdXNlaG9sZE1lbWJlcnMgPSBjaXRhdGlvblJlY29yZC5xdWVyeVNlbGVjdG9yQWxsKFwidHJbaWRePSdob3VzZWhvbGRNZW1iZXJzJ11cIik7XG4gICAgICAgIGlmIChob3VzZWhvbGRNZW1iZXJzICYmIGhvdXNlaG9sZE1lbWJlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJlc3VsdC5ob3VzZWhvbGQgPSB7fTtcbiAgICAgICAgICBsZXQgdGJvZHkgPSBob3VzZWhvbGRNZW1iZXJzWzBdLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgaWYgKHRib2R5KSB7XG4gICAgICAgICAgICBsZXQgdGhlYWQgPSB0Ym9keS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgaWYgKHRoZWFkKSB7XG4gICAgICAgICAgICAgIGxldCBoZWFkaW5nUm93ID0gdGhlYWQucXVlcnlTZWxlY3RvcihcInRyXCIpO1xuICAgICAgICAgICAgICBpZiAoaGVhZGluZ1Jvdykge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5ob3VzZWhvbGQuaGVhZGluZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICByZXN1bHQuaG91c2Vob2xkLm1lbWJlcnMgPSBbXTtcbiAgICAgICAgICAgICAgICBsZXQgaGVhZGluZ3MgPSBoZWFkaW5nUm93LnF1ZXJ5U2VsZWN0b3JBbGwoXCJ0aFwiKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBoZWFkaW5nIG9mIGhlYWRpbmdzKSB7XG4gICAgICAgICAgICAgICAgICByZXN1bHQuaG91c2Vob2xkLmhlYWRpbmdzLnB1c2goY2xlYW5UZXh0KGhlYWRpbmcudGV4dENvbnRlbnQpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgcm93cyA9IHRib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoXCJ0clwiKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCByb3cgb2Ygcm93cykge1xuICAgICAgICAgICAgICAgICAgbGV0IG1lbWJlciA9IHt9O1xuICAgICAgICAgICAgICAgICAgbGV0IHN1YlJvd0NlbGxzID0gcm93LnF1ZXJ5U2VsZWN0b3JBbGwoXCJ0aCwgdGRcIik7XG4gICAgICAgICAgICAgICAgICBpZiAoc3ViUm93Q2VsbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBjZWxsSW5kZXggPSAwOyBjZWxsSW5kZXggPCBzdWJSb3dDZWxscy5sZW5ndGg7IGNlbGxJbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgbGV0IGNlbGwgPSBzdWJSb3dDZWxsc1tjZWxsSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgIGxldCBtZW1iZXJUZXh0ID0gY2xlYW5UZXh0KGNlbGwudGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgIG1lbWJlcltyZXN1bHQuaG91c2Vob2xkLmhlYWRpbmdzW2NlbGxJbmRleF1dID0gbWVtYmVyVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmVzdWx0LmhvdXNlaG9sZC5tZW1iZXJzLnB1c2gobWVtYmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGV0IGNpdGF0aW9uSW5mbyA9IGZhY3RFZGl0LnF1ZXJ5U2VsZWN0b3IoXCJzZWN0aW9uLmNpdGF0aW9uSW5mb3JtYXRpb25cIik7XG4gICAgICBpZiAoY2l0YXRpb25JbmZvKSB7XG4gICAgICAgIGxldCBib2R5ID0gY2l0YXRpb25JbmZvLnF1ZXJ5U2VsZWN0b3IoXCJkaXYuY29uQm9keVwiKTtcbiAgICAgICAgaWYgKGJvZHkpIHtcbiAgICAgICAgICBsZXQgZHROb2RlcyA9IGJvZHkucXVlcnlTZWxlY3RvckFsbChcImR0XCIpO1xuICAgICAgICAgIGxldCBkZE5vZGVzID0gYm9keS5xdWVyeVNlbGVjdG9yQWxsKFwiZGRcIik7XG4gICAgICAgICAgaWYgKGR0Tm9kZXMubGVuZ3RoID09IDEgJiYgZGROb2Rlcy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgbGV0IHNvdXJjZVRleHQgPSBjbGVhblRleHQoZGROb2Rlc1swXS50ZXh0Q29udGVudCk7XG4gICAgICAgICAgICByZXN1bHQuc291cmNlQ2l0YXRpb24gPSBzb3VyY2VUZXh0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgc291cmNlVGV4dCA9IGNsZWFuVGV4dChib2R5LnRleHRDb250ZW50KTtcbiAgICAgICAgICAgIHJlc3VsdC5zb3VyY2VDaXRhdGlvbiA9IHNvdXJjZVRleHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxldCBzb3VyY2VJbmZvID0gZmFjdEVkaXQucXVlcnlTZWxlY3RvcihcInNlY3Rpb24uc291cmNlSW5mb3JtYXRpb25cIik7XG4gICAgICBpZiAoc291cmNlSW5mbykge1xuICAgICAgICBsZXQgYm9keSA9IHNvdXJjZUluZm8ucXVlcnlTZWxlY3RvcihcImRpdi5jb25Cb2R5XCIpO1xuICAgICAgICBpZiAoYm9keSkge1xuICAgICAgICAgIGxldCBzb3VyY2VUZXh0ID0gY2xlYW5UZXh0KGJvZHkudGV4dENvbnRlbnQpO1xuICAgICAgICAgIHJlc3VsdC5zb3VyY2VJbmZvcm1hdGlvbiA9IHNvdXJjZVRleHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvL2NvbnNvbGUubG9nKFwiaGFuZGxlRmFjdEVkaXQsIHJlY29yZFVybCBpczogXCIgKyByZXN1bHQucmVjb3JkVXJsKTtcbn1cblxuLy8gRXh0cmFjdGluZyB0aGUgSFRNTCBlbGVtZW50cyBpcyB3b3JraW5nIGJ1dCBJIGFtIHVuYWJsZSB0byBnZXQgdGhlIGdpdmVuIG5hbWVcbi8vIGFuZCBsYXN0IG5hbWUgc2VwYXJhdGVseSB0aGF0IHdheS4gVGhlcmUgbWF5IGJlIGEgd2F5IHZpYSBhIGZldGNoLlxuLy8gVGhpcyByZXF1ZXN0OlxuLy8gaHR0cHM6Ly93d3cuYW5jZXN0cnkuY29tL2FwaS90cmVlc3VpLWxpc3QvdHJlZXMvMTE3NDgxODMvcmVjZW50bHl2aWV3ZWRwZXJzb24/ZXhwaXJlcz0xNjY3MTcxODUzNzA2XG4vLyBHZXRzIHRoaXMgcmVzcG9uc2U6XG4vLyB7XCJwaWRcIjpcIjEyOTkyOTg4NjAyXCIsXCJnbmFtZVwiOlwiRmFubmllIEwuXCIsXCJzbmFtZVwiOlwiKEtlbXBlcikgTW9uZXkgQmFyYmVyXCIsXCJpc0xpdmluZ1wiOmZhbHNlfVxuLy8gVGhlIHBpZCBjYW4gYmUgY29tcGFyZWQgd2l0aCB0aGUgcGlkIG9mIHRoZSBwYWdlIHRvIG1ha2Ugc3VyZSBpdCBpcyB0aGUgcmlnaHQgcGVyc29uLlxuZnVuY3Rpb24gaGFuZGxlUGVyc29uRmFjdHMoZG9jdW1lbnQsIHJlc3VsdCkge1xuICBsZXQgcGVyc29uQ2FyZENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGVyc29uQ2FyZENvbnRhaW5lclwiKTtcbiAgaWYgKHBlcnNvbkNhcmRDb250YWluZXIpIHtcbiAgICAvLyBUaGVyZSBpcyBubyB3YXkgdGhhdCBJIGhhdmUgZm91bmQgdG8gZmluZCB0aGUgZ2l2ZW4gbmFtZSBhbmQgc3VybmFtZSBzZXBhcmF0ZWQgaW4gdGhlXG4gICAgLy8gSFRNTCBlbGVtZW50cy4gQnV0IGl0IGNhbiBiZSBmb3VuZCBpbiBhIHNjcmlwdC5cbiAgICBsZXQgc2NyaXB0RWxlbWVudHMgPSBwZXJzb25DYXJkQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCJzY3JpcHRcIik7XG4gICAgZm9yIChsZXQgc2NyaXB0RWxlbWVudCBvZiBzY3JpcHRFbGVtZW50cykge1xuICAgICAgbGV0IHRleHQgPSBzY3JpcHRFbGVtZW50LnRleHRDb250ZW50O1xuICAgICAgbGV0IGZ1bGxOYW1lSW5kZXggPSB0ZXh0LmluZGV4T2YoXCJmdWxsTmFtZTpcIik7XG4gICAgICBpZiAoZnVsbE5hbWVJbmRleCAhPSAtMSkge1xuICAgICAgICBsZXQgZW5kSW5kZXggPSB0ZXh0LmluZGV4T2YoXCJ9XCIsIGZ1bGxOYW1lSW5kZXgpO1xuICAgICAgICBpZiAoZW5kSW5kZXggIT0gLTEpIHtcbiAgICAgICAgICBsZXQgZnVsbE5hbWVUZXh0ID0gdGV4dC5zdWJzdHJpbmcoZnVsbE5hbWVJbmRleCwgZW5kSW5kZXgpO1xuICAgICAgICAgIGxldCBnaXZlbk5hbWUgPSBmdWxsTmFtZVRleHQucmVwbGFjZSgvZnVsbE5hbWU6IHsgZ2l2ZW46ICcoW14nXSopJywgc3VybmFtZTogJygoW14nXSopKScsLiovLCBcIiQxXCIpO1xuICAgICAgICAgIGxldCBzdXJuYW1lID0gZnVsbE5hbWVUZXh0LnJlcGxhY2UoL2Z1bGxOYW1lOiB7IGdpdmVuOiAnKFteJ10qKScsIHN1cm5hbWU6ICcoKFteJ10qKSknLC4qLywgXCIkMlwiKTtcbiAgICAgICAgICBpZiAoZ2l2ZW5OYW1lICYmIGdpdmVuTmFtZSAhPSBmdWxsTmFtZVRleHQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5naXZlbk5hbWUgPSBnaXZlbk5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdXJuYW1lICYmIHN1cm5hbWUgIT0gZnVsbE5hbWVUZXh0KSB7XG4gICAgICAgICAgICByZXN1bHQuc3VybmFtZSA9IHN1cm5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHVzZXJDYXJkVGl0bGUgPSBwZXJzb25DYXJkQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIudXNlckNhcmRUaXRsZVwiKTtcbiAgICBpZiAodXNlckNhcmRUaXRsZSkge1xuICAgICAgbGV0IGZ1bGxOYW1lID0gdXNlckNhcmRUaXRsZS50ZXh0Q29udGVudDtcbiAgICAgIGlmIChmdWxsTmFtZSkge1xuICAgICAgICByZXN1bHQudGl0bGVOYW1lID0gZnVsbE5hbWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHVzZXJDYXJkRXZlbnRzID0gcGVyc29uQ2FyZENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLnVzZXJDYXJkRXZlbnRzXCIpO1xuICAgIGlmICh1c2VyQ2FyZEV2ZW50cykge1xuICAgICAgbGV0IGJpcnRoRGF0ZVNwYW4gPSB1c2VyQ2FyZEV2ZW50cy5xdWVyeVNlbGVjdG9yKFwic3Bhbi5iaXJ0aERhdGVcIik7XG4gICAgICBpZiAoYmlydGhEYXRlU3Bhbikge1xuICAgICAgICByZXN1bHQuYmlydGhEYXRlID0gYmlydGhEYXRlU3Bhbi50ZXh0Q29udGVudDtcbiAgICAgIH1cbiAgICAgIGxldCBiaXJ0aFBsYWNlU3BhbiA9IHVzZXJDYXJkRXZlbnRzLnF1ZXJ5U2VsZWN0b3IoXCJzcGFuLmJpcnRoUGxhY2VcIik7XG4gICAgICBpZiAoYmlydGhQbGFjZVNwYW4pIHtcbiAgICAgICAgcmVzdWx0LmJpcnRoUGxhY2UgPSBiaXJ0aFBsYWNlU3Bhbi50ZXh0Q29udGVudDtcbiAgICAgIH1cblxuICAgICAgbGV0IGRlYXRoRGF0ZVNwYW4gPSB1c2VyQ2FyZEV2ZW50cy5xdWVyeVNlbGVjdG9yKFwic3Bhbi5kZWF0aERhdGVcIik7XG4gICAgICBpZiAoZGVhdGhEYXRlU3Bhbikge1xuICAgICAgICByZXN1bHQuZGVhdGhEYXRlID0gZGVhdGhEYXRlU3Bhbi50ZXh0Q29udGVudDtcbiAgICAgIH1cbiAgICAgIGxldCBkZWF0aFBsYWNlU3BhbiA9IHVzZXJDYXJkRXZlbnRzLnF1ZXJ5U2VsZWN0b3IoXCJzcGFuLmRlYXRoUGxhY2VcIik7XG4gICAgICBpZiAoZGVhdGhQbGFjZVNwYW4pIHtcbiAgICAgICAgcmVzdWx0LmRlYXRoUGxhY2UgPSBkZWF0aFBsYWNlU3Bhbi50ZXh0Q29udGVudDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBsZXQgcmVzZWFyY2hMaXN0RmFjdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Jlc2VhcmNoTGlzdEZhY3RzXCIpO1xuICBpZiAocmVzZWFyY2hMaXN0RmFjdHMpIHtcbiAgICBsZXQgZmFjdExpc3QgPSByZXNlYXJjaExpc3RGYWN0cy5xdWVyeVNlbGVjdG9yQWxsKFwibGkucmVzZWFyY2hMaXN0SXRlbVwiKTtcbiAgICBmb3IgKGxldCBmYWN0IG9mIGZhY3RMaXN0KSB7XG4gICAgICBpZiAoZmFjdC5jbGFzc0xpc3QuY29udGFpbnMoXCJyZXNlYXJjaExpc3RJdGVtR2VuZGVyXCIpKSB7XG4gICAgICAgIGxldCB2YWx1ZU5vZGUgPSBmYWN0LnF1ZXJ5U2VsZWN0b3IoXCJoNFwiKTtcbiAgICAgICAgaWYgKHZhbHVlTm9kZSkge1xuICAgICAgICAgIGxldCBnZW5kZXIgPSB2YWx1ZU5vZGUudGV4dENvbnRlbnQ7XG4gICAgICAgICAgaWYgKGdlbmRlcikge1xuICAgICAgICAgICAgcmVzdWx0LmdlbmRlciA9IGdlbmRlcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBmYWN0SXRlbSA9IGZhY3QucXVlcnlTZWxlY3RvcihcImRpdi5mYWN0SXRlbUZhY3RcIik7XG4gICAgICAgIGlmIChmYWN0SXRlbSkge1xuICAgICAgICAgIGlmIChmYWN0SXRlbS5jbGFzc0xpc3QuY29udGFpbnMoXCJwcmVmZXJyZWRFdmVudE1hcnJpYWdlXCIpKSB7XG4gICAgICAgICAgICBsZXQgbWFycmlhZ2UgPSB7fTtcbiAgICAgICAgICAgIGxldCBkYXRlTm9kZSA9IGZhY3RJdGVtLnF1ZXJ5U2VsZWN0b3IoXCJzcGFuLmZhY3RJdGVtRGF0ZVwiKTtcbiAgICAgICAgICAgIGlmIChkYXRlTm9kZSkge1xuICAgICAgICAgICAgICBsZXQgZGF0ZSA9IGRhdGVOb2RlLnRleHRDb250ZW50O1xuICAgICAgICAgICAgICBpZiAoZGF0ZSkge1xuICAgICAgICAgICAgICAgIG1hcnJpYWdlLmRhdGUgPSBkYXRlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcGxhY2VOb2RlID0gZmFjdEl0ZW0ucXVlcnlTZWxlY3RvcihcInNwYW4uZmFjdEl0ZW1Mb2NhdGlvblwiKTtcbiAgICAgICAgICAgIGlmIChwbGFjZU5vZGUpIHtcbiAgICAgICAgICAgICAgbGV0IHBsYWNlID0gcGxhY2VOb2RlLnRleHRDb250ZW50O1xuICAgICAgICAgICAgICBpZiAocGxhY2UpIHtcbiAgICAgICAgICAgICAgICBtYXJyaWFnZS5wbGFjZSA9IHBsYWNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgc3BvdXNlTm9kZSA9IGZhY3RJdGVtLnF1ZXJ5U2VsZWN0b3IoXCJoNS51c2VyQ2FyZFRpdGxlXCIpO1xuICAgICAgICAgICAgaWYgKHNwb3VzZU5vZGUpIHtcbiAgICAgICAgICAgICAgbGV0IHNwb3VzZU5hbWUgPSBzcG91c2VOb2RlLnRleHRDb250ZW50O1xuICAgICAgICAgICAgICBpZiAoc3BvdXNlTmFtZSkge1xuICAgICAgICAgICAgICAgIG1hcnJpYWdlLnNwb3VzZU5hbWUgPSBzcG91c2VOYW1lO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGFkZCB0aGUgbWFycmlhZ2VcbiAgICAgICAgICAgIGlmICghcmVzdWx0Lm1hcnJpYWdlcykge1xuICAgICAgICAgICAgICByZXN1bHQubWFycmlhZ2VzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQubWFycmlhZ2VzLnB1c2gobWFycmlhZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCBmYW1pbHlTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmYW1pbHlTZWN0aW9uXCIpO1xuICBpZiAoZmFtaWx5U2VjdGlvbikge1xuICAgIC8vIHRoZXJlIGNhbiBiZSBtdWx0aXBsZSByZXNlYXJjaCBsaXN0cyBidXQgcGFyZW50cyBzaG91bGQgYWx3YXlzIGJlIGZpcnN0IG9uZVxuICAgIGxldCBwYXJlbnRSZXNlYXJjaExpc3QgPSBmYW1pbHlTZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoXCJ1bC5yZXNlYXJjaExpc3RcIik7XG5cbiAgICBsZXQgcGFyZW50SXRlbXMgPSBwYXJlbnRSZXNlYXJjaExpc3QucXVlcnlTZWxlY3RvckFsbChcImxpLnJlc2VhcmNoTGlzdEl0ZW1cIik7XG5cbiAgICBpZiAocGFyZW50SXRlbXMubGVuZ3RoID09IDIpIHtcbiAgICAgIGxldCBmYXRoZXJJdGVtID0gcGFyZW50SXRlbXNbMF07XG4gICAgICBsZXQgZmF0aGVyVGl0bGUgPSBmYXRoZXJJdGVtLnF1ZXJ5U2VsZWN0b3IoXCJoNC51c2VyQ2FyZFRpdGxlXCIpO1xuICAgICAgaWYgKGZhdGhlclRpdGxlKSB7XG4gICAgICAgIHJlc3VsdC5mYXRoZXJOYW1lID0gZmF0aGVyVGl0bGUudGV4dENvbnRlbnQ7XG4gICAgICB9XG5cbiAgICAgIGxldCBtb3RoZXJJdGVtID0gcGFyZW50SXRlbXNbMV07XG4gICAgICBsZXQgbW90aGVyVGl0bGUgPSBtb3RoZXJJdGVtLnF1ZXJ5U2VsZWN0b3IoXCJoNC51c2VyQ2FyZFRpdGxlXCIpO1xuICAgICAgaWYgKG1vdGhlclRpdGxlKSB7XG4gICAgICAgIHJlc3VsdC5tb3RoZXJOYW1lID0gbW90aGVyVGl0bGUudGV4dENvbnRlbnQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gI2ZhbWlseTQ2NTUyMTk5NDc0ID4gZGl2Lm5vVG9wU3BhY2luZy51c2VyQ2FyZC51c2VyQ2FyZFNpemUyID4gZGl2LnVzZXJDYXJkQ29udGVudC50ZXh0V3JhcCA+IGg0XG5cbiAgLy9jb25zb2xlLmxvZyhcImhhbmRsZUZhY3RFZGl0LCByZWNvcmRVcmwgaXM6IFwiICsgcmVzdWx0LnJlY29yZFVybCk7XG59XG5cbi8vIFVzZWQgYnkgYmFja2dyb3VuZCBmb3IgZXh0cmFjdGluZyBhIHJlZmVyZW5jZWQgcmVjb3JkXG5mdW5jdGlvbiBleHRyYWN0UmVjb3JkKGRvY3VtZW50LCB1cmwsIHJlc3VsdCkge1xuICBleHRyYWN0RGJBbmRSZWNvcmRJZChyZXN1bHQsIHVybCk7XG4gIGV4dHJhY3RSZWNvcmRQYWdlVGl0bGUoZG9jdW1lbnQsIHJlc3VsdCk7XG4gIGV4dHJhY3RSZWNvcmREYXRhKGRvY3VtZW50LCByZXN1bHQpO1xuICBleHRyYWN0SW1hZ2VUaHVtYihkb2N1bWVudCwgcmVzdWx0KTtcbiAgZXh0cmFjdFJlY29yZFNvdXJjZUNpdGF0aW9uKGRvY3VtZW50LCByZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0RGF0YShkb2N1bWVudCwgdXJsKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcblxuICByZXN1bHQudXJsID0gdXJsOyAvLyB1c2VmdWwgdG8ga25vdyB3aGF0IGRvbWFpbiB0aGlzIHJlY29yZCBpcyBmcm9tXG5cbiAgLy9jb25zb2xlLmxvZyhcIkFuY2VzdHJ5IGV4dHJhY3REYXRhLCB1cmwgPSBcIiArIHVybCk7XG5cbiAgLy8gZmlyc3QgZGV0ZXJtaW5lIHdoYXQga2luZCBvZiBwYWdlIHdlIGFyZSBpbi5cbiAgLy8gLSBSZWNvcmQgcGFnZVxuICAvLyAtIEltYWdlIHBhZ2VcbiAgLy8gLSBJbWFnZSBwYWdlIHdpdGggc2hhcmluZyB1cmwgdXBcblxuICBkZXRlY3RQYWdlVHlwZShkb2N1bWVudCwgcmVzdWx0LCB1cmwpO1xuXG4gIC8vY29uc29sZS5sb2coXCJBbmNlc3RyeSBwYWdlVHlwZSBpcyBcIiArIHJlc3VsdC5wYWdlVHlwZSk7XG5cbiAgaWYgKHJlc3VsdC5wYWdlVHlwZSA9PSBcInJlY29yZFwiKSB7XG4gICAgLy9jb25zb2xlLmxvZyhcIlRoaXMgaXMgYW4gQW5jZXN0cnkgcmVjb3JkIHBhZ2VcIik7XG4gICAgZXh0cmFjdERiQW5kUmVjb3JkSWQocmVzdWx0LCB1cmwpO1xuICAgIGV4dHJhY3RSZWNvcmRQYWdlVGl0bGUoZG9jdW1lbnQsIHJlc3VsdCk7XG4gICAgZXh0cmFjdFJlY29yZERhdGEoZG9jdW1lbnQsIHJlc3VsdCk7XG4gICAgZXh0cmFjdEltYWdlVGh1bWIoZG9jdW1lbnQsIHJlc3VsdCk7XG4gICAgZXh0cmFjdFJlY29yZFNvdXJjZUNpdGF0aW9uKGRvY3VtZW50LCByZXN1bHQpO1xuICB9IGVsc2UgaWYgKHJlc3VsdC5wYWdlVHlwZSA9PSBcImltYWdlXCIpIHtcbiAgICBleHRyYWN0SW1hZ2VQYWdlVGl0bGUoZG9jdW1lbnQsIHJlc3VsdCk7XG4gICAgZXh0cmFjdEltYWdlVGVtcGxhdGUocmVzdWx0LCB1cmwpO1xuICAgIGV4dHJhY3RJbWFnZUJyb3dzZVBhdGgoZG9jdW1lbnQsIHJlc3VsdCk7XG4gICAgZXh0cmFjdEltYWdlTnVtYmVyQW5kVG90YWwoZG9jdW1lbnQsIHJlc3VsdCk7XG4gICAgZXh0cmFjdEltYWdlSGFzSW5kZXgoZG9jdW1lbnQsIHJlc3VsdCk7XG4gIH0gZWxzZSBpZiAocmVzdWx0LnBhZ2VUeXBlID09IFwic2hhcmluZ1VybFwiKSB7XG4gICAgZXh0cmFjdEltYWdlUGFnZVRpdGxlKGRvY3VtZW50LCByZXN1bHQpO1xuICAgIGV4dHJhY3RTaGFyaW5nVXJsVGVtcGxhdGUoZG9jdW1lbnQsIHJlc3VsdCk7XG4gIH0gZWxzZSBpZiAocmVzdWx0LnBhZ2VUeXBlID09IFwic2hhcmluZ0ltYWdlT3JSZWNvcmRcIikge1xuICAgIGlmIChyZXN1bHQuc2hhcmluZ1R5cGUgPT0gXCJ2MVwiKSB7XG4gICAgICBleHRyYWN0U2hhcmluZ0ltYWdlRnVsbFNpemVMaW5rKGRvY3VtZW50LCByZXN1bHQpO1xuICAgICAgZXh0cmFjdFNoYXJpbmdJbWFnZU9yUmVjb3JkRGV0YWlscyhkb2N1bWVudCwgcmVzdWx0KTtcbiAgICB9IGVsc2UgaWYgKHJlc3VsdC5zaGFyaW5nVHlwZSA9PSBcInYyXCIpIHtcbiAgICAgIGV4dHJhY3RTaGFyaW5nSW1hZ2VGdWxsU2l6ZUxpbmtWMihkb2N1bWVudCwgcmVzdWx0KTtcbiAgICAgIGV4dHJhY3RTaGFyaW5nSW1hZ2VPclJlY29yZERldGFpbHNWMihkb2N1bWVudCwgcmVzdWx0KTtcbiAgICB9IGVsc2UgaWYgKHJlc3VsdC5zaGFyaW5nVHlwZSA9PSBcImRpc2NvdmVyaWVzXCIpIHtcbiAgICAgIGV4dHJhY3RTaGFyaW5nSW1hZ2VGdWxsU2l6ZUxpbmtEaXNjb3Zlcmllcyhkb2N1bWVudCwgcmVzdWx0KTtcbiAgICAgIGV4dHJhY3RTaGFyaW5nSW1hZ2VPclJlY29yZERldGFpbHNEaXNjb3Zlcmllcyhkb2N1bWVudCwgcmVzdWx0KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocmVzdWx0LnBhZ2VUeXBlID09IFwicGVyc29uU291cmNlQ2l0YXRpb25cIikge1xuICAgIGhhbmRsZVBlcnNvblNvdXJjZUNpdGF0aW9uKGRvY3VtZW50LCByZXN1bHQpO1xuICB9IGVsc2UgaWYgKHJlc3VsdC5wYWdlVHlwZSA9PSBcInBlcnNvbkZhY3RzXCIpIHtcbiAgICBoYW5kbGVQZXJzb25GYWN0cyhkb2N1bWVudCwgcmVzdWx0KTtcbiAgICBleHRyYWN0VHJlZVRlbXBsYXRlKHJlc3VsdCwgdXJsKTtcbiAgfSBlbHNlIGlmIChyZXN1bHQucGFnZVR5cGUgPT0gXCJ0cmVlTWVkaWFcIikge1xuICAgIGV4dHJhY3RUcmVlTWVkaWFUZW1wbGF0ZShyZXN1bHQsIHVybCk7XG4gIH1cblxuICAvL2NvbnNvbGUubG9nKFwicmVzdWx0IG9mIGV4dHJhY3REYXRhIG9uIEFuY2VzdHJ5XCIpO1xuICAvL2NvbnNvbGUubG9nKHJlc3VsdCk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IHsgZXh0cmFjdERhdGEsIGRldGVjdFBhZ2VUeXBlLCBleHRyYWN0UmVjb3JkIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./extension/site/ancestry/core/ancestry_extract_data.mjs\n");

/***/ }),

/***/ "./extension/site/ancestry/core/ancestry_generalize_data.mjs":
/*!*******************************************************************!*\
  !*** ./extension/site/ancestry/core/ancestry_generalize_data.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GeneralizedData\": () => (/* reexport safe */ _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.GeneralizedData),\n/* harmony export */   \"dateQualifiers\": () => (/* reexport safe */ _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.dateQualifiers),\n/* harmony export */   \"generalizeData\": () => (/* binding */ generalizeData),\n/* harmony export */   \"generalizeDataGivenRecordType\": () => (/* binding */ generalizeDataGivenRecordType),\n/* harmony export */   \"regeneralizeDataWithLinkedRecords\": () => (/* binding */ regeneralizeDataWithLinkedRecords)\n/* harmony export */ });\n/* harmony import */ var _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/core/generalize_data_utils.mjs */ \"./extension/base/core/generalize_data_utils.mjs\");\n/* harmony import */ var _base_core_record_collections_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/core/record_collections.mjs */ \"./extension/base/core/record_collections.mjs\");\n/* harmony import */ var _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/core/record_type.mjs */ \"./extension/base/core/record_type.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\n\n\nconst eventTypeStringToDataType = {\n  BirthRegistration: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.BirthRegistration,\n  Birth: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Birth,\n  DeathRegistration: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.DeathRegistration,\n  Death: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Death,\n  Marriage: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Marriage,\n  \"ægteskab(Marriage)\": _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Marriage,\n  MarriageLicense: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Marriage,\n  Census: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Census,\n  ElectoralRegister: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.ElectoralRegister,\n  Baptism: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Baptism,\n  Burial: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Burial,\n  CriminalRegister: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.CriminalRegister,\n  FreemasonMembership: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.FreemasonMembership,\n  Probate: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Probate,\n  Divorce: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Divorce,\n  MilitaryService: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Military,\n  TaxList: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Tax,\n};\n\nconst recordTypeByFields = [\n  { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Divorce, labels: [\"Divorce Date\"] },\n  { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Marriage, labels: [\"Marriage Date\", \"Marriage Place\", \"Spouse\"] },\n  {\n    type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Marriage,\n    labels: [\"Marriage License Date\", \"Marriage License Place\", \"Spouse\"],\n  },\n  { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Marriage, labels: [\"License Date\", \"License Place\", \"Spouse\"] },\n  { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Baptism, labels: [\"Baptism Date\", \"Baptism Place\"] },\n  { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Burial, labels: [\"Burial Date\", \"Burial Place\"] },\n  { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Burial, labels: [\"Burial Year\", \"Burial Place\"] },\n  { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Burial, labels: [\"Death Date\", \"Burial Place\"] },\n  { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Marriage, labels: [\"Marriage Date\", \"Marriage Place\"] },\n  { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Marriage, labels: [\"Marriage Date on Image\", \"Marriage Place\"] },\n  { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Marriage, labels: [\"Marriage Year\", \"Marriage Place\"] },\n  { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Marriage, labels: [\"Marriage Year\", \"Marriage State\"] },\n  { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Marriage, labels: [\"Marriage Date\"] },\n  { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.MarriageRegistration, labels: [\"Marriage Registration Place\"] },\n  { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.MarriageRegistration, labels: [\"Marriage Registration Date\"] },\n  { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.MarriageRegistration, labels: [\"Marriage Registration Year\"] },\n  {\n    type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Death,\n    labels: [\"Death Date on Image\", \"Translated Death Date\", \"Death Place\"],\n  },\n  { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Death, labels: [\"Death Date\", \"Monthly Meeting\"] },\n  { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Military, labels: [\"Enlistment Date\", \"Enlistment Place\"] },\n];\n\nfunction determineRecordType(extractedData) {\n  const titleMatches = [\n    { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Baptism, matches: [\"Christening Index\"] },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.BirthRegistration,\n      matches: [\"Birth Index\"],\n      requiredData: [\"Birth Registration Date\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.BirthRegistration,\n      matches: [\"Birth Index\"],\n      requiredData: [\"Birth Registration Place\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Birth,\n      matches: [\"Birth Certificate\", \"Birth Record\", \"Birth Index\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Baptism,\n      matches: [\"Births and Christenings\", \"Births and Baptisms\", \"Church of England Baptisms\", \"Baptism Index\"],\n      requiredData: [\"Baptism Date\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Birth,\n      matches: [\"Births and Christenings\", \"Births and Baptisms\", \"Canada Births\", \"Canada, Births\", \"Birth Registers\"],\n      requiredData: [\"Birth Date\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Birth,\n      matches: [\"Millennium File\", \"Vital Extracts\", \"Membership of The Church of Jesus Christ of Latter-day Saints\"],\n      requiredData: [\"Birth Date\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Birth,\n      matches: [\"Births\"],\n      requiredData: [\"Birth Date\", \"Birth Place\", \"Gender\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.BirthOrBaptism,\n      matches: [\n        \"Select Births and Christenings\",\n        \"Select Births and Baptisms\",\n        \"Church of England Births and Baptisms\",\n      ],\n    },\n\n    { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Divorce, matches: [\"Divorce Records\", \"Divorce Index\"] },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Marriage,\n      matches: [\n        \"Church of England Marriages and Banns\",\n        \"Marriage Registers, Bonds and Allegations\",\n        \"U.S. and International Marriage Records\",\n        \"Index to Marriage Bonds\",\n        \"Marriage Bonds and Allegations\",\n      ],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Burial,\n      matches: [\n        \"Church of England Burials\",\n        \"England Deaths and Burials\",\n        \"Burial and Cremation Index\",\n        \"Find a Grave\",\n        \"Cemetery Burial Cards\",\n        \"Veterans Burial Cards\",\n        \"Gravesites\",\n        \"Graves of Revolutionary Patriots\",\n      ],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Burial,\n      matches: [\"Deaths and Burials\", \"Cemetery\", \"Funeral Home\", \"Gravestone\"],\n      requiredData: [\"Burial Date\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Cremation,\n      matches: [\"Cemetery Records\"],\n      requiredData: [\"Cremation Date\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Burial,\n      matches: [\"Historical Cemetery Commission Index\", \"Headstone Transcriptions\", \"Cemetery\", \"Funeral\"],\n      requiredData: [\"Burial Place\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.DeathRegistration,\n      matches: [\"Deaths\", \"Death Records\", \"Death Index\"],\n      requiredData: [\"Death Registration Place\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Death,\n      matches: [\"Deaths\", \"Death Records\", \"Scotland, Local Heritage Index\"],\n      requiredData: [\"Death Date\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Death,\n      matches: [\n        \"Death Index\",\n        \"Death Certificate\",\n        \"U.S., Death Record\",\n        \"Index to Deceased Estate Files\",\n        \"Death Notice\",\n        \"Canada, Deaths\",\n      ],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.NonpopulationCensus,\n      matches: [\"Census Non-Population Schedule\"],\n    },\n    { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Census, matches: [\"Census\", \"1939 England and Wales Register\"] },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.ElectoralRegister,\n      matches: [\"Electoral Roll\", \"Voter Registers\", \"Electoral Registers\"],\n    },\n    { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Probate, matches: [\"Probate\"] },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Will,\n      matches: [\"Prerogative Court of Canterbury Wills\", \"Will Index\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.MarriageRegistration,\n      matches: [\"Civil Registration Marriage Index\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.CriminalRegister,\n      matches: [\"Criminal Register\", \"Police Gazettes\", \"Convict Register\", \"Prison Hulk Register\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.FreemasonMembership,\n      matches: [\"Freemason Membership\", \"Mason Membership Cards\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.WorkhouseRecord,\n      matches: [\"Workhouse Admission and Discharge Records\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.PassengerList,\n      matches: [\n        \"Passenger List\",\n        \"Passenger and Crew List\",\n        \"Passenger and Immigration Lists Index\",\n        \"Index to Alien Arrivals\",\n      ],\n    },\n    { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.CrewList, matches: [\"Crew List\"] },\n    { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.ConvictTransportation, matches: [\"Convict Transportation\"] },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Military,\n      matches: [\n        \"Medal and Award Rolls\",\n        \"British Army World War I Service Records\",\n        \"Army World War I Pension\",\n        \"World War I Pension Ledgers and Index Cards\",\n        \"Regimental Rolls and Recruitment Registers\",\n        \"Chelsea Pensioner Soldier Service Records\",\n        \"Soldiers Died in the Great War\",\n        \"World War I\",\n        \"War Graves\",\n        \"U.S., Department of Veterans Affairs BIRLS Death File\",\n        \"UK, Army Registers of Soldiers' Effects\",\n        \"Soldier Grave Registrations\",\n        \"Military Service\",\n        \"Compiled Service Records\",\n        \"Volunteer Militia\",\n        \"Revolutionary War Residents\",\n        \"Soldier Records\",\n        \"War Soldiers\",\n        \"Prisoner of War\",\n        \"War Rolls\",\n        \"War Pensioners\",\n        \"War of 1812 Pension\",\n        \"Draft Registration\",\n        \"Civil, Military, and Naval Service\",\n        \"Air Force Airmen Records\",\n        \"Navy Registers of Seamen's Services\",\n        \"Confederate Pensions\",\n        \"War Pension\",\n      ],\n    },\n    { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Military, matches: [\"War\"], secondMatches: [\"Pension\"] },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.MedicalPatient,\n      matches: [\"Lunacy Patients Admission Registers\"],\n    },\n    { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.QuarterSession, matches: [\"Quarter Sessions\"] },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Directory,\n      matches: [\n        \"City and County Directories\",\n        \"City Directories\",\n        \"City and Area Directories\",\n        \"Phone Book\",\n        \"Trade Directories\",\n      ],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Employment,\n      matches: [\n        \"Employment Records\",\n        \"UK, Postal Service Appointment Books\",\n        \"Nursing Registers\",\n        \"Appointments of U. S. Postmasters\",\n        \"Police Pension Registers\",\n      ],\n    },\n    { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.SocialSecurity, matches: [\"U.S., Social Security\"] },\n    { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.LandTax, matches: [\"Land Tax Redemption\", \"Land Tax Records\"] },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Tax,\n      matches: [\"Direct Tax Lists\", \"Tax and Exoneration\", \"Tax List Record\", \"Tax Record\"],\n    },\n    { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Apprenticeship, matches: [\"Apprentices' Indentures\"] },\n    { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Obituary, matches: [\"Obituary\", \"Obituaries\"] },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.SchoolRecords,\n      matches: [\"School Yearbook\", \"School Admission\", \"School Registers\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Naturalization,\n      matches: [\"Naturalization Record\", \"Naturalisation Certificate\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.LegalRecord,\n      matches: [\"Land Warrant\", \"Land Office Records\", \"Homestead Grant\"],\n    },\n    { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Immigration, matches: [\"Immigration Records\"] },\n    { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Emigration, matches: [\"Emigration Records\"] },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Certificate,\n      matches: [\"Certificate\"],\n      requiredData: [\"Issue Date\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Residence,\n      matches: [\"Residents\", \"U.S., Public Records Index\"],\n      requiredData: [\"Residence Place\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Residence,\n      matches: [\"U.S., Public Records Index\"],\n      requiredData: [\"Residence\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Residence,\n      matches: [\"U.S., Public Records Index\"],\n      requiredData: [\"Residence Date\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.FamHistOrPedigree,\n      matches: [\"of the American Revolution Membership\", \"Colonial Families of the USA\"],\n    },\n    {\n      // This could possibly be confused with a child marriage. It is to handle a record like this:\n      // https://www.ancestry.com/discoveryui-content/view/154307070:61039\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Baptism,\n      matches: [\"Catholic Parish Registers\"],\n      requiredData: [\"Name\", \"Child\", \"Gender\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.MarriageRegistration,\n      matches: [\"Marriage Index\"],\n      requiredData: [\"Marriage Registration Place\", \"Spouse\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Marriage,\n      matches: [\"Marriage Index\"],\n      requiredData: [\"Spouse\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Birth,\n      matches: [\"American Genealogical-Biographical Index\"],\n      requiredData: [\"Birth Date\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Military,\n      matches: [\"Veteran\", \"Soldier\", \"Military\", \"Armed\"],\n      requiredData: [\"Rank\"],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Military,\n      matches: [\"Veterans\", \"Soldier\", \"Military\", \"Armed\"],\n      requiredData: [\"Muster In Date\"],\n    },\n    { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.PassportApplication, matches: [\"Passport Application\"] },\n    { type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Pension, matches: [\"Pension Index\"] },\n  ];\n\n  //console.log(\"in determineRecordType\");\n  //console.log(extractedData);\n\n  let eventTypeString = undefined;\n  if (extractedData.recordData) {\n    eventTypeString = extractedData.recordData[\"Event Type\"];\n    if (!eventTypeString) {\n      eventTypeString = extractedData.recordData[\"Record Type\"];\n    }\n  }\n\n  if (eventTypeString) {\n    eventTypeString = eventTypeString.replace(/\\s/g, \"\");\n    let dataType = eventTypeStringToDataType[eventTypeString];\n    if (!dataType) {\n      console.log(\"determineRecordType: Unrecognised event type: \" + eventTypeString);\n    } else {\n      return dataType;\n    }\n  }\n\n  if (extractedData.titleCollection) {\n    // check for birth or death registration\n    if (extractedData.titleCollection.includes(\"Registration\")) {\n      if (extractedData.titleCollection.includes(\"Birth\")) {\n        return _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.BirthRegistration;\n      }\n      if (extractedData.titleCollection.includes(\"Death\")) {\n        return _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.DeathRegistration;\n      }\n      if (extractedData.titleCollection.includes(\"Marriage\")) {\n        return _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.MarriageRegistration;\n      }\n    }\n\n    // check for a marriage\n    if (\n      extractedData.titleCollection.includes(\"Marriage\") &&\n      extractedData.recordData &&\n      extractedData.recordData[\"Marriage Date\"]\n    ) {\n      return _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Marriage;\n    }\n\n    if (extractedData.titleCollection.includes(\"Criminal Register\")) {\n      return _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.CriminalRegister;\n    }\n\n    if (extractedData.titleCollection.includes(\"Freemason Membership\")) {\n      return _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.FreemasonMembership;\n    }\n\n    for (let titleMatch of titleMatches) {\n      let titleMatched = false;\n      for (let match of titleMatch.matches) {\n        if (extractedData.titleCollection.includes(match)) {\n          titleMatched = true;\n          break;\n        }\n      }\n      if (!titleMatched) {\n        continue;\n      }\n\n      if (titleMatch.secondMatches) {\n        let secondTitleMatched = false;\n        for (let match of titleMatch.secondMatches) {\n          if (extractedData.titleCollection.includes(match)) {\n            secondTitleMatched = true;\n            break;\n          }\n        }\n        if (!secondTitleMatched) {\n          continue;\n        }\n      }\n\n      if (!titleMatch.requiredData) {\n        return titleMatch.type;\n      } else if (extractedData.recordData) {\n        let match = true;\n        for (let fieldName of titleMatch.requiredData) {\n          if (!extractedData.recordData[fieldName]) {\n            match = false;\n            break;\n          }\n        }\n        if (match) {\n          return titleMatch.type;\n        }\n      }\n    }\n  }\n\n  // The title and record/event type have not identfied the record\n  // Try to classify it using recordData field names\n  if (extractedData.recordData) {\n    for (let entry of recordTypeByFields) {\n      let match = true;\n      for (let fieldName of entry.labels) {\n        if (!extractedData.recordData[fieldName]) {\n          match = false;\n          break;\n        }\n      }\n\n      if (match) {\n        return entry.type;\n      }\n    }\n  }\n\n  return _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Unclassified;\n}\n\nfunction determineRoleGivenRecordType(extractedData, result) {\n  //console.log(\"determineRoleGivenRecordType, recordType is: \" + result.recordType);\n  //console.log(\"determineRoleGivenRecordType, extractedData is: \");\n  //console.log(extractedData);\n\n  if (!extractedData.recordData) {\n    return; // can't assign a role\n  }\n\n  let recordType = result.recordType;\n\n  if (recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Baptism || recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Birth || recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.BirthOrBaptism) {\n    // if there is a baptism date etc then this is likely a record for this person not a\n    // child or spouse. There could be a birth date though - for the parent of the child\n    // e.g.: https://www.ancestry.com/discoveryui-content/view/300065623:8703?ssrc=pt&tid=180320731&pid=412419830925\n    let value = getCleanValueForRecordDataList(extractedData, [\"Baptism Date\", \"Christening Date\"]);\n    if (!value) {\n      if (extractedData.recordData[\"Child\"]) {\n        // some family records have all parents and children of the primary person\n        // ignore if Father or Mother fields\n        if (!extractedData.recordData[\"Father\"] && !extractedData.recordData[\"Mother\"]) {\n          result.role = _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Parent;\n          result.primaryPerson = extractedData.recordData[\"Child\"];\n        }\n      }\n    }\n  } else if (recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Death || recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.DeathRegistration || recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Burial) {\n    // if there is a death or burial date etc then this is likely a record for this person not a\n    // child or spouse\n    let value = getCleanValueForRecordDataList(extractedData, [\n      \"Death Date\",\n      \"Burial Date\",\n      \"Cremation Date\",\n      \"Burial Year\",\n    ]);\n    if (!value) {\n      if (extractedData.recordData[\"Child\"]) {\n        result.role = _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Parent;\n        result.primaryPerson = extractedData.recordData[\"Child\"];\n      } else if (extractedData.recordData[\"Spouse\"]) {\n        if (\n          !extractedData.recordData[\"Death Date\"] &&\n          !extractedData.recordData[\"Death Place\"] &&\n          !extractedData.recordData[\"Burial Date\"] &&\n          !extractedData.recordData[\"Burial Year\"] &&\n          !extractedData.recordData[\"Burial Place\"]\n        ) {\n          result.role = _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Spouse;\n          result.primaryPerson = extractedData.recordData[\"Spouse\"];\n        }\n      }\n    }\n  } else if (recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Marriage || recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.MarriageRegistration) {\n    // if there is a date etc then this is likely a record for this person not a\n    // child or spouse\n    let value = getCleanValueForRecordDataList(extractedData, [\"Marriage Date\"]);\n    if (!value) {\n      if (extractedData.recordData[\"Child\"]) {\n        if (!extractedData.recordData[\"Father\"] && !extractedData.recordData[\"Mother\"]) {\n          result.role = _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Parent;\n          result.primaryPerson = extractedData.recordData[\"Child\"];\n        }\n      }\n    }\n  }\n  // possibly any other type should go through here?\n  // We could possibly test if recordData num properties is <= 4 or something like that\n  else if (recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Unclassified || recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Employment) {\n    let value = getCleanValueForRecordDataList(extractedData, [\n      \"Birth Date\",\n      \"Baptism Date\",\n      \"Christening Date\",\n      \"Death Date\",\n      \"Burial Date\",\n      \"Cremation Date\",\n      \"Marriage Date\",\n    ]);\n    if (!value) {\n      if (extractedData.recordData[\"Child\"]) {\n        if (!extractedData.recordData[\"Father\"] && !extractedData.recordData[\"Mother\"]) {\n          result.role = _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Parent;\n          result.primaryPerson = extractedData.recordData[\"Child\"];\n        }\n      }\n    }\n  } else if (recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Obituary) {\n    // obituary can have lots of relations\n    let value = getCleanValueForRecordDataList(extractedData, [\n      \"Death Date\",\n      \"Burial Date\",\n      \"Cremation Date\",\n      \"Burial Year\",\n    ]);\n    if (!value) {\n      if (\n        !extractedData.recordData[\"Death Date\"] &&\n        !extractedData.recordData[\"Death Place\"] &&\n        !extractedData.recordData[\"Death Age\"]\n      ) {\n        if (extractedData.recordData[\"Child\"]) {\n          result.role = _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Parent;\n          result.primaryPerson = extractedData.recordData[\"Child\"];\n        } else if (extractedData.recordData[\"Spouse\"]) {\n          result.role = _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Spouse;\n          result.primaryPerson = extractedData.recordData[\"Spouse\"];\n        } else if (extractedData.recordData[\"Father\"]) {\n          result.role = _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Child;\n          result.primaryPerson = extractedData.recordData[\"Father\"];\n        } else if (extractedData.recordData[\"Mother\"]) {\n          result.role = _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Child;\n          result.primaryPerson = extractedData.recordData[\"Mother\"];\n        } else if (extractedData.recordData[\"Siblings\"]) {\n          result.role = _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Sibling;\n          result.primaryPerson = extractedData.recordData[\"Siblings\"];\n        }\n      }\n    }\n  }\n\n  //console.log(\"determineRoleGivenRecordType. role is: \" + result.role);\n}\n\nfunction determineRecordTypeAndRole(extractedData, result) {\n  result.recordType = determineRecordType(extractedData);\n  determineRoleGivenRecordType(extractedData, result);\n}\n\nfunction monthStrToNum(monthStr) {\n  const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n  for (let i = 0; i < months.length; ++i) {\n    if (monthStr.startsWith(months[i])) {\n      return i + 1;\n    }\n  }\n\n  return 0;\n}\n\nfunction cleanDateString(dateString) {\n  // sometimes records have dates like this:\n  // 25. Jun 1840 (25 Jun 1840)\n\n  let newString = dateString.trim();\n  newString = newString.replace(\"s+\", \" \");\n\n  if (/^\\d\\d? \\w\\w\\w \\d\\d\\d\\d$/.test(newString)) {\n    // this is the \"normal\" format for an Ancestry date string\n    return newString;\n  }\n\n  let openParenIndex = newString.indexOf(\"(\");\n  if (openParenIndex != -1) {\n    // there is an open parentheses\n    let closeParenIndex = newString.indexOf(\")\");\n    if (closeParenIndex != -1 && closeParenIndex > openParenIndex) {\n      let firstDateString = newString.substring(0, openParenIndex).trim();\n      let secondDateString = newString.substring(openParenIndex + 1, closeParenIndex).trim();\n      if (/^\\d\\d? \\w\\w\\w \\d\\d\\d\\d$/.test(secondDateString)) {\n        return secondDateString;\n      }\n      if (/^\\d\\d? \\w\\w\\w \\d\\d\\d\\d$/.test(firstDateString)) {\n        return firstDateString;\n      }\n\n      // neither date is expected format. Just use the one in parents and continue checks\n      newString = secondDateString;\n    } else {\n      newString = newString.substring(0, openParenIndex).trim();\n    }\n  }\n\n  return newString;\n}\n\nfunction getCleanRecordDataValue(data, fieldName, type = \"\") {\n  if (!data.recordData) {\n    return \"\";\n  }\n\n  let value = data.recordData[fieldName];\n  if (value == undefined) {\n    return value;\n  }\n\n  // sometimes there are values in square brackets after the first value\n  // these make it hard to parse dates, placses names etc so remove them\n  let bracketIndex = value.indexOf(\"[\");\n  if (bracketIndex != -1) {\n    value = value.substring(0, bracketIndex).trim();\n  }\n\n  // sometimes places have commas with no space after them\n  value = value.replace(/\\,([^\\s])/g, \", $1\");\n\n  if (type == \"date\") {\n    value = cleanDateString(value);\n  }\n\n  return value;\n}\n\nfunction getCleanValueForRecordDataList(data, fieldNames, type = \"\") {\n  for (let fieldName of fieldNames) {\n    let value = getCleanRecordDataValue(data, fieldName, type);\n    if (value) {\n      return value;\n    }\n  }\n}\n\nfunction buildParents(data, result) {\n  let fatherName = getCleanValueForRecordDataList(data, [\"Father\", \"Father Name\"]);\n  if (fatherName) {\n    let father = result.addFather();\n    father.name.name = fatherName;\n  }\n  let motherName = getCleanValueForRecordDataList(data, [\"Mother\", \"Mother Name\"]);\n  if (motherName) {\n    let mother = result.addMother();\n    mother.name.name = motherName;\n  }\n\n  let mmn = getCleanValueForRecordDataList(data, [\"Mother Maiden Name\", \"Mother's Maiden Name\"]);\n  if (mmn) {\n    result.mothersMaidenName = mmn;\n  }\n}\n\nfunction buildEventPlace(data, result, includeResidence) {\n  let country = getCleanValueForRecordDataList(data, [\"Country\"]);\n  let state = getCleanValueForRecordDataList(data, [\"State\", \"Province\"]);\n  let county = getCleanValueForRecordDataList(data, [\"County/Island\", \"County\", \"County or Borough\"]);\n  let civilParish = getCleanValueForRecordDataList(data, [\"Civil Parish\", \"Civil parish\", \"Parish\"]);\n  let town = getCleanValueForRecordDataList(data, [\"Town\", \"Ward or Division/Constituency\", \"Locality\"]);\n  let streetAddress = getCleanValueForRecordDataList(data, [\"Street Address\", \"Address\"]);\n  let houseNumber = getCleanValueForRecordDataList(data, [\"House Number\"]);\n  let residence = \"\";\n\n  if (includeResidence) {\n    if (!country) {\n      country = getCleanValueForRecordDataList(data, [\"Residence Country\"]);\n    }\n    if (!state) {\n      state = getCleanValueForRecordDataList(data, [\"Residence State\", \"Residence Province or Territory\"]);\n    }\n    if (!county) {\n      county = getCleanValueForRecordDataList(data, [\n        \"County/Island\",\n        \"County\",\n        \"County or Borough\",\n        \"Residence County\",\n      ]);\n    }\n    if (!town) {\n      town = getCleanValueForRecordDataList(data, [\"Place of Habitation\", \"Residence District\"]);\n    }\n    if (!streetAddress) {\n      streetAddress = getCleanValueForRecordDataList(data, [\n        \"Street Address\",\n        \"Address\",\n        \"Residence Street or Township\",\n      ]);\n    }\n\n    let yearString = result.inferEventYear();\n    let homeString = \"Home in \" + yearString; // label used in US federal census\n    let homeString2 = \"Home in \" + yearString + \" (City, County, State)\"; // label used in US 1800-1840 federal census\n    residence = getCleanValueForRecordDataList(data, [\"Residence\", \"Residence Place\", homeString, homeString2]);\n  }\n\n  let placeString = \"\";\n  if (residence && residence.includes(\",\")) {\n    // for example in US state census Residence is the full address. It is in UK 1891 census too\n    // It is not in Ontario, Canada, County Marriage Registers, 1858-1869 though\n    placeString += residence;\n  } else {\n    if (streetAddress) {\n      if (houseNumber && !streetAddress.startsWith(houseNumber)) {\n        placeString += houseNumber + \" \";\n      }\n      placeString += streetAddress;\n    } else if (residence) {\n      placeString += residence;\n    }\n\n    if (town) {\n      if (placeString) {\n        placeString += \", \";\n      }\n      placeString += town;\n    }\n    if (civilParish && civilParish != town) {\n      if (placeString) {\n        placeString += \", \";\n      }\n      placeString += civilParish;\n    }\n    if (county) {\n      if (placeString) {\n        placeString += \", \";\n      }\n      placeString += county;\n    }\n    if (state) {\n      if (placeString) {\n        placeString += \", \";\n      }\n      placeString += state;\n    }\n    if (country) {\n      if (placeString) {\n        placeString += \", \";\n      }\n      placeString += country;\n    }\n  }\n  result.setEventPlace(placeString);\n\n  if (streetAddress) {\n    if (houseNumber && !streetAddress.startsWith(houseNumber)) {\n      result.eventPlace.streetAddress = houseNumber + \" \" + streetAddress;\n    } else {\n      result.eventPlace.streetAddress = streetAddress;\n    }\n  }\n}\n\nconst ancestryQuarterNames = [\n  {\n    name: \"Jan-Feb-Mar\",\n    value: 1,\n  },\n  {\n    name: \"Apr-May-Jun\",\n    value: 2,\n  },\n  {\n    name: \"Jul-Aug-Sep\",\n    value: 3,\n  },\n  {\n    name: \"Oct-Nov-Dec\",\n    value: 4,\n  },\n];\n\nconst ancestryQuarterMonthNames = [\n  {\n    name: \"Jan\",\n    value: 1,\n  },\n  {\n    name: \"Apr\",\n    value: 2,\n  },\n  {\n    name: \"Jul\",\n    value: 3,\n  },\n  {\n    name: \"Oct\",\n    value: 4,\n  },\n];\n\nfunction generalizeDataGivenRecordType(data, result) {\n  determineRoleGivenRecordType(data, result);\n\n  if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.BirthRegistration) {\n    let birthDate = getCleanValueForRecordDataList(data, [\"Birth Date\"], \"date\");\n    if (birthDate) {\n      result.setEventDate(birthDate);\n      result.setBirthDate(birthDate);\n    } else if (result.eventDate) {\n      // result.eventDate may be set from \"Registration Year\"\n      result.birthDate = result.eventDate;\n    }\n\n    let eventPlace = getCleanValueForRecordDataList(data, [\"Birth Registration Place\", \"Registration Place\"]);\n    if (eventPlace) {\n      if (!result.registrationDistrict) {\n        let place = eventPlace;\n        let commaIndex = place.indexOf(`,`);\n        if (commaIndex != -1) {\n          place = place.substring(0, commaIndex);\n        }\n        result.registrationDistrict = place;\n      }\n\n      let county = getCleanRecordDataValue(data, \"Inferred County\");\n      if (county && !eventPlace.includes(county)) {\n        eventPlace += \", \" + county;\n      }\n      result.setEventPlace(eventPlace);\n    } else if (result.registrationDistrict && data.recordData[\"Inferred County\"]) {\n      let eventPlace = result.registrationDistrict;\n      let county = getCleanRecordDataValue(data, \"Inferred County\");\n      if (!eventPlace.includes(county)) {\n        eventPlace += \", \" + county;\n      }\n      result.setEventPlace(eventPlace);\n    }\n    result.lastNameAtBirth = result.inferLastName();\n\n    buildParents(data, result);\n  } else if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Birth) {\n    let birthDate = getCleanRecordDataValue(data, \"Birth Date\", \"date\");\n    if (birthDate) {\n      result.setEventDate(birthDate);\n      result.setBirthDate(birthDate);\n    }\n\n    let eventPlace = getCleanValueForRecordDataList(data, [\"Birth Place\", \"Birthplace\", \"Registration Place\"]);\n    if (eventPlace) {\n      result.setBirthPlace(eventPlace);\n      result.setEventPlace(eventPlace);\n    }\n    result.lastNameAtBirth = result.inferLastName();\n    buildParents(data, result);\n\n    if (result.role && result.role == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Parent) {\n      let spouseName = getCleanValueForRecordDataList(data, [\"Spouse\"]);\n      if (spouseName) {\n        let name = new _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.WtsName();\n\n        if (spouseName) {\n          name.name = spouseName;\n        }\n\n        let spouse = {\n          name: name,\n        };\n\n        result.spouses = [spouse];\n      }\n    }\n\n    let mmn = getCleanValueForRecordDataList(data, [\"Mother Maiden Name\"]);\n    if (mmn) {\n      result.mothersMaidenName = mmn;\n    }\n  } else if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.DeathRegistration) {\n    let deathDate = getCleanValueForRecordDataList(\n      data,\n      [\"Death Date\", \"Death Registration Date\", \"Death Registration Year\"],\n      \"date\"\n    );\n    if (deathDate) {\n      result.setEventDate(deathDate);\n      result.setDeathDate(deathDate);\n    } else if (result.eventDate) {\n      // result.eventDate may be set from \"Registration Year\"\n      result.deathDate = result.eventDate;\n    }\n\n    let eventPlace = getCleanValueForRecordDataList(data, [\"Death Registration Place\", \"Registration Place\"]);\n    if (eventPlace) {\n      if (!result.registrationDistrict) {\n        let place = eventPlace;\n        let commaIndex = place.indexOf(`,`);\n        if (commaIndex != -1) {\n          place = place.substring(0, commaIndex);\n        }\n        result.registrationDistrict = place;\n      }\n\n      let county = getCleanRecordDataValue(data, \"Inferred County\");\n      if (county && !eventPlace.includes(county)) {\n        eventPlace += \", \" + county;\n      }\n      result.setEventPlace(eventPlace);\n    } else {\n      let eventPlace = getCleanValueForRecordDataList(data, [\"Death Place\", \"Death County\", \"Residence Place\"]);\n      result.setEventPlace(eventPlace);\n    }\n\n    result.lastNameAtDeath = result.inferLastName();\n    result.ageAtDeath = getCleanValueForRecordDataList(data, [\"Age at Death\", \"Death Age\", \"Age\"]);\n\n    // later England Death Registration include exact birth date\n    let birthDate = getCleanValueForRecordDataList(data, [\"Birth Date\"], \"date\");\n    if (birthDate) {\n      result.setBirthDate(birthDate);\n    }\n  } else if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Death) {\n    let deathDate = getCleanValueForRecordDataList(\n      data,\n      [\"Death Date\", \"Translated Death Date\", \"Death Date on Image\", \"Death Year\"],\n      \"date\"\n    );\n    if (deathDate) {\n      result.setEventDate(deathDate);\n      result.setDeathDate(deathDate);\n    } else if (result.eventDate) {\n      // result.eventDate may be set from \"Registration Year\"\n      result.deathDate = result.eventDate;\n    }\n\n    let eventPlace = getCleanValueForRecordDataList(data, [\"Death Place\", \"Death County\", \"Death Country\", \"State\"]);\n    result.setEventPlace(eventPlace);\n\n    let residencePlace = getCleanValueForRecordDataList(data, [\n      \"Residence Place\",\n      \"Last Residence Place\",\n      \"Last Residence\",\n      \"Residence\",\n    ]);\n    result.setResidencePlace(residencePlace);\n\n    result.lastNameAtDeath = result.inferLastName();\n\n    let maidenName = getCleanValueForRecordDataList(data, [\"Maiden Name\"]);\n    if (maidenName) {\n      result.lastNameAtBirth = maidenName;\n    }\n\n    let ageAtDeath = getCleanValueForRecordDataList(data, [\"Age at Death\", \"Death Age\", \"Age\"]);\n    if (ageAtDeath) {\n      result.ageAtDeath = ageAtDeath;\n    }\n\n    // later England Death Registration include exact birth date\n    let birthDate = getCleanValueForRecordDataList(data, [\"Birth Date\", \"Birth Year\"], \"date\");\n    if (birthDate) {\n      result.setBirthDate(birthDate);\n    }\n\n    buildParents(data, result);\n  } else if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Census) {\n    function buildHouseholdArray() {\n      const stdFieldNames = [\n        {\n          stdName: \"name\",\n          ancestryHeadings: [\"Name\", \"Household Members\", \"Household Member(s)\", \"Household Members (Name)\"],\n        },\n        { stdName: \"age\", ancestryHeadings: [\"Age\"] },\n        { stdName: \"relationship\", ancestryHeadings: [\"Relationship\"] },\n      ];\n      function headingToStdName(heading) {\n        for (let entry of stdFieldNames) {\n          if (entry.ancestryHeadings.includes(heading)) {\n            return entry.stdName;\n          }\n        }\n      }\n      if (data.household && data.household.members && data.household.members.length > 0) {\n        let headings = data.household.headings;\n        let members = data.household.members;\n        if (headings && members) {\n          result.householdArrayFields = [];\n\n          // check that we have a heading that maps to name, if not we do some extra work later\n          let haveANameHeading = false;\n          for (let heading of headings) {\n            let fieldName = headingToStdName(heading);\n            if (fieldName && fieldName == \"name\") {\n              haveANameHeading = true;\n              break;\n            }\n          }\n\n          let householdArray = [];\n          for (let member of members) {\n            let householdMember = {};\n            if (member.isClosed) {\n              householdMember.isClosed = true;\n            } else {\n              for (let headingIndex = 0; headingIndex < headings.length; headingIndex++) {\n                let heading = headings[headingIndex];\n                let fieldName = headingToStdName(heading);\n\n                // This could be the name column as Ancestry keeps changing its name\n                if (!fieldName && !haveANameHeading && headingIndex == 0) {\n                  fieldName = \"name\";\n                }\n                if (fieldName) {\n                  let fieldValue = member[heading];\n                  if (fieldValue) {\n                    if (fieldName == \"relationship\") {\n                      fieldValue = _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.GD.standardizeRelationshipToHead(fieldValue);\n                    }\n                    householdMember[fieldName] = fieldValue;\n                  }\n                }\n              }\n              let isSelected = false;\n              if (!member.recordId || member.recordId == data.recordId) {\n                isSelected = true;\n              }\n              if (isSelected) {\n                householdMember.isSelected = isSelected;\n\n                setExtraGdHouseholdFields(data, householdMember, result.householdArrayFields);\n              }\n              if (member.link) {\n                // we need a way of comparing back to extractedData when we\n                // fetch additional records\n                householdMember.uid = member.link;\n              }\n            }\n            householdArray.push(householdMember);\n          }\n          result.householdArray = householdArray;\n\n          let householdArrayFields = [];\n          for (let headingIndex = 0; headingIndex < headings.length; headingIndex++) {\n            let heading = headings[headingIndex];\n            let fieldName = headingToStdName(heading);\n\n            // This could be the name column as Ancestry keeps changing its name\n            if (!fieldName && !haveANameHeading && headingIndex == 0) {\n              fieldName = \"name\";\n            }\n\n            if (fieldName) {\n              householdArrayFields.push(fieldName);\n            }\n          }\n          result.householdArrayFields = householdArrayFields;\n        }\n      }\n    }\n\n    if (data.titleCollection && data.titleCollection.includes(\"1939\")) {\n      result.setEventYear(\"1939\");\n\n      let birthDate = getCleanValueForRecordDataList(data, [\"Birth Date\"], \"date\");\n      result.setBirthDate(birthDate);\n\n      let maritalStatus = getCleanValueForRecordDataList(data, [\"Marital Status\", \"Marital status\"]);\n      result.setMaritalStatus(maritalStatus);\n\n      let streetAddress = getCleanRecordDataValue(data, \"Address\");\n      let place = getCleanRecordDataValue(data, \"Residence Place\");\n      let placeString = \"\";\n      if (streetAddress) {\n        placeString += streetAddress;\n      }\n      if (place) {\n        if (placeString) {\n          placeString += \", \";\n        }\n        placeString += place;\n      }\n      result.setEventPlace(placeString);\n\n      let occupation = getCleanRecordDataValue(data, \"Occupation\");\n      if (occupation && occupation != \"None\") {\n        result.occupation = occupation;\n      }\n\n      let positionInHousehold = getCleanRecordDataValue(data, \"Sub Schedule Number\");\n      if (positionInHousehold) {\n        if (positionInHousehold == 1) {\n          result.relationshipToHead = \"head\";\n        }\n      }\n\n      buildHouseholdArray();\n    } else {\n      let birthYear = getCleanValueForRecordDataList(data, [\"Estimated Birth Year\", \"Birth Year\"]);\n\n      if (birthYear) {\n        let estYear = birthYear;\n        if (estYear.startsWith(\"abt \")) {\n          estYear = estYear.substring(4);\n        }\n        result.setBirthYear(estYear);\n        result.birthDate.qualifier = _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.dateQualifiers.ABOUT;\n      }\n\n      let birthPlace = getCleanValueForRecordDataList(data, [\n        \"Where born\",\n        \"Where Born\",\n        \"Birth Place\",\n        \"Birth place\",\n        \"Birthplace\",\n      ]);\n      if (birthPlace) {\n        result.setBirthPlace(birthPlace);\n      }\n\n      if (!result.eventDate || (!result.eventDate.dateString && !result.eventDate.yearString)) {\n        // see if we can get the census year from a field\n        let yearString = getCleanValueForRecordDataList(data, [\"Enumeration Year\", \"Residence Year\", \"Census Year\"]);\n        if (yearString) {\n          result.setEventYear(yearString);\n        } else {\n          let dateString = getCleanValueForRecordDataList(data, [\"Enumeration Date\", \"Residence Date\", \"Census Date\"]);\n          if (dateString) {\n            result.setEventDate(dateString);\n          } else if (data.titleCollection) {\n            // extract the year from the collection title, if it is a range treat that specially\n            let yearRangeString = data.titleCollection.replace(/^.*(\\d\\d\\d\\d\\-\\d\\d\\d\\d).*$/, \"$1\");\n            if (yearRangeString && yearRangeString != data.titleCollection) {\n              result.setEventYear(yearRangeString);\n            } else {\n              yearString = data.titleCollection.replace(/^.*(\\d\\d\\d\\d).*$/, \"$1\");\n              if (yearString && yearString != data.titleCollection) {\n                result.setEventYear(yearString);\n              }\n            }\n          }\n        }\n      }\n\n      buildEventPlace(data, result, true);\n\n      let occupation = getCleanRecordDataValue(data, \"Occupation\");\n      if (occupation && occupation != \"None\") {\n        result.occupation = occupation;\n      }\n\n      let age = getCleanValueForRecordDataList(data, [\"Age\"]);\n      if (!age) {\n        if (result.eventDate && result.eventDate.yearString) {\n          let label = \"Age in \" + result.eventDate.yearString;\n          age = getCleanRecordDataValue(data, label);\n        }\n      }\n      if (age) {\n        result.ageAtEvent = age;\n      }\n      let maritalStatus = getCleanValueForRecordDataList(data, [\"Marital Status\", \"Marital status\"]);\n      result.setMaritalStatus(maritalStatus);\n      let relationshipToHead = getCleanValueForRecordDataList(data, [\n        \"Relationship to Head\",\n        \"Relation to Head\",\n        \"Relation to Head of House\",\n        \"Relationship\",\n        \"Relation\",\n      ]);\n\n      result.setRelationshipToHead(relationshipToHead);\n\n      buildHouseholdArray();\n\n      // We can also determine parents and spouse in some cases\n      // Note: This is a bit limited for Ancestry because we do not do the deep dive of fetching other\n      // records unless we are building a household table.\n      result.addSpouseOrParentsForSelectedHouseholdMember();\n    }\n  } else if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.NonpopulationCensus) {\n    result.setEventDate(getCleanValueForRecordDataList(data, [\"Enumeration Date\"], \"date\"));\n    result.setEventPlace(getCleanValueForRecordDataList(data, [\"Place\"]));\n  } else if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Marriage) {\n    result.setEventDate(\n      getCleanValueForRecordDataList(\n        data,\n        [\n          \"Marriage Date\",\n          \"Marriage or Bann Date\",\n          \"Marriage Banns Date\",\n          \"Marriage License Date\",\n          \"Bond Date\",\n          \"Recording Date\",\n          \"License Date\",\n          \"Event Date\",\n          \"Translated Marriage Date\",\n          \"Marriage Year\",\n          \"Marriage Date on Image\",\n        ],\n        \"date\"\n      )\n    );\n\n    let marriagePlace = getCleanValueForRecordDataList(data, [\n      \"Marriage Place\",\n      \"Marriage or Bann Place\",\n      \"Marriage Banns Place\",\n      \"Marriage License Place\",\n      \"Recording Place\",\n      \"License Place\",\n      \"Marriage State\",\n      \"Marriage City\",\n    ]);\n    if (marriagePlace) {\n      result.setEventPlace(marriagePlace);\n    } else {\n      buildEventPlace(data, result);\n    }\n    result.setFieldIfValueExists(\"ageAtEvent\", getCleanValueForRecordDataList(data, [\"Marriage Age\", \"Age\"]));\n    buildParents(data, result);\n\n    let spouseName = getCleanValueForRecordDataList(data, [\"Spouse\", \"Spouse Name\", \"Spouse's Name\"]);\n\n    // occasionally there is no field for the spouse name but there is a Household Members sections\n    // that lists the bride and groom. us_pa_marriage_1761_patience_brown is an example.\n    if (!spouseName) {\n      if (data.household && data.household.headings && data.household.members) {\n        if (data.household.headings[0] == \"Name\" && data.household.headings[1] == \"Role\") {\n          if (data.household.members.length >= 2) {\n            let thisPersonRole = data.recordData[\"Role\"];\n            if (thisPersonRole) {\n              for (let member of data.household.members) {\n                let role = member.Role;\n                if (role != thisPersonRole && (role == \"Bride\" || role == \"Groom\")) {\n                  if (member.Name) {\n                    spouseName = member.Name;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if ((spouseName || result.eventDate) && (!result.role || result.role == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Primary)) {\n      let name = new _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.WtsName();\n\n      if (spouseName) {\n        name.name = spouseName;\n      }\n\n      let spouse = {\n        name: name,\n      };\n\n      if (result.eventDate) {\n        spouse.marriageDate = result.eventDate;\n      }\n\n      if (result.eventPlace) {\n        spouse.marriagePlace = result.eventPlace;\n      }\n\n      let spouseAge = getCleanValueForRecordDataList(data, [\"Spouse's Age\"]);\n      if (spouseAge) {\n        spouse.age = spouseAge;\n      }\n\n      result.spouses = [spouse];\n\n      if (result.personGender == \"female\") {\n        result.lastNameAtDeath = name.inferLastName();\n      }\n    }\n  } else if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.MarriageRegistration) {\n    result.setEventDate(\n      getCleanValueForRecordDataList(\n        data,\n        [\n          \"Marriage Registration Date\",\n          \"Marriage Registration Year\",\n          \"Marriage Date\",\n          \"Marriage License Date\",\n          \"Marriage Year\",\n        ],\n        \"date\"\n      )\n    );\n\n    let marriageRegistrationPlace = getCleanValueForRecordDataList(data, [\n      \"Marriage Registration Place\",\n      \"Registration Place\",\n    ]);\n    if (marriageRegistrationPlace && !result.registrationDistrict) {\n      let place = marriageRegistrationPlace;\n      let commaIndex = place.indexOf(`,`);\n      if (commaIndex != -1) {\n        place = place.substring(0, commaIndex);\n      }\n      result.registrationDistrict = place;\n    }\n\n    let marriagePlace = getCleanValueForRecordDataList(data, [\n      \"Marriage Registration Place\",\n      \"Marriage Place\",\n      \"Registration Place\",\n    ]);\n    if (marriagePlace) {\n      result.setEventPlace(marriagePlace);\n    } else {\n      buildEventPlace(data, result);\n    }\n    result.setFieldIfValueExists(\"ageAtEvent\", getCleanValueForRecordDataList(data, [\"Marriage Age\", \"Age\"]));\n\n    let spouseName = getCleanValueForRecordDataList(data, [\"Spouse\", \"Spouse Name\"]);\n\n    if (!spouseName) {\n      // For a UK marriage registration, if there are only two records on page, we can infer spouse\n      if (data.recordData) {\n        let records = data.recordData[\"Records on Page\"];\n        let name = data.recordData[\"Name\"];\n        if (records && name) {\n          if (records.includes(\"<br/>\")) {\n            let names = records.split(\"<br/>\");\n            if (names.length == 2) {\n              if (names[0] == name) {\n                spouseName = names[1];\n              } else if (names[1] == name) {\n                spouseName = names[0];\n              }\n            }\n          }\n        }\n      }\n    }\n    if (spouseName || result.eventDate) {\n      let name = new _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.WtsName();\n\n      if (spouseName) {\n        name.name = spouseName;\n      }\n\n      let spouse = {\n        name: name,\n      };\n\n      if (result.eventDate) {\n        spouse.marriageDate = result.eventDate;\n      }\n\n      if (result.eventPlace) {\n        spouse.marriagePlace = result.eventPlace;\n      }\n\n      result.spouses = [spouse];\n\n      if (result.personGender == \"female\") {\n        result.lastNameAtDeath = name.inferLastName();\n      }\n    }\n  } else if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Baptism) {\n    let birthDate = getCleanRecordDataValue(data, \"Birth Date\", \"date\");\n    let baptismDate = getCleanValueForRecordDataList(data, [\"Baptism Date\", \"Christening Date\"], \"date\");\n    if (birthDate) {\n      result.setBirthDate(birthDate);\n    }\n    if (baptismDate) {\n      result.setEventDate(baptismDate);\n    }\n\n    // occasionally a baptism record also has a death date (usually for an infant death)\n    result.setDeathDate(getCleanRecordDataValue(data, \"Death Date\", \"date\"));\n\n    let eventPlace = getCleanValueForRecordDataList(data, [\"Baptism Place\", \"Christening Place\", \"Parish\"]);\n    if (eventPlace) {\n      result.setEventPlace(eventPlace);\n      result.setBirthPlace(eventPlace);\n    }\n    result.lastNameAtBirth = result.inferLastName();\n\n    let age = getCleanValueForRecordDataList(data, [\"Age\", \"Baptism Age\", \"Christening Age\"]);\n    if (age) {\n      result.ageAtEvent = age;\n    }\n\n    let fatherName = getCleanRecordDataValue(data, \"Father\");\n    if (fatherName) {\n      let father = result.addFather();\n      father.name.name = fatherName;\n    }\n    let motherName = getCleanRecordDataValue(data, \"Mother\");\n    if (motherName) {\n      let mother = result.addMother();\n      mother.name.name = motherName;\n    }\n  } else if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Burial) {\n    let birthDate = getCleanRecordDataValue(data, \"Birth Date\", \"date\");\n    let deathDate = getCleanRecordDataValue(data, \"Death Date\", \"date\");\n    let eventDate = getCleanValueForRecordDataList(\n      data,\n      [\"Burial Date\", \"Burial or Cremation Date\", \"Interment Date\", \"Burial Year\"],\n      \"date\"\n    );\n\n    if (birthDate) {\n      result.setBirthDate(birthDate);\n    }\n    if (deathDate) {\n      result.setDeathDate(deathDate);\n    }\n    if (eventDate) {\n      result.setEventDate(eventDate);\n    }\n\n    let eventPlace = getCleanValueForRecordDataList(data, [\n      \"Burial Place\",\n      \"Burial or Cremation Place\",\n      \"Interment Place\",\n      \"Cemetery Location\",\n      \"Cemetery Name\",\n      \"Cemetery\",\n    ]);\n    let largerPlace = getCleanValueForRecordDataList(data, [\"Location\"]);\n    if (largerPlace) {\n      if (!eventPlace) {\n        eventPlace = largerPlace;\n      } else if (eventPlace != largerPlace) {\n        eventPlace = eventPlace + \", \" + largerPlace;\n      }\n    }\n    if (eventPlace) {\n      result.setEventPlace(eventPlace);\n      result.setDeathPlace(eventPlace);\n    }\n    result.lastNameAtDeath = result.inferLastName();\n\n    let age = getCleanRecordDataValue(data, \"Age\");\n    if (age) {\n      result.ageAtDeath = age;\n    }\n  } else if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Cremation) {\n    let birthDate = getCleanRecordDataValue(data, \"Birth Date\", \"date\");\n    let deathDate = getCleanRecordDataValue(data, \"Death Date\", \"date\");\n    let eventDate = getCleanValueForRecordDataList(data, [\"Cremation Date\", \"Burial or Cremation Date\"], \"date\");\n\n    if (birthDate) {\n      result.setBirthDate(birthDate);\n    }\n    if (deathDate) {\n      result.setDeathDate(deathDate);\n    }\n    if (eventDate) {\n      result.setEventDate(eventDate);\n    }\n\n    let eventPlace = getCleanValueForRecordDataList(data, [\n      \"Cremation Place\",\n      \"Burial or Cremation Place\",\n      \"Burial Place\",\n    ]);\n    if (eventPlace) {\n      result.setEventPlace(eventPlace);\n      result.setDeathPlace(eventPlace);\n    }\n    result.lastNameAtDeath = result.inferLastName();\n\n    let age = getCleanRecordDataValue(data, \"Age\");\n    if (age) {\n      result.ageAtDeath = age;\n    }\n  } else if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Obituary) {\n    // if there is a death or burial date etc then this is likely a record for this person not a\n    // child or spouse\n    let birthDate = getCleanValueForRecordDataList(data, [\"Birth Date\"], \"date\");\n    let deathDate = getCleanValueForRecordDataList(data, [\"Death Date\"], \"date\");\n    let deathPlace = getCleanValueForRecordDataList(data, [\"Death Place\", \"Death County\"]);\n    let eventDate = getCleanValueForRecordDataList(data, [\"Obituary Date\", \"Date\", \"Newspaper Date\"], \"date\");\n    let eventPlace = getCleanValueForRecordDataList(data, [\"Obituary Place\", \"Newspaper Place\", \"Place\"]);\n\n    if (birthDate) {\n      result.setBirthDate(birthDate);\n    }\n    if (deathDate) {\n      result.setDeathDate(deathDate);\n    }\n    if (deathPlace) {\n      result.setDeathPlace(deathPlace);\n    }\n    if (eventDate) {\n      result.setEventDate(eventDate);\n    }\n    if (eventPlace) {\n      result.setEventPlace(eventPlace);\n    }\n    result.lastNameAtDeath = result.inferLastName();\n\n    let age = getCleanValueForRecordDataList(data, [\"Age\", \"Death Age\"]);\n    if (age) {\n      result.ageAtDeath = age;\n    }\n  } else if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Will || result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Probate) {\n    result.setDeathDate(getCleanRecordDataValue(data, \"Death Date\", \"date\"));\n    result.setDeathYear(getCleanRecordDataValue(data, \"Death Year\"));\n    result.setEventDate(\n      getCleanValueForRecordDataList(data, [\"Probate Date\", \"Will Proved Date\", \"Grant Date\"], \"date\")\n    );\n    result.setEventYear(getCleanRecordDataValue(data, \"Probate Year\"));\n\n    if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Will) {\n      result.recordSubtype = \"Probate\"; // for now assume Ancestry Will records have probate date\n    }\n\n    let eventPlace = getCleanValueForRecordDataList(data, [\"Probate Registry\"]);\n    if (eventPlace) {\n      result.setEventPlace(eventPlace);\n    }\n    let deathPlace = getCleanValueForRecordDataList(data, [\"Residence\", \"Death Place\", \"Death County\"]);\n    if (deathPlace) {\n      result.setDeathPlace(deathPlace);\n    }\n\n    let role = getCleanRecordDataValue(data, \"Role\");\n    if (role) {\n      // Primary person's role field may be \"Decedent\"\n      if (role == \"Child\" || role == \"Daughter\" || role == \"Son\") {\n        result.role = _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Child;\n      } else if (role == \"Parent\" || role == \"Father\" || role == \"Mother\") {\n        result.role = _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Parent;\n      } else if (role == \"Spouse\" || role == \"Husband\" || role == \"Wife\") {\n        result.role = _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Spouse;\n      } else if (role == \"Witness\") {\n        result.role = _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Witness;\n      }\n    }\n\n    // Some probate records have occupation (e.g. Victoria, Australia, Wills and Probate Records, 1841-2009)\n    let occupation = getCleanRecordDataValue(data, \"Occupation\");\n    if (occupation && occupation != \"None\") {\n      result.occupation = occupation;\n    }\n\n    result.lastNameAtDeath = result.inferLastName();\n  } else if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Divorce) {\n    result.setEventDate(getCleanValueForRecordDataList(data, [\"Divorce Date\", \"Petition Date\", \"Date\"], \"date\"));\n    result.setEventPlace(getCleanValueForRecordDataList(data, [\"Divorce Place\", \"Location\"]));\n\n    let spouseName = getCleanValueForRecordDataList(data, [\"Spouse\", \"Spouse Name\"]);\n\n    if (spouseName) {\n      let name = new _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.WtsName();\n      name.name = spouseName;\n      let spouse = {\n        name: name,\n      };\n\n      let marriageDate = getCleanValueForRecordDataList(data, [\"Marriage Date\", \"Marriage Year\"], \"date\");\n      if (marriageDate) {\n        spouse.marriageDate = new _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.WtsDate();\n        spouse.marriageDate.dateString = marriageDate;\n      }\n\n      result.spouses = [spouse];\n    }\n  } else if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.BirthOrBaptism) {\n    let birthDate = getCleanRecordDataValue(data, \"Birth Date\", \"date\");\n    let baptismDate = getCleanValueForRecordDataList(data, [\"Baptism Date\", \"Christening Date\"], \"date\");\n    if (birthDate) {\n      result.setBirthDate(birthDate);\n    }\n    if (baptismDate) {\n      result.setEventDate(baptismDate);\n    } else if (birthDate) {\n      result.setEventDate(birthDate);\n    }\n\n    // occasionally a baptism record also has a death date (usually for an infant death)\n    result.setDeathDate(getCleanRecordDataValue(data, \"Death Date\", \"date\"));\n\n    let eventPlace = getCleanValueForRecordDataList(data, [\"Baptism Place\", \"Christening Place\", \"Birth Place\"]);\n    if (eventPlace) {\n      result.setEventPlace(eventPlace);\n      result.setBirthPlace(eventPlace);\n    }\n    result.lastNameAtBirth = result.inferLastName();\n\n    let age = getCleanValueForRecordDataList(data, [\"Age\", \"Baptism Age\", \"Christening Age\"]);\n    if (age) {\n      result.ageAtEvent = age;\n    }\n\n    if (result.role != _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.Role.Parent) {\n      let fatherName = getCleanRecordDataValue(data, \"Father\");\n      if (fatherName) {\n        let father = result.addFather();\n        father.name.name = fatherName;\n      }\n      let motherName = getCleanRecordDataValue(data, \"Mother\");\n      if (motherName) {\n        let mother = result.addMother();\n        mother.name.name = motherName;\n      }\n    }\n  } else if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Military) {\n    result.setEventDate(\n      getCleanValueForRecordDataList(\n        data,\n        [\n          \"Event Date\",\n          \"Date\",\n          \"Enlistment Date\",\n          \"Service Start Date\",\n          \"First Service Date\",\n          \"Service Date\",\n          \"Last Service Date\",\n          \"Muster Date\",\n          \"Military Date\",\n          \"Residence Date\",\n        ],\n        \"date\"\n      )\n    );\n    result.setBirthDate(getCleanValueForRecordDataList(data, [\"Birth Date\"], \"date\"));\n    result.setDeathDate(getCleanValueForRecordDataList(data, [\"Death Date\"], \"date\"));\n    result.setEventYear(\n      getCleanValueForRecordDataList(data, [\n        \"Event Year\",\n        \"Year\",\n        \"Enlistment Year\",\n        \"Service Year\",\n        \"Year Range\",\n        \"Year range\",\n      ])\n    );\n    result.setEventPlace(\n      getCleanValueForRecordDataList(data, [\n        \"Event Place\",\n        \"Death Place\",\n        \"Place\",\n        \"Location\",\n        \"Enlistment Place\",\n        \"Residence\",\n        \"Residence Place\",\n        \"Residence Location\",\n        \"Military Enlistment Place\",\n        \"Service Start Place\",\n        \"Military Service Location\",\n        \"Pension Office Place\",\n        \"Military Place\",\n        \"Station or Residence Place\",\n        \"State or Territory\",\n      ])\n    );\n\n    let dischargeDate = getCleanValueForRecordDataList(data, [\"Discharge Date\"], \"date\");\n    if (dischargeDate) {\n      result.dischargeDate = dischargeDate;\n    }\n\n    let serviceNumber = getCleanValueForRecordDataList(data, [\"Service Number\", \"Regimental Number\"]);\n    if (serviceNumber) {\n      result.serviceNumber = serviceNumber;\n    }\n    let rank = getCleanValueForRecordDataList(data, [\"Rank\"]);\n    if (rank) {\n      result.rank = rank;\n    }\n    let unit = getCleanValueForRecordDataList(data, [\"Corps, Regiment or Unit\", \"Regiment\", \"Military Unit\", \"Unit\"]);\n    if (unit) {\n      result.unit = unit;\n    }\n    let militaryBranch = getCleanValueForRecordDataList(data, [\"Enlistment Branch\", \"Branch of Service\"]);\n    if (militaryBranch) {\n      result.militaryBranch = militaryBranch;\n    }\n    let nextOfKin = getCleanValueForRecordDataList(data, [\"Next of Kin\"]);\n    if (nextOfKin) {\n      result.nextOfKin = nextOfKin;\n    }\n\n    // sometimes a military record can contain a spouse name and possibly a marriage date\n    let spouseName = getCleanValueForRecordDataList(data, [\"Spouse\", \"Spouse Name\", \"Spouse's Name\"]);\n    if (spouseName) {\n      let name = new _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.WtsName();\n      name.name = spouseName;\n\n      let spouse = {\n        name: name,\n      };\n\n      let marriageDate = getCleanValueForRecordDataList(data, [\"Marriage Date\"]);\n      let marriagePlace = getCleanValueForRecordDataList(data, [\"Marriage Place\"]);\n\n      if (marriageDate) {\n        spouse.marriageDate = new _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.WtsDate();\n        spouse.marriageDate.dateString = marriageDate;\n      }\n\n      if (marriagePlace) {\n        spouse.marriagePlace = new _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.WtsPlace();\n        spouse.marriagePlace.placeString = marriagePlace;\n      }\n\n      result.spouses = [spouse];\n    }\n  } else if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.SchoolRecords) {\n    result.setEventDate(getCleanValueForRecordDataList(data, [\"Yearbook Date\", \"Admission Date\"], \"date\"));\n\n    result.setBirthDate(getCleanValueForRecordDataList(data, [\"Birth Date\"], \"date\"));\n    result.setBirthYear(getCleanValueForRecordDataList(data, [\"Birth Year\"]));\n\n    let schoolLocation = getCleanValueForRecordDataList(data, [\"School Location\"]);\n    let schoolName = getCleanValueForRecordDataList(data, [\"School\"]);\n\n    result.setEventPlace(schoolLocation);\n\n    if (schoolName) {\n      result.schoolName = schoolName;\n    }\n\n    let age = getCleanValueForRecordDataList(data, [\"Age\", \"Estimated Age\"]);\n    if (age) {\n      result.ageAtEvent = age;\n    }\n\n    let fatherName = getCleanRecordDataValue(data, \"Father\");\n    if (fatherName) {\n      let father = result.addFather();\n      father.name.name = fatherName;\n    }\n    let motherName = getCleanRecordDataValue(data, \"Mother\");\n    if (motherName) {\n      let mother = result.addMother();\n      mother.name.name = motherName;\n    }\n  } else if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.PassengerList) {\n    let departureDate = getCleanValueForRecordDataList(data, [\"Departure Date\", \"Departure Year\"], \"date\");\n    let arrivalDate = getCleanValueForRecordDataList(data, [\"Arrival Date\", \"Arrival Year\", \"Arrival year\"], \"date\");\n    let departurePlace = getCleanValueForRecordDataList(data, [\"Departure Place\"]);\n    let arrivalPlace = getCleanValueForRecordDataList(data, [\"Arrival Place\", \"Arrival Country\"]);\n\n    result.setFieldIfValueExists(\"departureDate\", departureDate);\n    result.setFieldIfValueExists(\"departurePlace\", departurePlace);\n    result.setFieldIfValueExists(\"arrivalDate\", arrivalDate);\n    result.setFieldIfValueExists(\"arrivalPlace\", arrivalPlace);\n\n    if (data.titleCollection.toLowerCase().includes(\"arriv\")) {\n      result.setEventDate(arrivalDate);\n      result.setEventPlace(arrivalPlace);\n    } else if (data.titleCollection.toLowerCase().includes(\"depart\")) {\n      result.setEventDate(departureDate);\n      result.setEventPlace(departurePlace);\n    } else if (arrivalDate || arrivalPlace) {\n      result.setEventDate(arrivalDate);\n      result.setEventPlace(arrivalPlace);\n    } else if (departureDate || departurePlace) {\n      result.setEventDate(departureDate);\n      result.setEventPlace(departurePlace);\n    }\n\n    result.setFieldIfValueExists(\"shipName\", getCleanValueForRecordDataList(data, [\"Ship\"]));\n\n    result.setFieldIfValueExists(\n      \"ageAtEvent\",\n      getCleanValueForRecordDataList(data, [\"Age\", \"Departure Age\", \"Arrival Age\"])\n    );\n  } else if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Naturalization) {\n    result.setEventDate(\n      getCleanValueForRecordDataList(\n        data,\n        [\"Event Date\", \"Date\", \"Petition Date\", \"Declaration Date\", \"Certificate Date\"],\n        \"date\"\n      )\n    );\n    result.setEventPlace(\n      getCleanValueForRecordDataList(data, [\n        \"Petition Place\",\n        \"Declaration Place\",\n        \"Event Place\",\n        \"Place\",\n        \"Location\",\n        \"Residence\",\n        \"Residence Place\",\n        \"Residence Location\",\n        \"Naturalisation Place\",\n        \"Arrival Place\",\n      ])\n    );\n    let ageAtEvent = getCleanValueForRecordDataList(data, [\"Age\", \"Petition Age\", \"Declaration Age\"]);\n    if (ageAtEvent) {\n      result.ageAtEvent = ageAtEvent;\n    }\n    result.setBirthDate(getCleanValueForRecordDataList(data, [\"Birth Date\"], \"date\"));\n    result.setBirthPlace(getCleanValueForRecordDataList(data, [\"Birth Place\"]));\n    let arrivalDate = getCleanValueForRecordDataList(data, [\"Arrival Date\"]);\n    if (arrivalDate) {\n      result.arrivalDate = arrivalDate;\n    }\n    let arrivalPlace = getCleanValueForRecordDataList(data, [\"Arrival Place\"]);\n    if (arrivalPlace) {\n      result.arrivalPlace = arrivalPlace;\n    }\n    let nativePlace = getCleanValueForRecordDataList(data, [\"Native Place\"]);\n    if (nativePlace) {\n      result.nativePlace = nativePlace;\n    }\n  } else {\n    // generic record type support\n    result.setEventDate(\n      getCleanValueForRecordDataList(\n        data,\n        [\n          \"Event Date\",\n          \"Date\",\n          \"Residence Date\",\n          \"Payment Date\",\n          \"Obituary Date\",\n          \"Departure Date\",\n          \"Arrival Date\",\n          \"Electoral Date\",\n          \"Appointed Date\",\n          \"Application Date\",\n          \"Warrant Date\",\n          \"Issue Date\",\n          \"Appointment Date\",\n          \"Discharge Date\",\n          \"Death Date\",\n          \"Hire Date\",\n          \"Record Date\",\n          \"Arrival Year\",\n          \"Date Received\",\n          \"Passport Issue Date\",\n        ],\n        \"date\"\n      )\n    );\n    result.setEventYear(\n      getCleanValueForRecordDataList(data, [\n        \"Event Year\",\n        \"Year\",\n        \"Publication Year\",\n        \"Enlistment Year\",\n        \"Residence Year\",\n      ])\n    );\n    let eventPlace = getCleanValueForRecordDataList(data, [\n      \"Obituary Place\",\n      \"Event Place\",\n      \"Place\",\n      \"Location\",\n      \"Residence\",\n      \"Residence Place\",\n      \"Residence Location\",\n      \"Military Enlistment Place\",\n      \"Departure Place\",\n      \"Arrival Place\",\n      \"Appointed Place\",\n      \"Death Place\",\n      \"Warrant Location\",\n      \"Last Residence Place\",\n      \"Issue Port\",\n      \"Post Office Location\",\n      \"Record Place\",\n      \"Place Moored\",\n      \"Electoral Place\",\n      \"Death County\",\n    ]);\n\n    if (!eventPlace) {\n      if (true) {\n        // trying this out instead (2 Apr 2022)\n        buildEventPlace(data, result, true);\n      }\n    }\n\n    result.setEventPlace(eventPlace);\n\n    // lots of record have a birth date. The narrative may not use it but search can.\n    result.setBirthDate(getCleanValueForRecordDataList(data, [\"Birth Date\"], \"date\"));\n    result.setBirthPlace(getCleanValueForRecordDataList(data, [\"Birth Place\"]));\n\n    let ageAtEvent = getCleanValueForRecordDataList(data, [\"Age\", \"Departure Age\", \"Arrival Age\"]);\n    if (ageAtEvent) {\n      result.ageAtEvent = ageAtEvent;\n    }\n  }\n}\n\n// This function generalizes the data extracted from an Ancestry page.\n// We know what fields can be there. And we know the ones we want in generalizedData.\nfunction generalizeRecordData(input, result) {\n  let data = input.extractedData;\n\n  result.sourceType = \"record\";\n  determineRecordTypeAndRole(data, result);\n\n  result.sourceOfData = \"ancestry\";\n\n  // from an Ancestry record we often do not have the name broken down into parts.\n  let fullName = data.titleName;\n  if (!fullName && data.recordData) {\n    fullName = getCleanRecordDataValue(data, \"Name\");\n  }\n\n  result.setFullName(fullName);\n\n  if (data.recordData != undefined) {\n    result.setPersonGender(getCleanRecordDataValue(data, \"Gender\"));\n\n    result.setEventCountry(getCleanRecordDataValue(data, \"Country\"));\n    result.setEventCounty(getCleanValueForRecordDataList(data, [\"County\", \"Inferred County\"]));\n\n    let registrationDate = getCleanValueForRecordDataList(data, [\"Registration Date\", \"Date of Registration\"], \"date\");\n    if (registrationDate) {\n      // special case, date could be of form \"1933 Jan-Feb-Mar\"\n      // e.g. https://www.ancestry.com/discoveryui-content/view/6407416:2534\n      if (/^\\d\\d\\d\\d +\\w\\w\\w\\-\\w\\w\\w\\-\\w\\w\\w$/.test(registrationDate)) {\n        let yearString = registrationDate.replace(/^(\\d\\d\\d\\d) +\\w\\w\\w\\-\\w\\w\\w\\-\\w\\w\\w$/, \"$1\");\n        let ancestryQuarter = registrationDate.replace(/^\\d\\d\\d\\d +(\\w\\w\\w\\-\\w\\w\\w\\-\\w\\w\\w)$/, \"$1\");\n        if (yearString && yearString != registrationDate && ancestryQuarter && ancestryQuarter != registrationDate) {\n          let quarter = -1;\n          for (let quarterName of ancestryQuarterNames) {\n            if (ancestryQuarter == quarterName.name) {\n              quarter = quarterName.value;\n              break;\n            }\n          }\n          if (quarter != -1) {\n            result.setEventYear(yearString);\n            result.setEventQuarter(quarter);\n          }\n        }\n      } else {\n        result.setEventDate(registrationDate);\n      }\n    } else {\n      let registrationYear = getCleanRecordDataValue(data, \"Registration Year\");\n      if (registrationYear) {\n        result.setEventYear(registrationYear);\n      }\n    }\n\n    let registrationDistrict = getCleanValueForRecordDataList(data, [\"Registration District\", \"Registration district\"]);\n    if (registrationDistrict) {\n      result.registrationDistrict = registrationDistrict;\n    }\n\n    let ancestryQuarter = getCleanValueForRecordDataList(data, [\"Registration Quarter\", \"Quarter of the Year\"]);\n    if (ancestryQuarter) {\n      let quarter = -1;\n      for (let quarterName of ancestryQuarterNames) {\n        if (ancestryQuarter == quarterName.name) {\n          quarter = quarterName.value;\n          break;\n        }\n      }\n      if (quarter != -1) {\n        result.setEventQuarter(quarter);\n      }\n    } else if (registrationDate) {\n      if (/^\\w\\w\\w \\d\\d\\d\\d$/.test(registrationDate)) {\n        let yearString = registrationDate.replace(/^\\w\\w\\w (\\d\\d\\d\\d)$/, \"$1\");\n        let ancestryQuarter = registrationDate.replace(/^(\\w\\w\\w) \\d\\d\\d\\d$/, \"$1\");\n\n        if (yearString && yearString != registrationDate && ancestryQuarter && ancestryQuarter != registrationDate) {\n          let quarter = -1;\n          for (let quarterName of ancestryQuarterMonthNames) {\n            if (ancestryQuarter == quarterName.name) {\n              quarter = quarterName.value;\n              break;\n            }\n          }\n          if (quarter != -1) {\n            result.setEventQuarter(quarter);\n          }\n        }\n      }\n    }\n\n    generalizeDataGivenRecordType(data, result);\n  }\n\n  // Collection\n  if (data.dbId) {\n    // sometime the dbId is the text version and not the number.\n    // e.g. 1911England instead of 2352\n    let collectionId = data.dbId;\n    let altIdCollection = _base_core_record_collections_mjs__WEBPACK_IMPORTED_MODULE_1__.RC.findCollectionByAltId(\"ancestry\", data.dbId);\n    if (altIdCollection) {\n      collectionId = altIdCollection.sites[\"ancestry\"].id;\n    }\n    result.collectionData = {\n      id: collectionId,\n    };\n\n    if (data.recordData) {\n      // could be an image page\n      let volume = getCleanValueForRecordDataList(data, [\"Volume\", \"Volume Number\", \"Volume number\"]);\n      if (volume) {\n        result.collectionData.volume = volume;\n      }\n      let page = getCleanValueForRecordDataList(data, [\"Page\", \"Page number\", \"Page Number\"]);\n      if (page) {\n        result.collectionData.page = page;\n      }\n      let folio = getCleanRecordDataValue(data, \"Folio\");\n      if (folio) {\n        result.collectionData.folio = folio;\n      }\n      let piece = getCleanRecordDataValue(data, \"Piece\");\n      if (piece) {\n        result.collectionData.piece = piece;\n      }\n      let schedule = getCleanValueForRecordDataList(data, [\"Schedule Number\", \"Household Schedule Number\"]);\n      if (schedule) {\n        result.collectionData.schedule = schedule;\n      }\n      let parish = getCleanValueForRecordDataList(data, [\"Civil Parish\", \"Parish\"]);\n      if (parish) {\n        result.collectionData.parish = parish;\n      }\n      let county = getCleanValueForRecordDataList(data, [\"County/Island\", \"County\"]);\n      if (county) {\n        result.collectionData.county = county;\n      }\n      let borough = getCleanValueForRecordDataList(data, [\"Borough\"]);\n      if (borough) {\n        result.collectionData.borough = borough;\n      }\n    }\n  }\n}\n\nfunction generalizeProfileData(input, result) {\n  let data = input.extractedData;\n\n  result.sourceType = \"profile\";\n  result.sourceOfData = \"ancestry\";\n\n  result.setFullName(data.titleName);\n\n  result.setBirthDate(data.birthDate);\n  result.setBirthPlace(data.birthPlace);\n  result.setDeathDate(data.deathDate);\n  result.setDeathPlace(data.deathPlace);\n\n  result.setPersonGender(data.gender);\n\n  if (data.marriages) {\n    for (let marriage of data.marriages) {\n      let spouse = result.addSpouse();\n      spouse.name.setFullName(marriage.spouseName);\n      spouse.marriageDate.dateString = marriage.date;\n      spouse.marriagePlace.placeString = marriage.place;\n    }\n  }\n\n  if (data.fatherName) {\n    let father = result.addFather();\n    father.name.setFullName(data.fatherName);\n  }\n  if (data.motherName) {\n    let mother = result.addMother();\n    mother.name.setFullName(data.motherName);\n  }\n\n  // analyze the surname - sometimes Ancestry users put the LNAB in parens\n  let surname = data.surname;\n  const openParenIndex = surname.indexOf(\"(\");\n  if (result.name && openParenIndex == 0) {\n    const closeParenIndex = surname.indexOf(\")\", openParenIndex);\n    if (closeParenIndex != -1) {\n      let lnab = surname.substring(openParenIndex + 1, closeParenIndex).trim();\n      let remainder = surname.substring(closeParenIndex + 1).trim();\n      if (lnab && remainder) {\n        result.lastNameAtBirth = lnab;\n        surname = lnab;\n        const spaceIndex = remainder.indexOf(\" \");\n        if (spaceIndex == -1) {\n          result.lastNameAtDeath = remainder;\n        } else {\n          // there are multiple names after close paren\n          // These could be last name at death folloed by other married names\n          // Could check names of spouses to get more info\n          const cln = remainder.substring(0, spaceIndex);\n          if (cln) {\n            result.lastNameAtDeath = remainder;\n          }\n        }\n      }\n    }\n  }\n  result.setLastNameAndForeNames(surname, data.givenName);\n}\n\n// This function generalizes the data extracted from an Ancestry page.\n// We know what fields can be there. And we know the ones we want in generalizedData.\nfunction generalizeData(input) {\n  let data = input.extractedData;\n\n  let result = new _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.GeneralizedData();\n\n  if (data.pageType == \"personFacts\") {\n    generalizeProfileData(input, result);\n  } else {\n    generalizeRecordData(input, result);\n  }\n\n  result.hasValidData = true;\n\n  //console.log(\"End of Ancestry generalizeData, result is:\");\n  //console.log(result);\n\n  return result;\n}\n\nfunction setExtraGdHouseholdFields(extractedData, generalizedMember, fieldNames) {\n  function setMemberData(propertyName, recordDataNames, standardizeFunction) {\n    if (!generalizedMember[propertyName]) {\n      let value = getCleanValueForRecordDataList(extractedData, recordDataNames);\n      if (value) {\n        if (standardizeFunction) {\n          value = standardizeFunction(value);\n        }\n        generalizedMember[propertyName] = value;\n\n        if (!fieldNames.includes(propertyName)) {\n          fieldNames.push(propertyName);\n        }\n      }\n    }\n  }\n\n  setMemberData(\n    \"relationship\",\n    [\"Relationship to Head\", \"Relation to Head\", \"Relation to Head of House\", \"Relationship\", \"Relation\"],\n    _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.GD.standardizeRelationshipToHead\n  );\n  setMemberData(\"maritalStatus\", [\"Marital Status\", \"Marital status\"], _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.GD.standardizeMaritalStatus);\n  setMemberData(\"gender\", [\"Gender\"], _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.GD.standardizeGender);\n  setMemberData(\"occupation\", [\"Occupation\"]);\n  setMemberData(\"birthDate\", [\"Birth Date\", \"DOB\"]);\n  setMemberData(\"birthPlace\", [\"Where born\", \"Where Born\", \"Birth Place\", \"Birthplace\", \"Birth place\"]);\n  setMemberData(\"birthYear\", [\"Estimated Birth Year\", \"Birth Year\"]);\n  setMemberData(\"employer\", [\"Employer\"]);\n}\n\nfunction regeneralizeDataWithLinkedRecords(input) {\n  let data = input.extractedData;\n  let result = input.generalizedData;\n  let linkedRecords = input.linkedRecords;\n\n  //console.log(\"regeneralizeDataWithLinkedRecords, data is:\");\n  //console.log(data);\n  //console.log(\"regeneralizeDataWithLinkedRecords, result is:\");\n  //console.log(result);\n  //console.log(\"regeneralizeDataWithLinkedRecords, linkedRecords is:\");\n  //console.log(linkedRecords);\n\n  if (data.household) {\n    for (let extractedMember of data.household.members) {\n      if (extractedMember.link) {\n        // find the same member in the generalized data\n        let generalizedMember = undefined;\n        for (let member of result.householdArray) {\n          //console.log(\"regeneralizeDataWithLinkedRecords extractedMember.link is:\" + extractedMember.link);\n          if (member.uid == extractedMember.link) {\n            generalizedMember = member;\n            break;\n          }\n        }\n\n        if (generalizedMember) {\n          let memberData = undefined;\n          if (generalizedMember.isSelected) {\n            // we don't have a linked record for the primary member\n            // But we want to do some similar filling out of fields\n            //console.log(\"regeneralizeDataWithLinkedRecords member is selected\");\n            memberData = data;\n          } else {\n            let memberLinkedRecord = undefined;\n            for (let linkedRecord of linkedRecords) {\n              if (linkedRecord.link == extractedMember.link) {\n                memberLinkedRecord = linkedRecord;\n                break;\n              }\n            }\n            if (memberLinkedRecord) {\n              memberData = memberLinkedRecord.extractedData;\n            }\n          }\n\n          if (memberData) {\n            //console.log(\"regeneralizeDataWithLinkedRecords found matching member. Name is:\" + generalizedMember.name);\n            //console.log(\"regeneralizeDataWithLinkedRecords. Extracted data is :\");\n            //console.log(memberData);\n            setExtraGdHouseholdFields(memberData, generalizedMember, result.householdArrayFields);\n          }\n        }\n      }\n    }\n  } else if (data.linkData && result.role) {\n    // if there are linkData and this person is not the primary person on the record\n    // we should be able to get more detail from the linData of the primary person\n\n    // Note the code below may be redundant because the code that adds the linked records\n    // only adds the one that is needed so we are duplicating things here\n    let primaryLink = undefined;\n    if (result.role == \"Parent\") {\n      let link = data.linkData[\"Child\"];\n      if (link) {\n        primaryLink = link;\n      }\n    } else if (result.role == \"Child\") {\n      let link = data.linkData[\"Parent\"];\n      if (link) {\n        primaryLink = link;\n      } else {\n        let link = data.linkData[\"Father\"];\n        if (link) {\n          primaryLink = link;\n        } else {\n          let link = data.linkData[\"Mother\"];\n          if (link) {\n            primaryLink = link;\n          }\n        }\n      }\n    } else if (result.role == \"Sibling\") {\n      let link = data.linkData[\"Siblings\"];\n      if (link) {\n        primaryLink = link;\n      }\n    }\n\n    //console.log(\"regeneralizeDataWithLinkedRecords, primaryLink is:\");\n    //console.log(primaryLink);\n\n    if (primaryLink) {\n      let primaryLinkedRecord = undefined;\n      for (let linkedRecord of linkedRecords) {\n        if (linkedRecord.link == primaryLink) {\n          primaryLinkedRecord = linkedRecord;\n          break;\n        }\n      }\n\n      if (primaryLinkedRecord) {\n        //console.log(\"regeneralizeDataWithLinkedRecords, primaryLinkedRecord.extractedData is:\");\n        //console.log(primaryLinkedRecord.extractedData);\n\n        // Now we can look for extra data\n        let gdInput = {};\n        gdInput.extractedData = primaryLinkedRecord.extractedData;\n        let generalizedData = generalizeData(gdInput);\n\n        //console.log(\"regeneralizeDataWithLinkedRecords, primaryLinkedRecord generalizedData is:\");\n        //console.log(generalizedData);\n\n        // even if we have an event date and place the one from the linked record should be better.\n        // For example the parent in a child birt record can have a birth place which has been\n        // interpreted as the event place incorrectly e.g.:\n        // https://www.ancestry.com/discoveryui-content/view/300065623:8703\n        if (generalizedData.eventPlace) {\n          result.eventPlace = generalizedData.eventPlace;\n        }\n        if (generalizedData.eventDate) {\n          result.eventDate = generalizedData.eventDate;\n        }\n\n        // because the linked record has more data it will have a more accurate recordType\n        // For example the existing one might be BirthOrBaptism but the linked one may have\n        // Baptism because it has a BaptismDate.\n        // But we have to be careful in case it is an unclassified event\n        if (generalizedData.recordType && generalizedData.recordType != _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_2__.RT.Unclassified) {\n          result.recordType = generalizedData.recordType;\n\n          if (result.overrideRefTitle) {\n            // this means that we asked the user to specify the recordType because it was unclassified\n            // But now we have a recordType from the linkedRecord.\n            // So we didn't need to ask. If we leave the overrideRefTitle we can end up with\n            // contradictory data in the citation if they picked the wrong type.\n            delete result.overrideRefTitle;\n          }\n        }\n\n        if (generalizedData.personGender && !result.primaryPersonGender) {\n          result.primaryPersonGender = generalizedData.personGender;\n        }\n\n        // For a child marriage we want to get the spouse,\n        // This is a bit confusing - we store this in result.spouses even though it is\n        // the spouse of the child not this person\n        if (generalizedData.spouses) {\n          result.spouses = generalizedData.spouses;\n\n          if (generalizedData.ageAtEvent) {\n            result.primaryPersonAge = generalizedData.ageAtEvent;\n          }\n        } else {\n          // for a child birth/baptism we want to get the other parent and put that in spouses\n          let otherParent = undefined;\n          if (generalizedData.parents) {\n            if (result.personGender == \"male\") {\n              if (generalizedData.parents.mother) {\n                otherParent = generalizedData.parents.mother;\n              }\n            } else if (result.personGender == \"female\") {\n              if (generalizedData.parents.father) {\n                otherParent = generalizedData.parents.father;\n              }\n            } else if (result.name && result.name.name) {\n              // don't know gender so have to compare our name with parent names\n              let fatherName = \"\";\n              let motherName = \"\";\n              if (generalizedData.parents.father && generalizedData.parents.father.name) {\n                fatherName = generalizedData.parents.father.name.name;\n              }\n              if (generalizedData.parents.mother && generalizedData.parents.mother.name) {\n                motherName = generalizedData.parents.mother.name.name;\n              }\n              if (result.name.name == fatherName && generalizedData.parents.mother) {\n                otherParent = generalizedData.parents.mother;\n              } else if (result.name.name == motherName && generalizedData.parents.father) {\n                otherParent = generalizedData.parents.father;\n              }\n            }\n          }\n\n          if (otherParent && otherParent.name) {\n            result.spouses = [];\n            result.spouses.push(otherParent);\n          }\n        }\n      }\n    }\n  }\n\n  //console.log(\"regeneralizeDataWithLinkedRecords, result is:\");\n  //console.log(result);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/site/ancestry/core/ancestry_generalize_data.mjs\n");

/***/ }),

/***/ "./extension/site/ancestry/core/ancestry_options.mjs":
/*!***********************************************************!*\
  !*** ./extension/site/ancestry/core/ancestry_options.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/core/options/options_registry.mjs */ \"./extension/base/core/options/options_registry.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\nconst searchOptionsGroup = {\n  category: \"search\",\n  subcategory: \"ancestry\",\n  tab: \"search\",\n  subsection: \"ancestry\",\n  subheading: \"parameters\",\n  options: [\n    {\n      optionName: \"domain\",\n      type: \"select\",\n      label: \"Domain to use for searches (where is your subscription?)\",\n      comment:\n        \"NOTE: If you are trying to follow an Ancestry link/template that points to a different domain\" +\n        ' you can right click on the link and use the context menu item \"Sourcer: Open Link in New Tab\".' +\n        \" This will redirect to the domain selected above.\",\n      values: [\n        { value: \"ancestry.com\", text: \"ancestry.com\" },\n        { value: \"ancestry.co.uk\", text: \"ancestry.co.uk\" },\n        { value: \"ancestry.ca\", text: \"ancestry.ca\" },\n        { value: \"ancestry.com.au\", text: \"ancestry.com.au\" },\n        { value: \"ancestry.de\", text: \"ancestry.de\" },\n        { value: \"ancestry.it\", text: \"ancestry.it\" },\n        { value: \"ancestry.fr\", text: \"ancestry.fr\" },\n        { value: \"ancestry.se\", text: \"ancestry.se\" },\n        { value: \"ancestry.mx\", text: \"ancestry.mx\" },\n        { value: \"ancestrylibrary.com\", text: \"ancestrylibrary.com\" },\n        {\n          value: \"ancestrylibraryedition.co.uk\",\n          text: \"ancestrylibraryedition.co.uk\",\n        },\n        { value: \"ancestrylibrary.ca\", text: \"ancestrylibrary.ca\" },\n        { value: \"ancestrylibrary.com.au\", text: \"ancestrylibrary.com.au\" },\n      ],\n      defaultValue: \"ancestry.com\",\n    },\n  ],\n};\n\nconst citationOptionsGroup = {\n  category: \"citation\",\n  subcategory: \"ancestry\",\n  tab: \"citation\",\n  subsection: \"ancestry\",\n  options: [\n    {\n      optionName: \"dataStyle\",\n      type: \"select\",\n      label: \"Include record data at end of citation as\",\n      values: [\n        { value: \"none\", text: \"Do not include data\" },\n        {\n          value: \"string\",\n          text: \"Sentence (fall back to list if no sentence)\",\n        },\n        { value: \"list\", text: \"List of field names/values\" },\n        { value: \"table\", text: \"Table of field names/values\" },\n      ],\n      defaultValue: \"string\",\n      unitTestValue: \"table\",\n    },\n    {\n      optionName: \"recordTemplateDomain\",\n      type: \"select\",\n      label: \"Ancestry Record template domain\",\n      values: [\n        { value: \"fromRecord\", text: \"Use the domain from record being cited\" },\n        { value: \"ancestry.com\", text: \"ancestry.com (no 3rd parameter)\" },\n        { value: \"ancestry.co.uk\", text: \"ancestry.co.uk\" },\n        { value: \"ancestry.ca\", text: \"ancestry.ca\" },\n        { value: \"ancestry.com.au\", text: \"ancestry.com.au\" },\n        { value: \"ancestry.de\", text: \"ancestry.de\" },\n        { value: \"ancestry.it\", text: \"ancestry.it\" },\n        { value: \"ancestry.fr\", text: \"ancestry.fr\" },\n        { value: \"ancestry.se\", text: \"ancestry.se\" },\n        { value: \"ancestry.mx\", text: \"ancestry.mx\" },\n      ],\n      defaultValue: \"fromRecord\",\n    },\n    {\n      optionName: \"subscriptionRequired\",\n      type: \"select\",\n      label: \"Indicate that a subscription is required with link\",\n      values: [\n        { value: \"none\", text: \"Do not add any such indication\" },\n        {\n          value: \"subscriptionRequired\",\n          text: 'Include the text \"subscription required\"',\n        },\n        {\n          value: \"requiresSubscription\",\n          text: 'Include the text \"requires subscription\"',\n        },\n        { value: \"dollar\", text: 'Include the text \"$\"' },\n        { value: \"paywall\", text: 'Include the text \"paywall\"' },\n      ],\n      defaultValue: \"none\",\n    },\n    {\n      optionName: \"includeSharingTemplate\",\n      type: \"checkbox\",\n      label: \"Include a sharing template to the original image if available\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"addEditCitationButton\",\n      type: \"checkbox\",\n      label: \"On Ancestry image pages add a button to edit citation in panel\",\n      defaultValue: true,\n    },\n  ],\n};\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"search\", \"ancestry\", \"Ancestry\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSiteSearchPopupOptionsGroup)(\"ancestry\", 1, 1);\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubheadingForOptions)(\"search\", \"ancestry\", \"parameters\", \"Search Parameters\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(searchOptionsGroup);\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"citation\", \"ancestry\", \"Ancestry\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(citationOptionsGroup);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/site/ancestry/core/ancestry_options.mjs\n");

/***/ }),

/***/ "./extension/site/bg/core/bg_options.mjs":
/*!***********************************************!*\
  !*** ./extension/site/bg/core/bg_options.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/core/options/options_registry.mjs */ \"./extension/base/core/options/options_registry.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\nconst searchOptionsGroup = {\n  category: \"search\",\n  subcategory: \"bg\",\n  tab: \"search\",\n  subsection: \"bg\",\n  subheading: \"parameters\",\n  options: [\n    {\n      optionName: \"exactLastName\",\n      type: \"checkbox\",\n      label: \"Exact last name in search\",\n      defaultValue: false,\n    },\n    {\n      optionName: \"includeFirstName\",\n      type: \"checkbox\",\n      label: \"Include first name in search\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"exactFirstNames\",\n      type: \"checkbox\",\n      label: \"Exact first names in search\",\n      defaultValue: false,\n    },\n    {\n      optionName: \"includeMiddleName\",\n      type: \"checkbox\",\n      label: \"Include middle name in search\",\n      defaultValue: true,\n    },    \n    {\n      optionName: \"includeMaidenName\",\n      type: \"checkbox\",\n      label: \"Include maiden name in search\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"exactMaidenName\",\n      type: \"checkbox\",\n      label: \"Exact maiden name in search\",\n      defaultValue: false,\n    },\n    {\n      optionName: \"birthYearExactness\",\n      type: \"select\",\n      label: \"Search exactness to use for birth year\",\n      values: [\n        { value: \"none\", text: \"Do not specify a birth year\" },\n        //{ value: \"auto\", text: \"Set automatically based on source\" },\n        { value: \"0\", text: \"+/- 0 years\" },\n        { value: \"1\", text: \"+/- 1 years\" },        \n        { value: \"2\", text: \"+/- 2 years\" },\n        { value: \"3\", text: \"+/- 3 years\" },\n        { value: \"4\", text: \"+/- 4 years\" },\n        { value: \"5\", text: \"+/- 5 years\" },\n        { value: \"6\", text: \"+/- 6 years\" },\n        { value: \"7\", text: \"+/- 7 years\" },\n        { value: \"8\", text: \"+/- 8 years\" },\n        { value: \"9\", text: \"+/- 9 years\" },\n        { value: \"10\", text: \"+/- 10 years\" },\n      ],\n      defaultValue: \"5\",\n    },\n    {\n      optionName: \"deathYearExactness\",\n      type: \"select\",\n      label: \"Search exactness to use for death year\",\n      values: [\n        { value: \"none\", text: \"Do not specify a death year\" },\n        //{ value: \"auto\", text: \"Set automatically based on source\" },\n        { value: \"0\", text: \"+/- 0 years\" },\n        { value: \"1\", text: \"+/- 1 years\" },        \n        { value: \"2\", text: \"+/- 2 years\" },\n        { value: \"3\", text: \"+/- 3 years\" },\n        { value: \"4\", text: \"+/- 4 years\" },\n        { value: \"5\", text: \"+/- 5 years\" },\n        { value: \"6\", text: \"+/- 6 years\" },\n        { value: \"7\", text: \"+/- 7 years\" },\n        { value: \"8\", text: \"+/- 8 years\" },\n        { value: \"9\", text: \"+/- 9 years\" },\n        { value: \"10\", text: \"+/- 10 years\" },\n      ],\n      defaultValue: \"5\",\n    },\n  ],\n};\n\nconst citationOptionsGroup = {\n  category: \"citation\",\n  subcategory: \"bg\",\n  tab: \"citation\",\n  subsection: \"bg\",\n  options: [\n        {\n      optionName: \"includeTranscriber\",\n      type: \"checkbox\",\n      label: \"Include the transcriber in the citation\",\n      defaultValue: true,\n      unitTestValue: true,\n    },\n    {\n      optionName: \"includePhotographer\",\n      type: \"checkbox\",\n      label: \"Include the photographer in the citation\",\n      defaultValue: true,\n      unitTestValue: true,\n    },\n    {\n      optionName: \"includeRelatives\",\n      type: \"checkbox\",\n      label: \"List others mentioned on memorial (if any)\",\n      defaultValue: false,\n      unitTestValue: true,\n    },\n    {\n      optionName: \"includeEpitaph\",\n      type: \"checkbox\",\n      label: \"Include the epitaph (if any)\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"bracketsRoundName\",\n      type: \"select\",\n      label: \"If the name has a part surrounded by brackets (usually maiden name)\",\n      values: [\n        { \n          value: \"omit\", \n          text: \"Omit that part of name from citation\",\n        },\n        {\n          value: \"bracket\",\n          text: \"Leave that part of name in brackets in citation\",\n        },\n        {\n          value: \"insert\",\n          text: \"Insert before last name. e.g. Mary Smith (Brown) to Mary (Brown) Smith\",\n        },\n      ],\n      defaultValue: \"insert\",\n    },\n  ],\n};\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"search\", \"bg\", \"BillionGraves\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSiteSearchPopupOptionsGroup)(\"bg\", 4, 4);\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubheadingForOptions)(\"search\", \"bg\", \"parameters\", \"Search Parameters\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(searchOptionsGroup);\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"citation\", \"bg\", \"BillionGraves\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(citationOptionsGroup);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/site/bg/core/bg_options.mjs\n");

/***/ }),

/***/ "./extension/site/fg/core/fg_build_citation.mjs":
/*!******************************************************!*\
  !*** ./extension/site/fg/core/fg_build_citation.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"buildCitation\": () => (/* binding */ buildCitation)\n/* harmony export */ });\n/* harmony import */ var _base_core_citation_builder_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/core/citation_builder.mjs */ \"./extension/base/core/citation_builder.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\nfunction buildCoreCitation(data, runDate, builder) {\n  // Example citation:\n  // Burial: Find a Grave.\n  // Citing Oak Grove Cemetery, Hillsdale, Hillsdale County, Michigan, USA\n  // {{FindAGrave|115176143}} (accessed 4 April 2022)\n  // William Henry Pavey (1 Dec 1875–14 Apr 1961)\n\n  let options = builder.getOptions();\n\n  let sourceTitle = \"Find a Grave\";\n\n  builder.databaseHasImages = true;\n\n  if (options.citation_general_addEeItemType) {\n    if (!data.hasImage) {\n      builder.databaseHasImages = false;\n    }\n  } else if (options.citation_fg_includeImageStatus) {\n    if (data.hasImage === true) {\n      sourceTitle += \" (has image)\";\n    } else if (data.hasImage === false) {\n      sourceTitle += \" (no image)\";\n    }\n    builder.putSourceTitleInQuotes = false;\n  }\n  builder.sourceTitle = sourceTitle;\n\n  let recordLink = \"{{FindAGrave|\" + data.memorialId + \"}}\";\n  builder.recordLinkOrTemplate = recordLink;\n\n  // The name string can contain italics\n  let nameString = data.name;\n  if (data.nameHtml && nameString != data.nameHtml && data.nameHtml.includes(\"<i>\")) {\n    // we may have a part in italics\n    if (options.citation_fg_italicsInName != \"plain\") {\n      let html = data.nameHtml;\n      let italicStartIndex = html.indexOf(\"<i>\");\n      let italicEndIndex = html.indexOf(\"</i>\", italicStartIndex);\n      if (italicStartIndex != -1 && italicEndIndex != -1) {\n        let partBefore = html.substring(0, italicStartIndex).trim();\n        let partItalic = html.substring(italicStartIndex + 3, italicEndIndex).trim();\n        let partAfter = html.substring(italicEndIndex + 4).trim();\n\n        if (options.citation_fg_italicsInName == \"omit\") {\n          nameString = partBefore + \" \" + partAfter;\n        } else {\n          nameString = partBefore + \" ''\" + partItalic + \"'' \" + partAfter;\n        }\n      }\n    }\n  }\n\n  let dataString = \"Memorial page for \" + nameString;\n  if (data.deathDate && data.birthDate) {\n    dataString += \" (\" + data.birthDate + \"-\" + data.deathDate + \")\";\n  } else if (data.deathDate) {\n    dataString += \" (d. \" + data.deathDate + \")\";\n  }\n\n  if (data.cemeteryName && data.cemeteryFullAddress) {\n    dataString += \", citing \" + data.cemeteryName + \", \" + data.cemeteryFullAddress;\n\n    if (data.plot && options.citation_fg_includeImageStatus) {\n      dataString += \" (plot: \" + data.plot + \")\";\n    }\n  }\n\n  if (options.citation_fg_includeMaintainer && data.citation) {\n    let indexOfMaintained = data.citation.indexOf(\"Maintained by\");\n    if (indexOfMaintained != -1) {\n      let maintainedString = data.citation.substring(indexOfMaintained);\n      if (maintainedString.endsWith(\".\")) {\n        maintainedString = maintainedString.substring(0, maintainedString.length - 1).trim();\n      }\n      dataString += \"; \" + maintainedString;\n    }\n  }\n\n  dataString += \".\";\n\n  if (data.inscription && options.citation_fg_includeInscription) {\n    if (options.citation_general_addBreaksWithinBody) {\n      dataString += \"<br/>\";\n    } else {\n      dataString += \" \";\n    }\n    if (builder.type != \"source\" && options.citation_general_addNewlinesWithinBody) {\n      dataString += \"\\n\";\n    }\n    let inscription = data.inscription.trim();\n    dataString += \"''\";\n    if (inscription[0] != '\"' && inscription[0] != \"'\") {\n      dataString += '\"';\n    }\n    dataString += inscription;\n    let inscriptionEnd = inscription[inscription.length - 1];\n    if (inscriptionEnd != '\"' && inscriptionEnd != \"'\") {\n      dataString += '\"';\n    }\n    dataString += \"''\";\n  }\n\n  builder.dataString = dataString;\n}\n\nfunction buildCitation(input) {\n  const data = input.extractedData;\n  const gd = input.generalizedData;\n  const runDate = input.runDate;\n  const options = input.options;\n  const type = input.type; // \"inline\", \"narrative\" or \"source\"\n\n  let builder = new _base_core_citation_builder_mjs__WEBPACK_IMPORTED_MODULE_0__.CitationBuilder(type, runDate, options);\n\n  var citation = buildCoreCitation(data, runDate, builder);\n\n  // Assume for now that all memorial pages are for a burial\n  builder.meaningfulTitle = \"Memorial\";\n\n  if (type == \"narrative\") {\n    builder.addNarrative(gd, input.dataCache, options);\n  }\n\n  // now the builder is setup use it to build the citation text\n  let fullCitation = builder.getCitationString();\n\n  //console.log(fullCitation);\n\n  var citationObject = {\n    citation: fullCitation,\n    type: type,\n  };\n\n  return citationObject;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/site/fg/core/fg_build_citation.mjs\n");

/***/ }),

/***/ "./extension/site/fg/core/fg_extract_data.mjs":
/*!****************************************************!*\
  !*** ./extension/site/fg/core/fg_extract_data.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"extractData\": () => (/* binding */ extractData)\n/* harmony export */ });\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\nfunction cleanText(inputText) {\n  let text = inputText;\n  if (text) {\n    text = text.trim();\n    text = text.replace(/\\s+/g, \" \");\n    text = text.replace(/\\s([,;.])/g, \"$1\");\n    text = text.replace(/\\u{2013}/gu, \"-\"); // En dash\n  }\n  return text;\n}\n\nfunction setFromLabelWithId(result, parentNode, labelId, fieldName) {\n  const label = parentNode.querySelector(labelId);\n  if (label) {\n    result[fieldName] = cleanText(label.textContent);\n  }\n}\n\nfunction extractInscription(result, document) {\n  const paragraph = document.querySelector(\"#inscriptionValue\");\n  if (paragraph) {\n    let text = paragraph.innerHTML;\n    if (text) {\n      text = text.trim();\n      text = text.replace(/&lt;/g, \"<\");\n      text = text.replace(/&gt;/g, \">\");\n      text = text.replace(/&quot;/g, '\"');\n      text = text.replace(/&#39;/g, \"'\");\n      text = text.replace(/&amp;/g, \"&\");\n      text = text.replace(/\\s+/g, \" \");\n      text = text.replace(/\\s([,;.])/g, \"$1\");\n      text = text.trim();\n      if (text) {\n        result.inscription = text;\n      }\n    }\n  }\n}\n\nfunction extractData(document, url) {\n  var result = {};\n  result.url = url;\n\n  result.success = false;\n\n  setFromLabelWithId(result, document, \"#bio-name\", \"name\");\n\n  // also save the innerHTML for the name because the maiden name can be in italics\n  const nameNode = document.querySelector(\"#bio-name\");\n  if (nameNode) {\n    result.nameHtml = cleanText(nameNode.innerHTML);\n  }\n\n  let memEvents = document.querySelector(\"div.section-bio-cover dl.mem-events\");\n  //console.log(\"memEvents is: \");\n  //console.log(memEvents);\n  if (!memEvents) {\n    // old page format\n    memEvents = document.querySelector(\"div.section-bio-cover table.mem-events\");\n  }\n\n  if (!memEvents) {\n    console.log(\"fg extractData, no memEvents found\");\n    return result;\n  }\n\n  setFromLabelWithId(result, memEvents, \"#birthDateLabel\", \"birthDate\");\n  setFromLabelWithId(result, memEvents, \"#birthLocationLabel\", \"birthPlace\");\n\n  // the death date string actually includes the age also\n  const deathDatelabel = memEvents.querySelector(\"#deathDateLabel\");\n  if (deathDatelabel) {\n    let text = deathDatelabel.textContent;\n    let deathDate = text;\n    let openParenIndex = text.indexOf(\"(\");\n    if (openParenIndex != -1) {\n      deathDate = cleanText(text.substring(0, openParenIndex));\n\n      let closeParenIndex = text.indexOf(\")\", openParenIndex + 1);\n      if (closeParenIndex != -1) {\n        let parenContents = text.substring(openParenIndex + 1, closeParenIndex).trim();\n        const prefix = \"aged\";\n        if (parenContents.startsWith(prefix)) {\n          parenContents = parenContents.substring(prefix.length).trim();\n        }\n        result.ageAtDeath = cleanText(parenContents);\n      }\n    }\n    result.deathDate = cleanText(deathDate);\n  }\n\n  setFromLabelWithId(result, memEvents, \"#deathLocationLabel\", \"deathPlace\");\n\n  setFromLabelWithId(result, memEvents, \"#cemeteryNameLabel\", \"cemeteryName\");\n\n  setFromLabelWithId(result, memEvents, \"#cemeteryCityName\", \"cemeteryCity\");\n  setFromLabelWithId(result, memEvents, \"#cemeteryCountyName\", \"cemeteryCounty\");\n  setFromLabelWithId(result, memEvents, \"#cemeteryStateName\", \"cemeteryState\");\n  setFromLabelWithId(result, memEvents, \"#cemeteryCountryName\", \"cemeteryCountry\");\n\n  // also get the whole address string\n  const placeSpan = memEvents.querySelector(\"span.place[itemprop=address\");\n  if (placeSpan) {\n    result.cemeteryFullAddress = cleanText(placeSpan.textContent);\n  }\n\n  setFromLabelWithId(result, memEvents, \"#plotValueLabel\", \"plot\");\n  setFromLabelWithId(result, memEvents, \"#memNumberLabel\", \"memorialId\");\n\n  extractInscription(result, document);\n\n  // get the source citation string - it includes markup - should we just ignore that and get textContent?\n  setFromLabelWithId(result, document, \"#citationInfo\", \"citation\");\n\n  // check to see if there is an image\n  const mainPhoto = document.querySelector(\"#main-photo\");\n  if (mainPhoto) {\n    result.hasImage = true;\n  } else {\n    result.hasImage = false;\n  }\n\n  result.success = true;\n\n  //console.log(result);\n\n  return result;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/site/fg/core/fg_extract_data.mjs\n");

/***/ }),

/***/ "./extension/site/fg/core/fg_generalize_data.mjs":
/*!*******************************************************!*\
  !*** ./extension/site/fg/core/fg_generalize_data.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GeneralizedData\": () => (/* reexport safe */ _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.GeneralizedData),\n/* harmony export */   \"dateQualifiers\": () => (/* reexport safe */ _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.dateQualifiers),\n/* harmony export */   \"generalizeData\": () => (/* binding */ generalizeData)\n/* harmony export */ });\n/* harmony import */ var _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/core/generalize_data_utils.mjs */ \"./extension/base/core/generalize_data_utils.mjs\");\n/* harmony import */ var _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/core/record_type.mjs */ \"./extension/base/core/record_type.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\n\nfunction setNames(data, result) {\n  let fgName = data.name;\n  let fullName = fgName;\n  let maidenName = \"\";\n  let cln = \"\";\n\n  // The name string can contain italics\n  if (data.nameHtml && fgName != data.nameHtml && data.nameHtml.includes(\"<i>\")) {\n    // we may have a part in italics\n    let html = data.nameHtml;\n    let italicStartIndex = html.indexOf(\"<i>\");\n    let italicEndIndex = html.indexOf(\"</i>\", italicStartIndex);\n    if (italicStartIndex != -1 && italicEndIndex != -1) {\n      let partBefore = html.substring(0, italicStartIndex).trim();\n      let partItalic = html.substring(italicStartIndex + 3, italicEndIndex).trim();\n      let partAfter = html.substring(italicEndIndex + 4).trim();\n\n      // check there are no more italics\n      let secondItalicStartIndex = html.indexOf(\"<i>\", italicEndIndex);\n      if (secondItalicStartIndex == -1) {\n        fullName = partBefore + \" \" + partAfter;\n        maidenName = partItalic;\n        cln = partAfter;\n      }\n    }\n  }\n\n  result.setFullName(fullName);\n\n  if (!maidenName) {\n    result.lastNameAtDeath = result.inferLastName();\n  } else {\n    result.lastNameAtBirth = maidenName;\n    if (cln) {\n      result.lastNameAtDeath = cln;\n    }\n  }\n}\n\nfunction generalizeData(input) {\n  let data = input.extractedData;\n\n  let result = new _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.GeneralizedData();\n\n  result.sourceOfData = \"fg\";\n\n  if (!data.success) {\n    return result; //the extract failed\n  }\n\n  result.sourceType = \"record\";\n\n  // If no burial location perhaps it should be a death?\n  result.recordType = _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Memorial;\n\n  result.setEventDate(data.deathDate);\n  result.setEventPlace(data.cemeteryFullAddress);\n\n  if (result.eventPlace) {\n    result.eventPlace.streetAddress = data.cemeteryName;\n  }\n\n  setNames(data, result);\n\n  result.setDeathDate(data.deathDate);\n  result.setDeathPlace(data.deathPlace);\n\n  if (data.ageAtDeath) {\n    result.ageAtDeath = data.ageAtDeath;\n  }\n\n  result.setBirthDate(data.birthDate);\n  result.setBirthPlace(data.birthPlace);\n\n  // should we use a collection to allow search for same record on Ancestry?\n\n  result.hasValidData = true;\n\n  return result;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb24vc2l0ZS9mZy9jb3JlL2ZnX2dlbmVyYWxpemVfZGF0YS5tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRStGO0FBQ3ZDOztBQUV4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG1CQUFtQixpRkFBZTs7QUFFbEM7O0FBRUE7QUFDQSxtQkFBbUI7QUFDbkI7O0FBRUE7O0FBRUE7QUFDQSxzQkFBc0IsbUVBQVc7O0FBRWpDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFMkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaXRhdGlvbkV4dHJhY3Rvci8uL2V4dGVuc2lvbi9zaXRlL2ZnL2NvcmUvZmdfZ2VuZXJhbGl6ZV9kYXRhLm1qcz9iZGFhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjAgUm9iZXJ0IE0gUGF2ZXlcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IHsgR2VuZXJhbGl6ZWREYXRhLCBkYXRlUXVhbGlmaWVycyB9IGZyb20gXCIuLi8uLi8uLi9iYXNlL2NvcmUvZ2VuZXJhbGl6ZV9kYXRhX3V0aWxzLm1qc1wiO1xuaW1wb3J0IHsgUlQgfSBmcm9tIFwiLi4vLi4vLi4vYmFzZS9jb3JlL3JlY29yZF90eXBlLm1qc1wiO1xuXG5mdW5jdGlvbiBzZXROYW1lcyhkYXRhLCByZXN1bHQpIHtcbiAgbGV0IGZnTmFtZSA9IGRhdGEubmFtZTtcbiAgbGV0IGZ1bGxOYW1lID0gZmdOYW1lO1xuICBsZXQgbWFpZGVuTmFtZSA9IFwiXCI7XG4gIGxldCBjbG4gPSBcIlwiO1xuXG4gIC8vIFRoZSBuYW1lIHN0cmluZyBjYW4gY29udGFpbiBpdGFsaWNzXG4gIGlmIChkYXRhLm5hbWVIdG1sICYmIGZnTmFtZSAhPSBkYXRhLm5hbWVIdG1sICYmIGRhdGEubmFtZUh0bWwuaW5jbHVkZXMoXCI8aT5cIikpIHtcbiAgICAvLyB3ZSBtYXkgaGF2ZSBhIHBhcnQgaW4gaXRhbGljc1xuICAgIGxldCBodG1sID0gZGF0YS5uYW1lSHRtbDtcbiAgICBsZXQgaXRhbGljU3RhcnRJbmRleCA9IGh0bWwuaW5kZXhPZihcIjxpPlwiKTtcbiAgICBsZXQgaXRhbGljRW5kSW5kZXggPSBodG1sLmluZGV4T2YoXCI8L2k+XCIsIGl0YWxpY1N0YXJ0SW5kZXgpO1xuICAgIGlmIChpdGFsaWNTdGFydEluZGV4ICE9IC0xICYmIGl0YWxpY0VuZEluZGV4ICE9IC0xKSB7XG4gICAgICBsZXQgcGFydEJlZm9yZSA9IGh0bWwuc3Vic3RyaW5nKDAsIGl0YWxpY1N0YXJ0SW5kZXgpLnRyaW0oKTtcbiAgICAgIGxldCBwYXJ0SXRhbGljID0gaHRtbC5zdWJzdHJpbmcoaXRhbGljU3RhcnRJbmRleCArIDMsIGl0YWxpY0VuZEluZGV4KS50cmltKCk7XG4gICAgICBsZXQgcGFydEFmdGVyID0gaHRtbC5zdWJzdHJpbmcoaXRhbGljRW5kSW5kZXggKyA0KS50cmltKCk7XG5cbiAgICAgIC8vIGNoZWNrIHRoZXJlIGFyZSBubyBtb3JlIGl0YWxpY3NcbiAgICAgIGxldCBzZWNvbmRJdGFsaWNTdGFydEluZGV4ID0gaHRtbC5pbmRleE9mKFwiPGk+XCIsIGl0YWxpY0VuZEluZGV4KTtcbiAgICAgIGlmIChzZWNvbmRJdGFsaWNTdGFydEluZGV4ID09IC0xKSB7XG4gICAgICAgIGZ1bGxOYW1lID0gcGFydEJlZm9yZSArIFwiIFwiICsgcGFydEFmdGVyO1xuICAgICAgICBtYWlkZW5OYW1lID0gcGFydEl0YWxpYztcbiAgICAgICAgY2xuID0gcGFydEFmdGVyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJlc3VsdC5zZXRGdWxsTmFtZShmdWxsTmFtZSk7XG5cbiAgaWYgKCFtYWlkZW5OYW1lKSB7XG4gICAgcmVzdWx0Lmxhc3ROYW1lQXREZWF0aCA9IHJlc3VsdC5pbmZlckxhc3ROYW1lKCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0Lmxhc3ROYW1lQXRCaXJ0aCA9IG1haWRlbk5hbWU7XG4gICAgaWYgKGNsbikge1xuICAgICAgcmVzdWx0Lmxhc3ROYW1lQXREZWF0aCA9IGNsbjtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuZXJhbGl6ZURhdGEoaW5wdXQpIHtcbiAgbGV0IGRhdGEgPSBpbnB1dC5leHRyYWN0ZWREYXRhO1xuXG4gIGxldCByZXN1bHQgPSBuZXcgR2VuZXJhbGl6ZWREYXRhKCk7XG5cbiAgcmVzdWx0LnNvdXJjZU9mRGF0YSA9IFwiZmdcIjtcblxuICBpZiAoIWRhdGEuc3VjY2Vzcykge1xuICAgIHJldHVybiByZXN1bHQ7IC8vdGhlIGV4dHJhY3QgZmFpbGVkXG4gIH1cblxuICByZXN1bHQuc291cmNlVHlwZSA9IFwicmVjb3JkXCI7XG5cbiAgLy8gSWYgbm8gYnVyaWFsIGxvY2F0aW9uIHBlcmhhcHMgaXQgc2hvdWxkIGJlIGEgZGVhdGg/XG4gIHJlc3VsdC5yZWNvcmRUeXBlID0gUlQuTWVtb3JpYWw7XG5cbiAgcmVzdWx0LnNldEV2ZW50RGF0ZShkYXRhLmRlYXRoRGF0ZSk7XG4gIHJlc3VsdC5zZXRFdmVudFBsYWNlKGRhdGEuY2VtZXRlcnlGdWxsQWRkcmVzcyk7XG5cbiAgaWYgKHJlc3VsdC5ldmVudFBsYWNlKSB7XG4gICAgcmVzdWx0LmV2ZW50UGxhY2Uuc3RyZWV0QWRkcmVzcyA9IGRhdGEuY2VtZXRlcnlOYW1lO1xuICB9XG5cbiAgc2V0TmFtZXMoZGF0YSwgcmVzdWx0KTtcblxuICByZXN1bHQuc2V0RGVhdGhEYXRlKGRhdGEuZGVhdGhEYXRlKTtcbiAgcmVzdWx0LnNldERlYXRoUGxhY2UoZGF0YS5kZWF0aFBsYWNlKTtcblxuICBpZiAoZGF0YS5hZ2VBdERlYXRoKSB7XG4gICAgcmVzdWx0LmFnZUF0RGVhdGggPSBkYXRhLmFnZUF0RGVhdGg7XG4gIH1cblxuICByZXN1bHQuc2V0QmlydGhEYXRlKGRhdGEuYmlydGhEYXRlKTtcbiAgcmVzdWx0LnNldEJpcnRoUGxhY2UoZGF0YS5iaXJ0aFBsYWNlKTtcblxuICAvLyBzaG91bGQgd2UgdXNlIGEgY29sbGVjdGlvbiB0byBhbGxvdyBzZWFyY2ggZm9yIHNhbWUgcmVjb3JkIG9uIEFuY2VzdHJ5P1xuXG4gIHJlc3VsdC5oYXNWYWxpZERhdGEgPSB0cnVlO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCB7IGdlbmVyYWxpemVEYXRhLCBHZW5lcmFsaXplZERhdGEsIGRhdGVRdWFsaWZpZXJzIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./extension/site/fg/core/fg_generalize_data.mjs\n");

/***/ }),

/***/ "./extension/site/fg/core/fg_options.mjs":
/*!***********************************************!*\
  !*** ./extension/site/fg/core/fg_options.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/core/options/options_registry.mjs */ \"./extension/base/core/options/options_registry.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\nconst searchOptionsGroup = {\n  category: \"search\",\n  subcategory: \"fg\",\n  tab: \"search\",\n  subsection: \"fg\",\n  subheading: \"parameters\",\n  options: [\n    {\n      optionName: \"includeFirstName\",\n      type: \"checkbox\",\n      label: \"Include first name in search\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"includeMiddleName\",\n      type: \"checkbox\",\n      label: \"Include middle name in search\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"includeMaidenName\",\n      type: \"checkbox\",\n      label: \"Include matches with a memorial's maiden name in search\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"birthYearExactness\",\n      type: \"select\",\n      label: \"Search exactness to use for birth year\",\n      values: [\n        { value: \"none\", text: \"Do not specify a birth year\" },\n        { value: \"auto\", text: \"Set automatically based on source\" },\n        { value: \"exact\", text: \"Exact year only\" },\n        { value: \"1\", text: \"+/- 1 years\" },\n        { value: \"3\", text: \"+/- 3 years\" },\n        { value: \"5\", text: \"+/- 5 years\" },\n        { value: \"10\", text: \"+/- 10 years\" },\n        { value: \"25\", text: \"+/- 25 years\" },\n      ],\n      defaultValue: \"auto\",\n    },\n    {\n      optionName: \"deathYearExactness\",\n      type: \"select\",\n      label: \"Search exactness to use for death year\",\n      values: [\n        { value: \"none\", text: \"Do not specify a death year\" },\n        { value: \"auto\", text: \"Set automatically based on source\" },\n        { value: \"exact\", text: \"Exact year only\" },\n        { value: \"1\", text: \"+/- 1 years\" },\n        { value: \"3\", text: \"+/- 3 years\" },\n        { value: \"5\", text: \"+/- 5 years\" },\n        { value: \"10\", text: \"+/- 10 years\" },\n        { value: \"25\", text: \"+/- 25 years\" },\n      ],\n      defaultValue: \"auto\",\n    },\n  ],\n};\n\nconst citationOptionsGroup = {\n  category: \"citation\",\n  subcategory: \"fg\",\n  tab: \"citation\",\n  subsection: \"fg\",\n  options: [\n    {\n      optionName: \"includeImageStatus\",\n      type: \"checkbox\",\n      label: \"Include an indication of whether there is an image or not\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"includePlot\",\n      type: \"checkbox\",\n      label: \"Include the burial plot details if available\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"includeMaintainer\",\n      type: \"checkbox\",\n      label: \"Include the maintainer in the citation\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"includeInscription\",\n      type: \"checkbox\",\n      label: \"Include the inscription in the citation if available\",\n      defaultValue: false,\n      unitTestValue: true,\n    },\n    {\n      optionName: \"italicsInName\",\n      type: \"select\",\n      label: \"If the name has a part in italics (usually maiden name)\",\n      values: [\n        { value: \"omit\", text: \"Omit that part of name from citation\" },\n        {\n          value: \"italic\",\n          text: \"Put that part of name in italics in citation\",\n        },\n        {\n          value: \"plain\",\n          text: \"Make that part of the name plain text in citation\",\n        },\n      ],\n      defaultValue: \"italic\",\n    },\n  ],\n};\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"search\", \"fg\", \"Find a Grave\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSiteSearchPopupOptionsGroup)(\"fg\", 4, 4);\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubheadingForOptions)(\"search\", \"fg\", \"parameters\", \"Search Parameters\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(searchOptionsGroup);\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"citation\", \"fg\", \"Find a Grave\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(citationOptionsGroup);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/site/fg/core/fg_options.mjs\n");

/***/ }),

/***/ "./extension/site/fmp/core/fmp_options.mjs":
/*!*************************************************!*\
  !*** ./extension/site/fmp/core/fmp_options.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/core/options/options_registry.mjs */ \"./extension/base/core/options/options_registry.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\nconst searchOptionsGroup = {\n  category: \"search\",\n  subcategory: \"fmp\",\n  tab: \"search\",\n  subsection: \"fmp\",\n  subheading: \"parameters\",\n  options: [\n    {\n      optionName: \"domain\",\n      type: \"select\",\n      label: \"Domain to use for searches (where is your subscription?)\",\n      comment:\n        \"NOTE: If you are trying to follow a FindMyPast link that points to a different domain\" +\n        ' you can right click on the link and use the context menu item \"Sourcer: Open Link in New Tab\".' +\n        \" This will redirect to the domain selected above.\",\n      values: [\n        { value: \"findmypast.com\", text: \"findmypast.com\" },\n        { value: \"findmypast.co.uk\", text: \"findmypast.co.uk\" },\n        { value: \"findmypast.ie\", text: \"findmypast.ie\" },\n        { value: \"findmypast.com.au\", text: \"findmypast.com.au\" },\n      ],\n      defaultValue: \"findmypast.co.uk\",\n      unitTestValue: \"findmypast.co.uk\",\n    },\n    {\n      optionName: \"lastNameVariants\",\n      type: \"checkbox\",\n      label: \"Include last name variants in search\",\n      defaultValue: true,\n      unitTestValue: true,\n    },\n  ],\n};\n\nconst citationOptionsGroup = {\n  category: \"citation\",\n  subcategory: \"fmp\",\n  tab: \"citation\",\n  subsection: \"fmp\",\n  options: [\n    {\n      optionName: \"dataStyle\",\n      type: \"select\",\n      label: \"Include record data at end of citation as\",\n      values: [\n        { value: \"none\", text: \"Do not include data\" },\n        {\n          value: \"string\",\n          text: \"Sentence (fall back to list if no sentence)\",\n        },\n        { value: \"list\", text: \"List of field names/values\" },\n        { value: \"table\", text: \"Table of field names/values\" },\n      ],\n      defaultValue: \"string\",\n      unitTestValue: \"string\",\n    },\n    {\n      optionName: \"subscriptionRequired\",\n      type: \"select\",\n      label: \"Indicate that a subscription is required with link\",\n      values: [\n        { value: \"none\", text: \"Do not add any such indication\" },\n        {\n          value: \"subscriptionRequired\",\n          text: 'Include the text \"subscription required\"',\n        },\n        {\n          value: \"requiresSubscription\",\n          text: 'Include the text \"requires subscription\"',\n        },\n        { value: \"dollar\", text: 'Include the text \"$\"' },\n        { value: \"paywall\", text: 'Include the text \"paywall\"' },\n      ],\n      defaultValue: \"none\",\n      unitTestValue: \"none\",\n    },\n    {\n      optionName: \"includeImageLink\",\n      type: \"checkbox\",\n      label: \"Include a link to the original image if available\",\n      defaultValue: true,\n      unitTestValue: true,\n    },\n  ],\n};\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"search\", \"fmp\", \"FindMyPast\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSiteSearchPopupOptionsGroup)(\"fmp\", 2, 2);\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubheadingForOptions)(\"search\", \"fmp\", \"parameters\", \"Search Parameters\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(searchOptionsGroup);\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"citation\", \"fmp\", \"FindMyPast\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(citationOptionsGroup);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb24vc2l0ZS9mbXAvY29yZS9mbXBfb3B0aW9ucy5tanMuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBT3lEOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsaURBQWlEO0FBQzNELFVBQVUscURBQXFEO0FBQy9ELFVBQVUsK0NBQStDO0FBQ3pELFVBQVUsdURBQXVEO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSw0Q0FBNEM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULFVBQVUsbURBQW1EO0FBQzdELFVBQVUscURBQXFEO0FBQy9EO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSx1REFBdUQ7QUFDakU7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxVQUFVLCtDQUErQztBQUN6RCxVQUFVLHNEQUFzRDtBQUNoRTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEscUdBQTRCO0FBQzVCLDRHQUFtQztBQUNuQyxxR0FBNEI7QUFDNUIsNkZBQW9COztBQUVwQixxR0FBNEI7QUFDNUIsNkZBQW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQ2l0YXRpb25FeHRyYWN0b3IvLi9leHRlbnNpb24vc2l0ZS9mbXAvY29yZS9mbXBfb3B0aW9ucy5tanM/NDEyNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIFJvYmVydCBNIFBhdmV5XG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCB7XG4gIHJlZ2lzdGVyU3Vic2VjdGlvbkZvck9wdGlvbnMsXG4gIHJlZ2lzdGVyU3ViaGVhZGluZ0Zvck9wdGlvbnMsXG4gIHJlZ2lzdGVyT3B0aW9uc0dyb3VwLFxuICByZWdpc3RlclNpdGVTZWFyY2hQb3B1cE9wdGlvbnNHcm91cCxcbn0gZnJvbSBcIi4uLy4uLy4uL2Jhc2UvY29yZS9vcHRpb25zL29wdGlvbnNfcmVnaXN0cnkubWpzXCI7XG5cbmNvbnN0IHNlYXJjaE9wdGlvbnNHcm91cCA9IHtcbiAgY2F0ZWdvcnk6IFwic2VhcmNoXCIsXG4gIHN1YmNhdGVnb3J5OiBcImZtcFwiLFxuICB0YWI6IFwic2VhcmNoXCIsXG4gIHN1YnNlY3Rpb246IFwiZm1wXCIsXG4gIHN1YmhlYWRpbmc6IFwicGFyYW1ldGVyc1wiLFxuICBvcHRpb25zOiBbXG4gICAge1xuICAgICAgb3B0aW9uTmFtZTogXCJkb21haW5cIixcbiAgICAgIHR5cGU6IFwic2VsZWN0XCIsXG4gICAgICBsYWJlbDogXCJEb21haW4gdG8gdXNlIGZvciBzZWFyY2hlcyAod2hlcmUgaXMgeW91ciBzdWJzY3JpcHRpb24/KVwiLFxuICAgICAgY29tbWVudDpcbiAgICAgICAgXCJOT1RFOiBJZiB5b3UgYXJlIHRyeWluZyB0byBmb2xsb3cgYSBGaW5kTXlQYXN0IGxpbmsgdGhhdCBwb2ludHMgdG8gYSBkaWZmZXJlbnQgZG9tYWluXCIgK1xuICAgICAgICAnIHlvdSBjYW4gcmlnaHQgY2xpY2sgb24gdGhlIGxpbmsgYW5kIHVzZSB0aGUgY29udGV4dCBtZW51IGl0ZW0gXCJTb3VyY2VyOiBPcGVuIExpbmsgaW4gTmV3IFRhYlwiLicgK1xuICAgICAgICBcIiBUaGlzIHdpbGwgcmVkaXJlY3QgdG8gdGhlIGRvbWFpbiBzZWxlY3RlZCBhYm92ZS5cIixcbiAgICAgIHZhbHVlczogW1xuICAgICAgICB7IHZhbHVlOiBcImZpbmRteXBhc3QuY29tXCIsIHRleHQ6IFwiZmluZG15cGFzdC5jb21cIiB9LFxuICAgICAgICB7IHZhbHVlOiBcImZpbmRteXBhc3QuY28udWtcIiwgdGV4dDogXCJmaW5kbXlwYXN0LmNvLnVrXCIgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJmaW5kbXlwYXN0LmllXCIsIHRleHQ6IFwiZmluZG15cGFzdC5pZVwiIH0sXG4gICAgICAgIHsgdmFsdWU6IFwiZmluZG15cGFzdC5jb20uYXVcIiwgdGV4dDogXCJmaW5kbXlwYXN0LmNvbS5hdVwiIH0sXG4gICAgICBdLFxuICAgICAgZGVmYXVsdFZhbHVlOiBcImZpbmRteXBhc3QuY28udWtcIixcbiAgICAgIHVuaXRUZXN0VmFsdWU6IFwiZmluZG15cGFzdC5jby51a1wiLFxuICAgIH0sXG4gICAge1xuICAgICAgb3B0aW9uTmFtZTogXCJsYXN0TmFtZVZhcmlhbnRzXCIsXG4gICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICBsYWJlbDogXCJJbmNsdWRlIGxhc3QgbmFtZSB2YXJpYW50cyBpbiBzZWFyY2hcIixcbiAgICAgIGRlZmF1bHRWYWx1ZTogdHJ1ZSxcbiAgICAgIHVuaXRUZXN0VmFsdWU6IHRydWUsXG4gICAgfSxcbiAgXSxcbn07XG5cbmNvbnN0IGNpdGF0aW9uT3B0aW9uc0dyb3VwID0ge1xuICBjYXRlZ29yeTogXCJjaXRhdGlvblwiLFxuICBzdWJjYXRlZ29yeTogXCJmbXBcIixcbiAgdGFiOiBcImNpdGF0aW9uXCIsXG4gIHN1YnNlY3Rpb246IFwiZm1wXCIsXG4gIG9wdGlvbnM6IFtcbiAgICB7XG4gICAgICBvcHRpb25OYW1lOiBcImRhdGFTdHlsZVwiLFxuICAgICAgdHlwZTogXCJzZWxlY3RcIixcbiAgICAgIGxhYmVsOiBcIkluY2x1ZGUgcmVjb3JkIGRhdGEgYXQgZW5kIG9mIGNpdGF0aW9uIGFzXCIsXG4gICAgICB2YWx1ZXM6IFtcbiAgICAgICAgeyB2YWx1ZTogXCJub25lXCIsIHRleHQ6IFwiRG8gbm90IGluY2x1ZGUgZGF0YVwiIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB2YWx1ZTogXCJzdHJpbmdcIixcbiAgICAgICAgICB0ZXh0OiBcIlNlbnRlbmNlIChmYWxsIGJhY2sgdG8gbGlzdCBpZiBubyBzZW50ZW5jZSlcIixcbiAgICAgICAgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJsaXN0XCIsIHRleHQ6IFwiTGlzdCBvZiBmaWVsZCBuYW1lcy92YWx1ZXNcIiB9LFxuICAgICAgICB7IHZhbHVlOiBcInRhYmxlXCIsIHRleHQ6IFwiVGFibGUgb2YgZmllbGQgbmFtZXMvdmFsdWVzXCIgfSxcbiAgICAgIF0sXG4gICAgICBkZWZhdWx0VmFsdWU6IFwic3RyaW5nXCIsXG4gICAgICB1bml0VGVzdFZhbHVlOiBcInN0cmluZ1wiLFxuICAgIH0sXG4gICAge1xuICAgICAgb3B0aW9uTmFtZTogXCJzdWJzY3JpcHRpb25SZXF1aXJlZFwiLFxuICAgICAgdHlwZTogXCJzZWxlY3RcIixcbiAgICAgIGxhYmVsOiBcIkluZGljYXRlIHRoYXQgYSBzdWJzY3JpcHRpb24gaXMgcmVxdWlyZWQgd2l0aCBsaW5rXCIsXG4gICAgICB2YWx1ZXM6IFtcbiAgICAgICAgeyB2YWx1ZTogXCJub25lXCIsIHRleHQ6IFwiRG8gbm90IGFkZCBhbnkgc3VjaCBpbmRpY2F0aW9uXCIgfSxcbiAgICAgICAge1xuICAgICAgICAgIHZhbHVlOiBcInN1YnNjcmlwdGlvblJlcXVpcmVkXCIsXG4gICAgICAgICAgdGV4dDogJ0luY2x1ZGUgdGhlIHRleHQgXCJzdWJzY3JpcHRpb24gcmVxdWlyZWRcIicsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB2YWx1ZTogXCJyZXF1aXJlc1N1YnNjcmlwdGlvblwiLFxuICAgICAgICAgIHRleHQ6ICdJbmNsdWRlIHRoZSB0ZXh0IFwicmVxdWlyZXMgc3Vic2NyaXB0aW9uXCInLFxuICAgICAgICB9LFxuICAgICAgICB7IHZhbHVlOiBcImRvbGxhclwiLCB0ZXh0OiAnSW5jbHVkZSB0aGUgdGV4dCBcIiRcIicgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJwYXl3YWxsXCIsIHRleHQ6ICdJbmNsdWRlIHRoZSB0ZXh0IFwicGF5d2FsbFwiJyB9LFxuICAgICAgXSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogXCJub25lXCIsXG4gICAgICB1bml0VGVzdFZhbHVlOiBcIm5vbmVcIixcbiAgICB9LFxuICAgIHtcbiAgICAgIG9wdGlvbk5hbWU6IFwiaW5jbHVkZUltYWdlTGlua1wiLFxuICAgICAgdHlwZTogXCJjaGVja2JveFwiLFxuICAgICAgbGFiZWw6IFwiSW5jbHVkZSBhIGxpbmsgdG8gdGhlIG9yaWdpbmFsIGltYWdlIGlmIGF2YWlsYWJsZVwiLFxuICAgICAgZGVmYXVsdFZhbHVlOiB0cnVlLFxuICAgICAgdW5pdFRlc3RWYWx1ZTogdHJ1ZSxcbiAgICB9LFxuICBdLFxufTtcblxucmVnaXN0ZXJTdWJzZWN0aW9uRm9yT3B0aW9ucyhcInNlYXJjaFwiLCBcImZtcFwiLCBcIkZpbmRNeVBhc3RcIik7XG5yZWdpc3RlclNpdGVTZWFyY2hQb3B1cE9wdGlvbnNHcm91cChcImZtcFwiLCAyLCAyKTtcbnJlZ2lzdGVyU3ViaGVhZGluZ0Zvck9wdGlvbnMoXCJzZWFyY2hcIiwgXCJmbXBcIiwgXCJwYXJhbWV0ZXJzXCIsIFwiU2VhcmNoIFBhcmFtZXRlcnNcIik7XG5yZWdpc3Rlck9wdGlvbnNHcm91cChzZWFyY2hPcHRpb25zR3JvdXApO1xuXG5yZWdpc3RlclN1YnNlY3Rpb25Gb3JPcHRpb25zKFwiY2l0YXRpb25cIiwgXCJmbXBcIiwgXCJGaW5kTXlQYXN0XCIpO1xucmVnaXN0ZXJPcHRpb25zR3JvdXAoY2l0YXRpb25PcHRpb25zR3JvdXApO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./extension/site/fmp/core/fmp_options.mjs\n");

/***/ }),

/***/ "./extension/site/freebmd/core/freebmd_options.mjs":
/*!*********************************************************!*\
  !*** ./extension/site/freebmd/core/freebmd_options.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/core/options/options_registry.mjs */ \"./extension/base/core/options/options_registry.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\nconst citationOptionsGroup = {\n  category: \"citation\",\n  subcategory: \"freebmd\",\n  tab: \"citation\",\n  subsection: \"freebmd\",\n  options: [\n    {\n      optionName: \"changeNamesToInitialCaps\",\n      type: \"checkbox\",\n      label: \"Change any person and place names in all caps to initial caps\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"referenceInItalics\",\n      type: \"checkbox\",\n      label: 'Put the text \"GRO Reference\" in italics',\n      defaultValue: true,\n    },\n    {\n      optionName: \"useDistrictUrl\",\n      type: \"checkbox\",\n      label: \"Add a link to the registration district page on ukbmd.org.uk (Not currently implemented)\",\n      defaultValue: true,\n    },\n  ],\n};\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"search\", \"freebmd\", \"FreeBMD (UK)\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSiteSearchPopupOptionsGroup)(\"freebmd\", 7, 7);\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"citation\", \"freebmd\", \"FreeBMD (UK)\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(citationOptionsGroup);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb24vc2l0ZS9mcmVlYm1kL2NvcmUvZnJlZWJtZF9vcHRpb25zLm1qcy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFNeUQ7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEscUdBQTRCO0FBQzVCLDRHQUFtQzs7QUFFbkMscUdBQTRCO0FBQzVCLDZGQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL0NpdGF0aW9uRXh0cmFjdG9yLy4vZXh0ZW5zaW9uL3NpdGUvZnJlZWJtZC9jb3JlL2ZyZWVibWRfb3B0aW9ucy5tanM/ZGE0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIFJvYmVydCBNIFBhdmV5XG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCB7XG4gIHJlZ2lzdGVyU3Vic2VjdGlvbkZvck9wdGlvbnMsXG4gIHJlZ2lzdGVyT3B0aW9uc0dyb3VwLFxuICByZWdpc3RlclNpdGVTZWFyY2hQb3B1cE9wdGlvbnNHcm91cCxcbn0gZnJvbSBcIi4uLy4uLy4uL2Jhc2UvY29yZS9vcHRpb25zL29wdGlvbnNfcmVnaXN0cnkubWpzXCI7XG5cbmNvbnN0IGNpdGF0aW9uT3B0aW9uc0dyb3VwID0ge1xuICBjYXRlZ29yeTogXCJjaXRhdGlvblwiLFxuICBzdWJjYXRlZ29yeTogXCJmcmVlYm1kXCIsXG4gIHRhYjogXCJjaXRhdGlvblwiLFxuICBzdWJzZWN0aW9uOiBcImZyZWVibWRcIixcbiAgb3B0aW9uczogW1xuICAgIHtcbiAgICAgIG9wdGlvbk5hbWU6IFwiY2hhbmdlTmFtZXNUb0luaXRpYWxDYXBzXCIsXG4gICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICBsYWJlbDogXCJDaGFuZ2UgYW55IHBlcnNvbiBhbmQgcGxhY2UgbmFtZXMgaW4gYWxsIGNhcHMgdG8gaW5pdGlhbCBjYXBzXCIsXG4gICAgICBkZWZhdWx0VmFsdWU6IHRydWUsXG4gICAgfSxcbiAgICB7XG4gICAgICBvcHRpb25OYW1lOiBcInJlZmVyZW5jZUluSXRhbGljc1wiLFxuICAgICAgdHlwZTogXCJjaGVja2JveFwiLFxuICAgICAgbGFiZWw6ICdQdXQgdGhlIHRleHQgXCJHUk8gUmVmZXJlbmNlXCIgaW4gaXRhbGljcycsXG4gICAgICBkZWZhdWx0VmFsdWU6IHRydWUsXG4gICAgfSxcbiAgICB7XG4gICAgICBvcHRpb25OYW1lOiBcInVzZURpc3RyaWN0VXJsXCIsXG4gICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICBsYWJlbDogXCJBZGQgYSBsaW5rIHRvIHRoZSByZWdpc3RyYXRpb24gZGlzdHJpY3QgcGFnZSBvbiB1a2JtZC5vcmcudWsgKE5vdCBjdXJyZW50bHkgaW1wbGVtZW50ZWQpXCIsXG4gICAgICBkZWZhdWx0VmFsdWU6IHRydWUsXG4gICAgfSxcbiAgXSxcbn07XG5cbnJlZ2lzdGVyU3Vic2VjdGlvbkZvck9wdGlvbnMoXCJzZWFyY2hcIiwgXCJmcmVlYm1kXCIsIFwiRnJlZUJNRCAoVUspXCIpO1xucmVnaXN0ZXJTaXRlU2VhcmNoUG9wdXBPcHRpb25zR3JvdXAoXCJmcmVlYm1kXCIsIDcsIDcpO1xuXG5yZWdpc3RlclN1YnNlY3Rpb25Gb3JPcHRpb25zKFwiY2l0YXRpb25cIiwgXCJmcmVlYm1kXCIsIFwiRnJlZUJNRCAoVUspXCIpO1xucmVnaXN0ZXJPcHRpb25zR3JvdXAoY2l0YXRpb25PcHRpb25zR3JvdXApO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./extension/site/freebmd/core/freebmd_options.mjs\n");

/***/ }),

/***/ "./extension/site/freecen/core/freecen_options.mjs":
/*!*********************************************************!*\
  !*** ./extension/site/freecen/core/freecen_options.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/core/options/options_registry.mjs */ \"./extension/base/core/options/options_registry.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\nconst searchOptionsGroup = {\n  category: \"search\",\n  subcategory: \"freecen\",\n  tab: \"search\",\n  subsection: \"freecen\",\n  subheading: \"parameters\",\n  options: [\n    {\n      optionName: \"fuzzyInDefault\",\n      type: \"checkbox\",\n      label: \"Use Name Soundex (when not searching same collection)\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"fuzzyInSameCollection\",\n      type: \"checkbox\",\n      label: \"Use Name Soundex (when searching same collection)\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"birthYearRangeDefault\",\n      type: \"select\",\n      label: \"Search range to use for birth year (when not searching same collection)\",\n      values: [\n        { value: \"none\", text: \"Do not specify a birth year\" },\n        { value: \"auto\", text: \"Set automatically based on source\" },\n        { value: \"exact\", text: \"Exact year only\" },\n        { value: \"2\", text: \"+/- 2 years\" },\n        { value: \"5\", text: \"+/- 5 years\" },\n        { value: \"10\", text: \"+/- 10 years\" },\n      ],\n      defaultValue: \"auto\",\n    },\n    {\n      optionName: \"birthYearRangeSameCollection\",\n      type: \"select\",\n      label: \"Search range to use for birth year (when searching same collection)\",\n      values: [\n        { value: \"none\", text: \"Do not specify a birth year\" },\n        { value: \"auto\", text: \"Set automatically based on source\" },\n        { value: \"exact\", text: \"Exact year only\" },\n        { value: \"2\", text: \"+/- 2 years\" },\n        { value: \"5\", text: \"+/- 5 years\" },\n        { value: \"10\", text: \"+/- 10 years\" },\n      ],\n      defaultValue: \"exact\",\n    },\n    {\n      optionName: \"includeBirthCounty\",\n      type: \"checkbox\",\n      label: \"Include birth county in search (if known)\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"includeCensusCounty\",\n      type: \"checkbox\",\n      label: \"Include census county when searching same collection (if known)\",\n      defaultValue: true,\n    },\n  ],\n};\n\nconst citationOptionsGroup = {\n  category: \"citation\",\n  subcategory: \"freecen\",\n  tab: \"citation\",\n  subsection: \"freecen\",\n  options: [\n    {\n      optionName: \"dataStyle\",\n      type: \"select\",\n      label: \"Include record data at end of citation as\",\n      values: [\n        { value: \"none\", text: \"Do not include data\" },\n        {\n          value: \"string\",\n          text: \"Sentence (fall back to list if no sentence)\",\n        },\n        { value: \"list\", text: \"List of field names/values\" },\n        { value: \"table\", text: \"Table of field names/values\" },\n      ],\n      defaultValue: \"string\",\n      unitTestValue: \"table\",\n    },\n    {\n      optionName: \"includeNationalArchivesLink\",\n      type: \"checkbox\",\n      label: \"Include a link to to the National Archives page for the census if known\",\n      defaultValue: true,\n    },\n  ],\n};\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"search\", \"freecen\", \"FreeCen (UK)\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSiteSearchPopupOptionsGroup)(\"freecen\", 6, 6);\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubheadingForOptions)(\"search\", \"freecen\", \"parameters\", \"Search Parameters\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(searchOptionsGroup);\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"citation\", \"freecen\", \"FreeCen (UK)\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(citationOptionsGroup);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb24vc2l0ZS9mcmVlY2VuL2NvcmUvZnJlZWNlbl9vcHRpb25zLm1qcy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFPeUQ7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLG9EQUFvRDtBQUM5RCxVQUFVLDBEQUEwRDtBQUNwRSxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLG1DQUFtQztBQUM3QztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLG9EQUFvRDtBQUM5RCxVQUFVLDBEQUEwRDtBQUNwRSxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLG1DQUFtQztBQUM3QztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLDRDQUE0QztBQUN0RDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsVUFBVSxtREFBbUQ7QUFDN0QsVUFBVSxxREFBcUQ7QUFDL0Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSxxR0FBNEI7QUFDNUIsNEdBQW1DO0FBQ25DLHFHQUE0QjtBQUM1Qiw2RkFBb0I7O0FBRXBCLHFHQUE0QjtBQUM1Qiw2RkFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaXRhdGlvbkV4dHJhY3Rvci8uL2V4dGVuc2lvbi9zaXRlL2ZyZWVjZW4vY29yZS9mcmVlY2VuX29wdGlvbnMubWpzPzQ5NDgiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBSb2JlcnQgTSBQYXZleVxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQge1xuICByZWdpc3RlclN1YnNlY3Rpb25Gb3JPcHRpb25zLFxuICByZWdpc3RlclN1YmhlYWRpbmdGb3JPcHRpb25zLFxuICByZWdpc3Rlck9wdGlvbnNHcm91cCxcbiAgcmVnaXN0ZXJTaXRlU2VhcmNoUG9wdXBPcHRpb25zR3JvdXAsXG59IGZyb20gXCIuLi8uLi8uLi9iYXNlL2NvcmUvb3B0aW9ucy9vcHRpb25zX3JlZ2lzdHJ5Lm1qc1wiO1xuXG5jb25zdCBzZWFyY2hPcHRpb25zR3JvdXAgPSB7XG4gIGNhdGVnb3J5OiBcInNlYXJjaFwiLFxuICBzdWJjYXRlZ29yeTogXCJmcmVlY2VuXCIsXG4gIHRhYjogXCJzZWFyY2hcIixcbiAgc3Vic2VjdGlvbjogXCJmcmVlY2VuXCIsXG4gIHN1YmhlYWRpbmc6IFwicGFyYW1ldGVyc1wiLFxuICBvcHRpb25zOiBbXG4gICAge1xuICAgICAgb3B0aW9uTmFtZTogXCJmdXp6eUluRGVmYXVsdFwiLFxuICAgICAgdHlwZTogXCJjaGVja2JveFwiLFxuICAgICAgbGFiZWw6IFwiVXNlIE5hbWUgU291bmRleCAod2hlbiBub3Qgc2VhcmNoaW5nIHNhbWUgY29sbGVjdGlvbilcIixcbiAgICAgIGRlZmF1bHRWYWx1ZTogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG9wdGlvbk5hbWU6IFwiZnV6enlJblNhbWVDb2xsZWN0aW9uXCIsXG4gICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICBsYWJlbDogXCJVc2UgTmFtZSBTb3VuZGV4ICh3aGVuIHNlYXJjaGluZyBzYW1lIGNvbGxlY3Rpb24pXCIsXG4gICAgICBkZWZhdWx0VmFsdWU6IHRydWUsXG4gICAgfSxcbiAgICB7XG4gICAgICBvcHRpb25OYW1lOiBcImJpcnRoWWVhclJhbmdlRGVmYXVsdFwiLFxuICAgICAgdHlwZTogXCJzZWxlY3RcIixcbiAgICAgIGxhYmVsOiBcIlNlYXJjaCByYW5nZSB0byB1c2UgZm9yIGJpcnRoIHllYXIgKHdoZW4gbm90IHNlYXJjaGluZyBzYW1lIGNvbGxlY3Rpb24pXCIsXG4gICAgICB2YWx1ZXM6IFtcbiAgICAgICAgeyB2YWx1ZTogXCJub25lXCIsIHRleHQ6IFwiRG8gbm90IHNwZWNpZnkgYSBiaXJ0aCB5ZWFyXCIgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJhdXRvXCIsIHRleHQ6IFwiU2V0IGF1dG9tYXRpY2FsbHkgYmFzZWQgb24gc291cmNlXCIgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJleGFjdFwiLCB0ZXh0OiBcIkV4YWN0IHllYXIgb25seVwiIH0sXG4gICAgICAgIHsgdmFsdWU6IFwiMlwiLCB0ZXh0OiBcIisvLSAyIHllYXJzXCIgfSxcbiAgICAgICAgeyB2YWx1ZTogXCI1XCIsIHRleHQ6IFwiKy8tIDUgeWVhcnNcIiB9LFxuICAgICAgICB7IHZhbHVlOiBcIjEwXCIsIHRleHQ6IFwiKy8tIDEwIHllYXJzXCIgfSxcbiAgICAgIF0sXG4gICAgICBkZWZhdWx0VmFsdWU6IFwiYXV0b1wiLFxuICAgIH0sXG4gICAge1xuICAgICAgb3B0aW9uTmFtZTogXCJiaXJ0aFllYXJSYW5nZVNhbWVDb2xsZWN0aW9uXCIsXG4gICAgICB0eXBlOiBcInNlbGVjdFwiLFxuICAgICAgbGFiZWw6IFwiU2VhcmNoIHJhbmdlIHRvIHVzZSBmb3IgYmlydGggeWVhciAod2hlbiBzZWFyY2hpbmcgc2FtZSBjb2xsZWN0aW9uKVwiLFxuICAgICAgdmFsdWVzOiBbXG4gICAgICAgIHsgdmFsdWU6IFwibm9uZVwiLCB0ZXh0OiBcIkRvIG5vdCBzcGVjaWZ5IGEgYmlydGggeWVhclwiIH0sXG4gICAgICAgIHsgdmFsdWU6IFwiYXV0b1wiLCB0ZXh0OiBcIlNldCBhdXRvbWF0aWNhbGx5IGJhc2VkIG9uIHNvdXJjZVwiIH0sXG4gICAgICAgIHsgdmFsdWU6IFwiZXhhY3RcIiwgdGV4dDogXCJFeGFjdCB5ZWFyIG9ubHlcIiB9LFxuICAgICAgICB7IHZhbHVlOiBcIjJcIiwgdGV4dDogXCIrLy0gMiB5ZWFyc1wiIH0sXG4gICAgICAgIHsgdmFsdWU6IFwiNVwiLCB0ZXh0OiBcIisvLSA1IHllYXJzXCIgfSxcbiAgICAgICAgeyB2YWx1ZTogXCIxMFwiLCB0ZXh0OiBcIisvLSAxMCB5ZWFyc1wiIH0sXG4gICAgICBdLFxuICAgICAgZGVmYXVsdFZhbHVlOiBcImV4YWN0XCIsXG4gICAgfSxcbiAgICB7XG4gICAgICBvcHRpb25OYW1lOiBcImluY2x1ZGVCaXJ0aENvdW50eVwiLFxuICAgICAgdHlwZTogXCJjaGVja2JveFwiLFxuICAgICAgbGFiZWw6IFwiSW5jbHVkZSBiaXJ0aCBjb3VudHkgaW4gc2VhcmNoIChpZiBrbm93bilcIixcbiAgICAgIGRlZmF1bHRWYWx1ZTogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG9wdGlvbk5hbWU6IFwiaW5jbHVkZUNlbnN1c0NvdW50eVwiLFxuICAgICAgdHlwZTogXCJjaGVja2JveFwiLFxuICAgICAgbGFiZWw6IFwiSW5jbHVkZSBjZW5zdXMgY291bnR5IHdoZW4gc2VhcmNoaW5nIHNhbWUgY29sbGVjdGlvbiAoaWYga25vd24pXCIsXG4gICAgICBkZWZhdWx0VmFsdWU6IHRydWUsXG4gICAgfSxcbiAgXSxcbn07XG5cbmNvbnN0IGNpdGF0aW9uT3B0aW9uc0dyb3VwID0ge1xuICBjYXRlZ29yeTogXCJjaXRhdGlvblwiLFxuICBzdWJjYXRlZ29yeTogXCJmcmVlY2VuXCIsXG4gIHRhYjogXCJjaXRhdGlvblwiLFxuICBzdWJzZWN0aW9uOiBcImZyZWVjZW5cIixcbiAgb3B0aW9uczogW1xuICAgIHtcbiAgICAgIG9wdGlvbk5hbWU6IFwiZGF0YVN0eWxlXCIsXG4gICAgICB0eXBlOiBcInNlbGVjdFwiLFxuICAgICAgbGFiZWw6IFwiSW5jbHVkZSByZWNvcmQgZGF0YSBhdCBlbmQgb2YgY2l0YXRpb24gYXNcIixcbiAgICAgIHZhbHVlczogW1xuICAgICAgICB7IHZhbHVlOiBcIm5vbmVcIiwgdGV4dDogXCJEbyBub3QgaW5jbHVkZSBkYXRhXCIgfSxcbiAgICAgICAge1xuICAgICAgICAgIHZhbHVlOiBcInN0cmluZ1wiLFxuICAgICAgICAgIHRleHQ6IFwiU2VudGVuY2UgKGZhbGwgYmFjayB0byBsaXN0IGlmIG5vIHNlbnRlbmNlKVwiLFxuICAgICAgICB9LFxuICAgICAgICB7IHZhbHVlOiBcImxpc3RcIiwgdGV4dDogXCJMaXN0IG9mIGZpZWxkIG5hbWVzL3ZhbHVlc1wiIH0sXG4gICAgICAgIHsgdmFsdWU6IFwidGFibGVcIiwgdGV4dDogXCJUYWJsZSBvZiBmaWVsZCBuYW1lcy92YWx1ZXNcIiB9LFxuICAgICAgXSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogXCJzdHJpbmdcIixcbiAgICAgIHVuaXRUZXN0VmFsdWU6IFwidGFibGVcIixcbiAgICB9LFxuICAgIHtcbiAgICAgIG9wdGlvbk5hbWU6IFwiaW5jbHVkZU5hdGlvbmFsQXJjaGl2ZXNMaW5rXCIsXG4gICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICBsYWJlbDogXCJJbmNsdWRlIGEgbGluayB0byB0byB0aGUgTmF0aW9uYWwgQXJjaGl2ZXMgcGFnZSBmb3IgdGhlIGNlbnN1cyBpZiBrbm93blwiLFxuICAgICAgZGVmYXVsdFZhbHVlOiB0cnVlLFxuICAgIH0sXG4gIF0sXG59O1xuXG5yZWdpc3RlclN1YnNlY3Rpb25Gb3JPcHRpb25zKFwic2VhcmNoXCIsIFwiZnJlZWNlblwiLCBcIkZyZWVDZW4gKFVLKVwiKTtcbnJlZ2lzdGVyU2l0ZVNlYXJjaFBvcHVwT3B0aW9uc0dyb3VwKFwiZnJlZWNlblwiLCA2LCA2KTtcbnJlZ2lzdGVyU3ViaGVhZGluZ0Zvck9wdGlvbnMoXCJzZWFyY2hcIiwgXCJmcmVlY2VuXCIsIFwicGFyYW1ldGVyc1wiLCBcIlNlYXJjaCBQYXJhbWV0ZXJzXCIpO1xucmVnaXN0ZXJPcHRpb25zR3JvdXAoc2VhcmNoT3B0aW9uc0dyb3VwKTtcblxucmVnaXN0ZXJTdWJzZWN0aW9uRm9yT3B0aW9ucyhcImNpdGF0aW9uXCIsIFwiZnJlZWNlblwiLCBcIkZyZWVDZW4gKFVLKVwiKTtcbnJlZ2lzdGVyT3B0aW9uc0dyb3VwKGNpdGF0aW9uT3B0aW9uc0dyb3VwKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./extension/site/freecen/core/freecen_options.mjs\n");

/***/ }),

/***/ "./extension/site/freereg/core/freereg_options.mjs":
/*!*********************************************************!*\
  !*** ./extension/site/freereg/core/freereg_options.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/core/options/options_registry.mjs */ \"./extension/base/core/options/options_registry.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\nconst searchOptionsGroup = {\n  category: \"search\",\n  subcategory: \"freereg\",\n  tab: \"search\",\n  subsection: \"freereg\",\n  subheading: \"parameters\",\n  options: [\n    {\n      optionName: \"fuzzy\",\n      type: \"checkbox\",\n      label: \"Use Name Soundex\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"yearRange\",\n      type: \"select\",\n      label: \"Search range to use for event year\",\n      values: [\n        { value: \"none\", text: \"Do not specify a year\" },\n        { value: \"auto\", text: \"Set automatically based on source\" },\n        { value: \"exact\", text: \"Exact year only\" },\n        { value: \"2\", text: \"+/- 2 years\" },\n        { value: \"5\", text: \"+/- 5 years\" },\n        { value: \"10\", text: \"+/- 10 years\" },\n      ],\n      defaultValue: \"auto\",\n    },\n    {\n      optionName: \"includeCounty\",\n      type: \"checkbox\",\n      label: \"Include county in search (if known)\",\n      defaultValue: true,\n    },\n  ],\n};\n\nconst citationOptionsGroup = {\n  category: \"citation\",\n  subcategory: \"freereg\",\n  tab: \"citation\",\n  subsection: \"freereg\",\n  options: [\n    {\n      optionName: \"dataStyle\",\n      type: \"select\",\n      label: \"Include record data at end of citation as\",\n      values: [\n        { value: \"none\", text: \"Do not include data\" },\n        {\n          value: \"string\",\n          text: \"Sentence (fall back to list if no sentence)\",\n        },\n        { value: \"list\", text: \"List of field names/values\" },\n        { value: \"table\", text: \"Table of field names/values\" },\n      ],\n      defaultValue: \"string\",\n      unitTestValue: \"table\",\n    },\n  ],\n};\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"search\", \"freereg\", \"FreeReg (UK)\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSiteSearchPopupOptionsGroup)(\"freereg\", 8, 8);\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubheadingForOptions)(\"search\", \"freereg\", \"parameters\", \"Search Parameters\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(searchOptionsGroup);\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"citation\", \"freereg\", \"FreeReg (UK)\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(citationOptionsGroup);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb24vc2l0ZS9mcmVlcmVnL2NvcmUvZnJlZXJlZ19vcHRpb25zLm1qcy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFPeUQ7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSw4Q0FBOEM7QUFDeEQsVUFBVSwwREFBMEQ7QUFDcEUsVUFBVSx5Q0FBeUM7QUFDbkQsVUFBVSxpQ0FBaUM7QUFDM0MsVUFBVSxpQ0FBaUM7QUFDM0MsVUFBVSxtQ0FBbUM7QUFDN0M7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsNENBQTRDO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxVQUFVLG1EQUFtRDtBQUM3RCxVQUFVLHFEQUFxRDtBQUMvRDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSxxR0FBNEI7QUFDNUIsNEdBQW1DO0FBQ25DLHFHQUE0QjtBQUM1Qiw2RkFBb0I7O0FBRXBCLHFHQUE0QjtBQUM1Qiw2RkFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaXRhdGlvbkV4dHJhY3Rvci8uL2V4dGVuc2lvbi9zaXRlL2ZyZWVyZWcvY29yZS9mcmVlcmVnX29wdGlvbnMubWpzP2ZjZGQiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBSb2JlcnQgTSBQYXZleVxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQge1xuICByZWdpc3RlclN1YnNlY3Rpb25Gb3JPcHRpb25zLFxuICByZWdpc3RlclN1YmhlYWRpbmdGb3JPcHRpb25zLFxuICByZWdpc3Rlck9wdGlvbnNHcm91cCxcbiAgcmVnaXN0ZXJTaXRlU2VhcmNoUG9wdXBPcHRpb25zR3JvdXAsXG59IGZyb20gXCIuLi8uLi8uLi9iYXNlL2NvcmUvb3B0aW9ucy9vcHRpb25zX3JlZ2lzdHJ5Lm1qc1wiO1xuXG5jb25zdCBzZWFyY2hPcHRpb25zR3JvdXAgPSB7XG4gIGNhdGVnb3J5OiBcInNlYXJjaFwiLFxuICBzdWJjYXRlZ29yeTogXCJmcmVlcmVnXCIsXG4gIHRhYjogXCJzZWFyY2hcIixcbiAgc3Vic2VjdGlvbjogXCJmcmVlcmVnXCIsXG4gIHN1YmhlYWRpbmc6IFwicGFyYW1ldGVyc1wiLFxuICBvcHRpb25zOiBbXG4gICAge1xuICAgICAgb3B0aW9uTmFtZTogXCJmdXp6eVwiLFxuICAgICAgdHlwZTogXCJjaGVja2JveFwiLFxuICAgICAgbGFiZWw6IFwiVXNlIE5hbWUgU291bmRleFwiLFxuICAgICAgZGVmYXVsdFZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAge1xuICAgICAgb3B0aW9uTmFtZTogXCJ5ZWFyUmFuZ2VcIixcbiAgICAgIHR5cGU6IFwic2VsZWN0XCIsXG4gICAgICBsYWJlbDogXCJTZWFyY2ggcmFuZ2UgdG8gdXNlIGZvciBldmVudCB5ZWFyXCIsXG4gICAgICB2YWx1ZXM6IFtcbiAgICAgICAgeyB2YWx1ZTogXCJub25lXCIsIHRleHQ6IFwiRG8gbm90IHNwZWNpZnkgYSB5ZWFyXCIgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJhdXRvXCIsIHRleHQ6IFwiU2V0IGF1dG9tYXRpY2FsbHkgYmFzZWQgb24gc291cmNlXCIgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJleGFjdFwiLCB0ZXh0OiBcIkV4YWN0IHllYXIgb25seVwiIH0sXG4gICAgICAgIHsgdmFsdWU6IFwiMlwiLCB0ZXh0OiBcIisvLSAyIHllYXJzXCIgfSxcbiAgICAgICAgeyB2YWx1ZTogXCI1XCIsIHRleHQ6IFwiKy8tIDUgeWVhcnNcIiB9LFxuICAgICAgICB7IHZhbHVlOiBcIjEwXCIsIHRleHQ6IFwiKy8tIDEwIHllYXJzXCIgfSxcbiAgICAgIF0sXG4gICAgICBkZWZhdWx0VmFsdWU6IFwiYXV0b1wiLFxuICAgIH0sXG4gICAge1xuICAgICAgb3B0aW9uTmFtZTogXCJpbmNsdWRlQ291bnR5XCIsXG4gICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICBsYWJlbDogXCJJbmNsdWRlIGNvdW50eSBpbiBzZWFyY2ggKGlmIGtub3duKVwiLFxuICAgICAgZGVmYXVsdFZhbHVlOiB0cnVlLFxuICAgIH0sXG4gIF0sXG59O1xuXG5jb25zdCBjaXRhdGlvbk9wdGlvbnNHcm91cCA9IHtcbiAgY2F0ZWdvcnk6IFwiY2l0YXRpb25cIixcbiAgc3ViY2F0ZWdvcnk6IFwiZnJlZXJlZ1wiLFxuICB0YWI6IFwiY2l0YXRpb25cIixcbiAgc3Vic2VjdGlvbjogXCJmcmVlcmVnXCIsXG4gIG9wdGlvbnM6IFtcbiAgICB7XG4gICAgICBvcHRpb25OYW1lOiBcImRhdGFTdHlsZVwiLFxuICAgICAgdHlwZTogXCJzZWxlY3RcIixcbiAgICAgIGxhYmVsOiBcIkluY2x1ZGUgcmVjb3JkIGRhdGEgYXQgZW5kIG9mIGNpdGF0aW9uIGFzXCIsXG4gICAgICB2YWx1ZXM6IFtcbiAgICAgICAgeyB2YWx1ZTogXCJub25lXCIsIHRleHQ6IFwiRG8gbm90IGluY2x1ZGUgZGF0YVwiIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB2YWx1ZTogXCJzdHJpbmdcIixcbiAgICAgICAgICB0ZXh0OiBcIlNlbnRlbmNlIChmYWxsIGJhY2sgdG8gbGlzdCBpZiBubyBzZW50ZW5jZSlcIixcbiAgICAgICAgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJsaXN0XCIsIHRleHQ6IFwiTGlzdCBvZiBmaWVsZCBuYW1lcy92YWx1ZXNcIiB9LFxuICAgICAgICB7IHZhbHVlOiBcInRhYmxlXCIsIHRleHQ6IFwiVGFibGUgb2YgZmllbGQgbmFtZXMvdmFsdWVzXCIgfSxcbiAgICAgIF0sXG4gICAgICBkZWZhdWx0VmFsdWU6IFwic3RyaW5nXCIsXG4gICAgICB1bml0VGVzdFZhbHVlOiBcInRhYmxlXCIsXG4gICAgfSxcbiAgXSxcbn07XG5cbnJlZ2lzdGVyU3Vic2VjdGlvbkZvck9wdGlvbnMoXCJzZWFyY2hcIiwgXCJmcmVlcmVnXCIsIFwiRnJlZVJlZyAoVUspXCIpO1xucmVnaXN0ZXJTaXRlU2VhcmNoUG9wdXBPcHRpb25zR3JvdXAoXCJmcmVlcmVnXCIsIDgsIDgpO1xucmVnaXN0ZXJTdWJoZWFkaW5nRm9yT3B0aW9ucyhcInNlYXJjaFwiLCBcImZyZWVyZWdcIiwgXCJwYXJhbWV0ZXJzXCIsIFwiU2VhcmNoIFBhcmFtZXRlcnNcIik7XG5yZWdpc3Rlck9wdGlvbnNHcm91cChzZWFyY2hPcHRpb25zR3JvdXApO1xuXG5yZWdpc3RlclN1YnNlY3Rpb25Gb3JPcHRpb25zKFwiY2l0YXRpb25cIiwgXCJmcmVlcmVnXCIsIFwiRnJlZVJlZyAoVUspXCIpO1xucmVnaXN0ZXJPcHRpb25zR3JvdXAoY2l0YXRpb25PcHRpb25zR3JvdXApO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./extension/site/freereg/core/freereg_options.mjs\n");

/***/ }),

/***/ "./extension/site/fs/core/fs_build_citation.mjs":
/*!******************************************************!*\
  !*** ./extension/site/fs/core/fs_build_citation.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"buildCitation\": () => (/* binding */ buildCitation)\n/* harmony export */ });\n/* harmony import */ var _base_core_citation_builder_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/core/citation_builder.mjs */ \"./extension/base/core/citation_builder.mjs\");\n/* harmony import */ var _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/core/record_type.mjs */ \"./extension/base/core/record_type.mjs\");\n/* harmony import */ var _base_core_data_string_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/core/data_string.mjs */ \"./extension/base/core/data_string.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\n\n\nfunction buildFsCitationDataString(data) {\n  if (data.citation) {\n    // citation string looks like this (for example):\n    /*\n    \"England and Wales Census, 1841,\" database with images,\n    <i>FamilySearch</i> (https://familysearch.org/ark:/61903/1:1:MQTV-YB9 : 23 May 2019),\n    Isabella Pavey in household of William Pavey, East Stonehouse, Devon, England, United Kingdom;\n    from \"1841 England, Scotland and Wales census,\" database and images,\n    <i>findmypast</i> (http://www.findmypast.com : n.d.);\n    citing PRO HO 107, The National Archives, Kew, Surrey.\n    */\n    // find the middle part like:\n    // \"Isabella Pavey in household of William Pavey, East Stonehouse, Devon, England, United Kingdom\"\n\n    let dataString = data.citation.replace(/^.*\\<i\\>FamilySearch\\<\\/i\\>\\s+\\([^\\)]+\\)\\,\\s*([^\\;]+).*$/, \"$1\");\n    if (dataString && dataString != data.citation) {\n      // Sometimes there are commas with no space after them, fix that.\n      dataString = dataString.replace(/\\,(\\w)/g, \", $1\");\n      return dataString;\n    }\n  }\n\n  return \"\";\n}\n\nfunction removeUnwantedKeysForTable(keys, recordData) {\n  // for the moment they are the same\n  return removeUnwantedKeysForDataString(keys, recordData);\n}\n\nfunction removeUnwantedKeysForDataString(keys, recordData) {\n  const exactMatchesToExclude = [\n    \"Page\",\n    \"Page number\",\n    \"Folio\",\n    \"Piece number\",\n    \"Schedule\",\n    \"Rolls\",\n\n    \"Unique Identifier\",\n    \"Source Volume\",\n    \"Source Page\",\n    \"Event Place Level1Type\",\n    \"Event Place Level2Type\",\n    \"Event Place Level3Type\",\n    \"Evquarter\",\n    \"Ppq Id\",\n    \"Record Group\",\n    \"Sort Key\",\n  ];\n  function isKeyWanted(key) {\n    for (let match of exactMatchesToExclude) {\n      if (match == key) {\n        return false;\n      }\n    }\n\n    // if there is a year plus a date for the same thing exclude the year\n    const yearEnding = \" year\";\n    if (key.endsWith(yearEnding)) {\n      let dateKey = key.substring(0, key.length - yearEnding.length) + \" date\";\n      if (keys.includes(dateKey)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  let newKeys = [];\n\n  for (let key of keys) {\n    if (isKeyWanted(key)) {\n      newKeys.push(key);\n    }\n  }\n\n  return newKeys;\n}\n\nfunction buildDataString(data, gd, dataStyle, builder) {\n  let options = builder.options;\n\n  let dataString = \"\";\n\n  if (dataStyle == \"string\") {\n    let input = {\n      generalizedData: gd,\n      options: options,\n    };\n    dataString = _base_core_data_string_mjs__WEBPACK_IMPORTED_MODULE_2__.DataString.buildDataString(input);\n    if (dataString) {\n      return dataString;\n    }\n  } else if (dataStyle == \"fsCitation\") {\n    let dataString = buildFsCitationDataString(data);\n    if (dataString) {\n      return dataString;\n    }\n\n    // if no citation on the FS page fallback to string formst\n    let input = {\n      generalizedData: gd,\n      options: options,\n    };\n    dataString = _base_core_data_string_mjs__WEBPACK_IMPORTED_MODULE_2__.DataString.buildDataString(input);\n    if (dataString) {\n      return dataString;\n    }\n\n    if (data.sourceTitleForPerson) {\n      let dataString = data.sourceTitleForPerson.replace(/^([^\\,]*)\\,.*$/, \"$1\");\n      return dataString;\n    }\n\n    if (data.fullName && data.eventDate) {\n      let dataString = data.fullName + \" \" + data.eventDate;\n      return dataString;\n    }\n  }\n\n  let recordData = data.recordData;\n\n  dataString = \"\";\n\n  // I don't think this will ever happen\n  if (!recordData) {\n    let date = gd.inferEventDate();\n    let place = gd.inferEventPlace();\n    dataString = date;\n    if (place) {\n      if (date) {\n        dataString += \", \";\n      }\n      dataString += place;\n    }\n    return dataString;\n  }\n\n  dataString = builder.buildDataList(recordData, removeUnwantedKeysForDataString);\n\n  return dataString;\n}\n\nfunction getAdditionalInfo(data, gd, builder) {\n  let citationType = builder.type;\n  let options = builder.options;\n\n  let dataStyle = options.citation_fs_dataStyle;\n  if (dataStyle == \"none\") {\n    return \"\";\n  } else if (dataStyle == \"table\") {\n    if (options.citation_general_referencePosition == \"atEnd\") {\n      dataStyle = \"string\";\n    } else if (citationType == \"source\") {\n      dataStyle = \"list\";\n    }\n  }\n\n  if (dataStyle == \"string\" || dataStyle == \"list\" || dataStyle == \"fsCitation\") {\n    return buildDataString(data, gd, dataStyle, builder);\n  }\n\n  // style must be table\n  var result = \"\";\n  let recordData = data.recordData;\n  if (recordData) {\n    let keys = Object.keys(recordData);\n\n    keys = removeUnwantedKeysForTable(keys, recordData);\n    if (keys.length > 0) {\n      // start table\n      result = '{| border=\"1\"\\n';\n      let firstRow = true;\n\n      for (let key of keys) {\n        if (firstRow) {\n          firstRow = false;\n        } else {\n          result += \"|-\\n\";\n        }\n        result += \"| \" + key + \" || \" + recordData[key] + \"\\n\";\n      }\n\n      result += \"|}\";\n    }\n  }\n\n  return result;\n}\n\nfunction buildSourceReferenceFromRecord(data, gd, options) {\n  let dataString = \"\";\n\n  function addValue(title, value) {\n    if (value) {\n      if (dataString != \"\") {\n        dataString += \" \";\n      }\n      dataString += title + \": \" + value + \";\";\n    }\n  }\n\n  function addRecordDataValue(title, keyArray) {\n    let value = undefined;\n    if (data.recordData) {\n      for (let key of keyArray) {\n        value = data.recordData[key];\n        if (value) {\n          break;\n        }\n      }\n    }\n    if (value) {\n      if (dataString != \"\") {\n        dataString += \" \";\n      }\n      dataString += title + \": \" + value + \";\";\n    }\n  }\n\n  let refData = data.referenceData;\n\n  if (gd.isRecordInCountry(\"United Kingdom\")) {\n    if (gd.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Census && data.collectionTitle.startsWith(\"England and Wales Census\")) {\n      // The Ancestry reference would look like:\n      // Class: HO107; Piece: 276; Book: 6; Civil Parish: East Stonehouse; County: Devon; Enumeration District: 6; Folio: 21; Page: 37; Line: 20; GSU roll: 241335<br/>\n\n      dataString += \"The National Archives of the UK\";\n      if (refData) {\n        addValue(\"Class\", refData.sourceRegNbr);\n        addValue(\"Piece/Folio\", refData.sourcePieceFolio);\n        addValue(\"Page\", refData.sourcePageNbr);\n        addValue(\"Line\", refData.sourceLineNbr);\n      }\n    } else if (\n      gd.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.BirthRegistration ||\n      gd.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.DeathRegistration ||\n      gd.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.MarriageRegistration\n    ) {\n      // FS citation would say:\n      // Citing 1937, quarter 2, vol. 9D, p. 519, Hull, Yorkshire, England, General Register Office, Southport, England.\n\n      dataString += \"UK General Register Office.\";\n      addValue(\"District\", data.registrationDistrict);\n      if (refData) {\n        addValue(\"Volume\", refData.sourceVolume);\n        addValue(\"Page\", refData.sourcePageNbr);\n        // there can be a line number but we don't want that as it is line num on FMP printout\n        addValue(\"Entry\", refData.sourceEntryNbr);\n      }\n    }\n\n    if (dataString) {\n      dataString = \"citing \" + dataString;\n    }\n    return dataString;\n  }\n\n  // not a special case, just add everything that could be part of reference\n  addValue(\"District\", data.registrationDistrict);\n  if (refData) {\n    addValue(\"Volume\", refData.sourceVolume);\n    addValue(\"Piece/Folio\", refData.sourcePieceFolio);\n    addValue(\"Page\", refData.sourcePageNbr);\n\n    addValue(\"Affiliate Publication Title\", refData.externalPublicationTitle);\n    addValue(\"Affiliate Publication Number\", refData.externalPublicationNumber);\n    addValue(\"Affiliate Film Number\", refData.externalFilmNumber);\n\n    if (refData.sourceLineNbr) {\n      addValue(\"Line\", refData.sourceLineNbr);\n    } else {\n      addValue(\"Affiliate Line Number\", refData.externalLineNumber);\n    }\n    addValue(\"Entry\", refData.sourceEntryNbr);\n\n    addValue(\"Reference\", refData.referenceId);\n    addValue(\"FHL microfilm\", refData.filmNumber);\n    addValue(\"Record number\", refData.recordNumber);\n  }\n\n  if (dataString) {\n    dataString = \"citing \" + dataString;\n  }\n  return dataString;\n}\n\nfunction buildSourceReferenceFromFsCitation(data, options) {\n  if (data.citation) {\n    // citation string looks like this (for example):\n    /*\n    \"England and Wales Census, 1841,\" database with images,\n    <i>FamilySearch</i> (https://familysearch.org/ark:/61903/1:1:MQTV-YB9 : 23 May 2019),\n    Isabella Pavey in household of William Pavey, East Stonehouse, Devon, England, United Kingdom;\n    from \"1841 England, Scotland and Wales census,\" database and images,\n    <i>findmypast</i> (http://www.findmypast.com : n.d.);\n    citing PRO HO 107, The National Archives, Kew, Surrey.\n    */\n    const citingString = \"citing \";\n    let citingIndex = data.citation.indexOf(citingString);\n    if (citingIndex != -1) {\n      citingIndex += citingString.length;\n\n      let refString = data.citation.substring(citingIndex);\n      const fromString = \"from \";\n\n      if (options.citation_fs_sourceRef == \"fsCitationShort\") {\n        // there can be more than one \"citing\". Sometimes that is OK, other times there is too much in\n        // the first citing string (a from)\n        citingIndex = refString.indexOf(citingString);\n        let fromIndex = refString.indexOf(fromString);\n        if (citingIndex != -1 && fromIndex != -1 && fromIndex < citingIndex) {\n          // cut out the part between the from and the second citing\n          let part1 = refString.substring(0, fromIndex).trim();\n          let part2 = refString.substring(citingIndex).trim();\n\n          part1 = part1.replace(/^(.*)[\\;\\,\\.]+$/, \"$1\"); // remove trailing punctuation\n          refString = part1 + \"; \" + part2;\n        }\n      }\n\n      if (refString) {\n        refString = \"citing \" + refString;\n      }\n\n      return refString;\n    }\n  }\n\n  return \"\";\n}\n\nfunction buildSourceReference(data, gd, options) {\n  if (options.citation_fs_sourceRef == \"fsCitationShort\" || options.citation_fs_sourceRef == \"fsCitationLong\") {\n    let refString = buildSourceReferenceFromFsCitation(data, options);\n    if (refString) {\n      return refString;\n    }\n  }\n\n  // build from record\n  return buildSourceReferenceFromRecord(data, gd, options);\n}\n\nfunction extractIdFromFsUrl(url, prefixList, terminatorList) {\n  // the recordUrl should look like:\n  // https://www.familysearch.org/ark:/61903/1:1:XZDY-NHM\n\n  for (let prefix of prefixList) {\n    let prefixIndex = url.indexOf(prefix);\n    if (prefixIndex != -1) {\n      let id = url.substring(prefixIndex + prefix.length);\n      for (let terminator of terminatorList) {\n        let terminatorIndex = id.indexOf(terminator);\n        if (terminatorIndex != -1) {\n          id = id.substring(0, terminatorIndex);\n        }\n      }\n      return id;\n    }\n  }\n\n  return \"\"; // no prefix found\n}\n\nfunction buildFsRecordLink(recordUrl) {\n  // start with the old format link and then try to replace with template\n  let recordLinkOrTemplate = \"[\" + recordUrl + \" FamilySearch\" + \"]\";\n\n  // the recordUrl should look like:\n  // https://www.familysearch.org/ark:/61903/1:1:XZDY-NHM\n  let recordId = extractIdFromFsUrl(recordUrl, [\"ark:/61903/1:1:\"], [\"/\", \"?\"]);\n\n  if (recordId.length > 5) {\n    recordLinkOrTemplate = \"{{FamilySearch Record|\" + recordId + \"}}\";\n  }\n\n  return recordLinkOrTemplate;\n}\n\nfunction buildFsImageLink(imageUrl) {\n  // start with the old format link and then try to replace with template\n  let imageLinkOrTemplate = \"[\" + imageUrl + \" FamilySearch Image]\";\n\n  // the recordUrl should look like one of these:\n  // https://www.familysearch.org/ark:/61903/3:1:33S7-9BSH-9W9B?i=7&cc=1473181\n  // https://www.familysearch.org/ark:/61903/3:1:33S7-9P2P-9D2F?i=1179&cc=1307272&personaUrl=%2Fark%3A%2F61903%2F1%3A1%3AXZDY-NHM\n  let imageId = extractIdFromFsUrl(imageUrl, [\"ark:/61903/3:1:\"], [\"/\", \"?\"]);\n\n  if (imageId.length > 5) {\n    imageLinkOrTemplate = \"{{FamilySearch Image|\" + imageId + \"}}\";\n  }\n\n  return imageLinkOrTemplate;\n}\n\nfunction buildCoreCitation(data, gd, builder) {\n  builder.sourceTitle = data.collectionTitle;\n\n  var recordUrl = data.personRecordUrl;\n\n  if ((data.fsImageUrl || data.externalImageUrl) && data.externalImageUrl != \"bad\") {\n    let text = \"\";\n    if (data.externalImageUrl) {\n      if (builder.options.citation_fs_includeExternalImageLink) {\n        if (data.externalImageUrl.includes(\"findmypast\")) {\n          text += \"[\" + data.externalImageUrl + \" FindMyPast Image]\";\n          let subReqString = builder.getSubReqString(builder.options.citation_fs_subscriptionRequired);\n          if (subReqString) {\n            text += \" (\" + subReqString + \")\";\n          }\n        } else {\n          text += \"[\" + data.externalImageUrl + \" External Image]\";\n        }\n      }\n    } else {\n      builder.databaseHasImages = true;\n\n      text += buildFsImageLink(data.fsImageUrl);\n      if (data.fsImageNumber) {\n        text += \" Image number \" + data.fsImageNumber;\n      }\n    }\n    builder.externalSiteLink = text;\n  } else if (data.digitalArtifact) {\n    // Find A Grave example:   \"digitalArtifact\": \"http://www.findagrave.com/cgi-bin/fg.cgi?page=gr&GRid=30569834\",\n    let url = data.digitalArtifact;\n    const idParam = \"&GRid=\";\n    if (url.includes(\"//www.findagrave.com/cgi-bin\") && url.includes(idParam)) {\n      let paramIndex = url.indexOf(idParam);\n      if (paramIndex != -1) {\n        let nextParamIndex = url.indexOf(\"&\", paramIndex + idParam.length);\n        if (nextParamIndex == -1) {\n          nextParamIndex = url.length;\n        }\n\n        let memorialId = url.substring(paramIndex + idParam.length, nextParamIndex);\n        builder.externalSiteLink = \"{{FindAGrave|\" + memorialId + \"}}\";\n      }\n    } else {\n      builder.externalSiteLink = url;\n    }\n  }\n\n  builder.recordLinkOrTemplate = buildFsRecordLink(recordUrl);\n\n  let additionalInfo = getAdditionalInfo(data, gd, builder);\n  if (additionalInfo) {\n    builder.dataString = additionalInfo;\n  }\n\n  builder.sourceReference = buildSourceReference(data, gd, builder.options);\n}\n\nfunction getImageRefTitle(catalogRecordName, filmTitle) {\n  const catalogRecordNameTightMatches = [\n    { title: \"Marriage\", matches: [\"Marriage records\"] },\n    { title: \"Marriage Bond\", matches: [\"Marriage licence bonds\"] },\n    { title: \"Tax record\", matches: [\"Tax books\"] },\n    {\n      title: \"Personal Property Tax\",\n      matches: [\"Personal property tax lists,\"],\n    },\n    { title: \"Deed\", matches: [\"Deeds,\", \"Deed records,\"] },\n  ];\n\n  const filmTitleTightMatches = [\n    { title: \"Marriage\", matches: [\"County Marriages,\"] },\n    { title: \"Marriage Bond\", matches: [\"Marriage Bond,\"] },\n    { title: \"Deed record\", matches: [\"Deeds\"] },\n    { title: \"Land record\", matches: [\"Land Records,\"] },\n  ];\n\n  const catalogRecordNameLooseMatches = [\n    { title: \"Marriage\", matches: [\"Marriage\"] },\n    { title: \"Property Tax\", matches: [\"property tax\"] },\n    { title: \"Tax record\", matches: [\"Tax\", \"tax\"] },\n  ];\n\n  const filmTitleLooseMatches = [\n    { title: \"Marriage\", matches: [\"Marriage\"] },\n    { title: \"Tax record\", matches: [\"Tax\"] },\n    { title: \"Deed record\", matches: [\"Deed\"] },\n  ];\n\n  function lookup(title, table) {\n    for (let obj of table) {\n      if (obj.matches) {\n        for (let match of obj.matches) {\n          if (title && title.includes(match)) {\n            return obj.title;\n          }\n        }\n      }\n    }\n  }\n\n  if (catalogRecordName) {\n    let refTitle = lookup(catalogRecordName, catalogRecordNameTightMatches);\n    if (refTitle) {\n      return refTitle;\n    }\n  }\n\n  if (filmTitle) {\n    let refTitle = lookup(filmTitle, filmTitleTightMatches);\n    if (refTitle) {\n      return refTitle;\n    }\n  }\n\n  if (catalogRecordName) {\n    let refTitle = lookup(catalogRecordName, catalogRecordNameLooseMatches);\n    if (refTitle) {\n      return refTitle;\n    }\n  }\n\n  if (filmTitle) {\n    let refTitle = lookup(filmTitle, filmTitleLooseMatches);\n    if (refTitle) {\n      return refTitle;\n    }\n  }\n\n  // no matches\n  if (catalogRecordName && filmTitle) {\n    // choose the shorter one\n    return filmTitle.length < catalogRecordName.length ? filmTitle : catalogRecordName;\n  }\n  if (catalogRecordName) {\n    return catalogRecordName;\n  }\n  if (filmTitle) {\n    return filmTitle;\n  }\n\n  return \"Unclassified\";\n}\n\nfunction buildImageCitation(data, gd, builder) {\n  builder.databaseHasImages = true;\n\n  if (data.filmTitle) {\n    builder.sourceTitle = data.filmTitle;\n  } else {\n    builder.sourceTitle = data.catalogRecordName;\n  }\n\n  let imageLink = buildFsImageLink(data.url);\n  builder.recordLinkOrTemplate = imageLink;\n\n  builder.dataString = buildDataString(data, gd, builder.options.citation_fs_dataStyle, builder);\n\n  builder.sourceReference = buildSourceReference(data, gd, builder.options);\n  if (!builder.sourceReference) {\n    builder.sourceReference = \"\";\n  }\n\n  let newSourceReference = \"\";\n  if (data.catalogRecordLink && data.catalogRecordName) {\n    let linkText = data.catalogRecordName;\n    newSourceReference += \"Catalog: \";\n    newSourceReference += \"[\" + data.catalogRecordLink + \" \" + linkText + \"]\";\n\n    if (data.filmNote) {\n      let note = data.filmNote;\n      if (note.startsWith(linkText)) {\n        note = note.substring(linkText).trim();\n      }\n      newSourceReference += \" \" + note;\n    }\n  }\n\n  if (data.filmNumber || data.imageBrowsePath || data.totalImages) {\n    if (newSourceReference) {\n      if (builder.options.citation_general_addBreaksWithinBody) {\n        newSourceReference += \"<br/>\";\n      } else {\n        newSourceReference += \"; \";\n      }\n      if (builder.type != \"source\" && builder.options.citation_general_addNewlinesWithinBody) {\n        newSourceReference += \"\\n\";\n      }\n    }\n    if (data.imageBrowsePath) {\n      newSourceReference += \"Image path: \" + data.imageBrowsePath;\n    } else if (data.filmNumber) {\n      newSourceReference += \"Film number: \" + data.filmNumber;\n    }\n\n    // this is a workaround for Unit Tests. In Unit Tests the imageNumber is empty because of the\n    // way the text input works\n    if (data.totalImages) {\n      let imageNumber = data.imageNumber;\n      if (!imageNumber) {\n        imageNumber = \"?\";\n      }\n      newSourceReference += \" > image \" + imageNumber + \" of \" + data.totalImages;\n    }\n  }\n\n  if (builder.sourceReference) {\n    newSourceReference += \"; \" + builder.sourceReference;\n  }\n\n  builder.sourceReference = newSourceReference;\n\n  builder.meaningfulTitle = getImageRefTitle(data.catalogRecordName, data.filmTitle);\n}\n\nfunction getRefTitle(ed, gd) {\n  const recordTypeToRefTitle = [\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Marriage,\n      defaultTitle: \"Marriage\",\n      titleMatches: [{ title: \"Marriage Bond\", matches: [\"Marriage Bond\"] }],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.MilitaryService,\n      defaultTitle: \"Military Service\",\n      titleMatches: [{ title: \"Navy Allotment\", matches: [\"Navy Allotment\"] }],\n    },\n    {\n      type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.ElectoralRegister,\n      defaultTitle: \"Voter Registration\",\n      addYear: true,\n      titleMatches: [{ title: \"Electoral Register\", matches: [\"Electoral Register\"] }],\n    },\n  ];\n\n  let refTitle = gd.getRefTitle(ed.collectionTitle, recordTypeToRefTitle);\n\n  if (refTitle && refTitle != \"Unclassified\") {\n    return refTitle;\n  }\n\n  return \"\";\n}\n\nfunction buildCitation(input) {\n  const data = input.extractedData;\n  const gd = input.generalizedData;\n  const runDate = input.runDate;\n  const options = input.options;\n  const type = input.type; // \"inline\", \"narrative\" or \"source\"\n\n  let builder = new _base_core_citation_builder_mjs__WEBPACK_IMPORTED_MODULE_0__.CitationBuilder(type, runDate, options);\n  builder.householdTableString = input.householdTableString;\n\n  if (data.pageType == \"record\") {\n    var citation = buildCoreCitation(data, gd, builder);\n\n    // Get meaningful title\n    let refTitle = getRefTitle(data, input.generalizedData);\n    builder.meaningfulTitle = refTitle;\n\n    if (type == \"narrative\") {\n      builder.addNarrative(gd, input.dataCache, options);\n    }\n  } else if (data.pageType == \"image\") {\n    buildImageCitation(data, gd, builder);\n  }\n\n  // now the builder is setup use it to build the citation text\n  let fullCitation = builder.getCitationString();\n\n  //console.log(fullCitation);\n\n  var citationObject = {\n    citation: fullCitation,\n    type: type,\n  };\n\n  return citationObject;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/site/fs/core/fs_build_citation.mjs\n");

/***/ }),

/***/ "./extension/site/fs/core/fs_extract_data.mjs":
/*!****************************************************!*\
  !*** ./extension/site/fs/core/fs_extract_data.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"extractData\": () => (/* binding */ extractData),\n/* harmony export */   \"extractDataFromFetch\": () => (/* binding */ extractDataFromFetch)\n/* harmony export */ });\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\nconst useOldSystem = false;\n\nfunction cleanText(text) {\n  if (!text) {\n    return \"\";\n  }\n\n  text = text.replace(/\\s+/g, \" \"); // eliminate nbsp and multiple spaces etc\n\n  // sometimes the text is something like \"Zachariah Davey[Zechariah Pavey]\"\n  // in that case add a space before the [\n  text = text.replace(/([^\\s])\\[/, \"$1 [\");\n\n  text = text.trim();\n\n  return text;\n}\n\nfunction cleanLabel(text) {\n  if (!text) {\n    return \"\";\n  }\n\n  text = text.replace(/\\s/g, \" \"); // eliminate nbsp etc\n  text = text.trim();\n\n  // remove trailing :\n  text = text.replace(/\\s*\\:+$/, \"\");\n\n  return text;\n}\n\nfunction getVisibleTextInNode(node) {\n  let text = \"\";\n\n  if (query.length > 0) {\n    // loop over all the contents (which includes text nodes) and add in only the visbile ones\n    let contents = node.childNodes;\n    if (contents) {\n      for (let childIndex = 0; childIndex < contents.length; childIndex++) {\n        let child = contents[childIndex];\n\n        if (child.getAttribute(\"style\") != \"display: none;\") {\n          text += child.textContent;\n        }\n      }\n    }\n  }\n\n  return text;\n}\n\nfunction extractRecordData(table, result) {\n  var recordDataRows = table.querySelectorAll(\"tr\");\n\n  result.recordData = Object.create(null);\n  let recordData = result.recordData;\n\n  if (!recordDataRows) {\n    return;\n  }\n\n  for (let rowIndex = 0; rowIndex < recordDataRows.length; rowIndex++) {\n    let row = recordDataRows[rowIndex];\n\n    if (row.getAttribute(\"style\") == \"display: none;\") {\n      // There can be rows for many records present if this is a model popup dialog\n      // and multiple records have been clicked on one after the other\n      continue;\n    }\n\n    if (row.getAttribute(\"class\") == \"non-principal-info\") {\n      result.otherPersonRecordData = Object.create(null);\n      recordData = result.otherPersonRecordData;\n    }\n\n    // Get the label of the row (must be immediate child)\n    let label = row.querySelector(\"> th\").textContent;\n    if (label != \"\") {\n      label = cleanLabel(label);\n      let numChildren = row.querySelector(\"td\").children.length;\n\n      if (numChildren == 0) {\n        let value = row.querySelector(\"td\").textContent;\n        value = value.replace(/\\s+/g, \" \").trim();\n        recordData[label] = value;\n      } else {\n        // there are children. There are several cases to handle here\n        if (numChildren == 1) {\n          // sometimes there is a shadowRoot\n          let child = row.querySelector(\"td\").children[0];\n          if (child.shadowRoot) {\n            let span = child.shadowRoot.querySelector(\"span\");\n\n            let value = getVisibleTextInNode(span);\n            value = cleanText(value);\n            if (value != \"\") {\n              recordData[label] = value;\n            }\n          } else {\n            // for now just get the text of all the children, this can happen for \"Name:\" in death reg\n            // If can also happen for \"Inferred Spouse:\" in 1939 reg.\n            let value = getVisibleTextInNode(row.querySelector(\"td\"));\n            value = cleanText(value);\n            if (value != \"\") {\n              recordData[label] = value;\n            }\n          }\n        } else {\n          //console.log(\"Num children = \" + numChildren + \". \" + label);\n          // for now just use the text of the TD itself and not children (if any)\n          let value = getVisibleTextInNode(row.querySelector(\"td\"));\n          value = cleanText(value);\n          if (value) {\n            recordData[label] = value;\n          } else {\n            console.log(\"Unhandled case: Num children = \" + numChildren + \". \" + label);\n          }\n        }\n      }\n    } else {\n      // this row doesn't have a <th> label. Could be something like \"Household members\"\n      if (row.classList.contains(\"tableContainerRow\")) {\n        let table = row.querySelector(\"table\");\n\n        // collect all the headings and put them in a string with line breaks between them\n        let headings = table.querySelectorAll.find(\"thead tr th\");\n        let label = \"\";\n        if (headings) {\n          for (let colIndex = 0; colIndex < headings.length; colIndex++) {\n            let headingQ = headings[colIndex];\n            if (label) {\n              label += \"<br/>\";\n            }\n            label += cleanText(heading.textContent);\n          }\n        }\n\n        // now get each row of data and put them all in one string with line breaks between rows\n        let subTableRows = table.querySelectorAll(\"tbody tr\");\n        if (subTableRows) {\n          let value = \"\";\n          for (let subRowIndex = 0; subRowIndex < subTableRows.length; subRowIndex++) {\n            let subRow = subTableRows[subRowIndex];\n            if (value) {\n              value += \"<br/>\";\n            }\n            value += cleanText(subRow.textContent);\n          }\n          if (value) {\n            recordData[label] = value;\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction extractRelatives(relatives, result) {\n  if (relatives.length > 0) {\n    let rows = relatives.querySelectorAll(\"div.relative\");\n\n    if (rows && rows.length > 0) {\n      result.relatives = [];\n\n      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n        let row = rows[rowIndex];\n\n        if (row.getAttribute(\"style\") == \"display: none;\") {\n          // There can be rows for many records present if this is a model popup dialog\n          // and multiple records have been clicked on one after the other\n          continue;\n        }\n\n        let cells = row.querySelectorAll(\"div[role=gridcell]\");\n        if (cells && cells.length > 0) {\n          let rowObject = Object.create(null);\n          result.relatives.push(rowObject);\n\n          for (let cellIndex = 0; cellIndex < cells.length; cellIndex++) {\n            let cell = cells[cellIndex];\n\n            let label = cell.getAttribute(\"aria-label\");\n            let value = cleanText(cell.textContent);\n\n            if (label != \"\") {\n              rowObject[label] = value;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction extractDataForImage(filmViewerNode, result) {\n  // Example images:\n\n  // This one has transcribed data under \"Image Index\"\n  // https://www.familysearch.org/ark:/61903/3:1:S3HT-DR17-4Y9?i=5&wc=M8VJ-GZ9%3A160750101%2C160953901%2C161035601&cc=1824690\n\n  // No index on this one from Whiting-2417\n  // https://www.familysearch.org/ark:/61903/3:1:3QS7-89WL-VKSC?i=379&wc=M7CD-S6D%3A358132901%2C360400601&cc=2078654\n\n  // Hood-6574 has many images cited.\n  // This one has transcription:\n  // https://www.familysearch.org/ark:/61903/3:1:3QS7-89SS-998T?i=31&cc=1804888\n\n  // This one does not:\n  // https://www.familysearch.org/ark:/61903/3:1:3Q9M-CS3J-D77F-1?cat=157396\n\n  let filmNumberNode = filmViewerNode.querySelector(\"div.film-number\");\n  if (filmNumberNode) {\n    let filmNumberText = filmNumberNode.textContent;\n    result.filmNumber = filmNumberText.replace(/^Film\\s*\\#\\s*/, \"\").trim();\n  }\n\n  let crumbsNode = filmViewerNode.querySelector(\"fs-waypoint-crumbs\");\n  if (crumbsNode) {\n    let browsePath = \"\";\n    let crumbList = crumbsNode.querySelector(\"nav > ul\");\n    if (crumbList) {\n      let children = crumbList.children;\n      for (let index = 0; index < children.length; index++) {\n        let child = children[index];\n        let childDataNgRepeat = child.getAttribute(\"data-ng-repeat\");\n        if (childDataNgRepeat && childDataNgRepeat.includes(\"crumb in crumbs\")) {\n          let childTitle = child.getAttribute(\"title\");\n          if (childTitle) {\n            if (browsePath) {\n              browsePath += \" > \";\n            }\n            browsePath += childTitle;\n          }\n        }\n      }\n    }\n    if (browsePath) {\n      result.imageBrowsePath = browsePath;\n    }\n\n    let titleNode = crumbsNode.querySelector(\"li.visible-phone > span\");\n    //console.log(\"titleQ.length = \" + titleQ.length);\n    if (titleNode) {\n      result.filmTitle = titleNode.textContent;\n    }\n    if (!result.filmNumber) {\n      filmNumberNode = crumbsNode.querySelector(\"li.hidden-phone > span.ng-scope\");\n      if (filmNumberNode) {\n        result.filmNumber = titleNode.textContent;\n      }\n    }\n  }\n\n  let pager = filmViewerNode.querySelector(\"div.openSDPager\");\n  if (pager) {\n    let input = pager.querySelector(\"input[name=currentTileNumber]\");\n    if (input) {\n      result.imageNumber = input.value;\n    }\n    let afterInput = pager.querySelector(\"label.afterInput\");\n    if (afterInput) {\n      let totalText = afterInput.textContent;\n      result.totalImages = totalText.replace(/^of\\s*/, \"\").trim();\n    }\n  }\n\n  let imageInfo = filmViewerNode.querySelector(\"fs-image-info-panel\");\n  if (imageInfo) {\n    let table = imageInfo.querySelector(\"table[data-ng-if=imageInfo\\\\.filmNotes]\");\n    if (table) {\n      let tableRows = table.querySelectorAll(\"tr.ng-scope\");\n      if (tableRows) {\n        if (tableRows.length == 1) {\n          let catalogLink = tableRows[0].querySelector(\"a.ng-binding\");\n          if (catalogLink) {\n            result.catalogRecordName = catalogLink.textContent;\n            // this link is relative to https://www.familysearch.org\n            result.catalogRecordLink = \"https://www.familysearch.org\" + catalogLink.getAttribute(\"href\");\n          }\n\n          let imageInfoCols = tableRows[0].querySelectorAll(\"td\");\n          if (imageInfoCols.length > 1) {\n            let itemNumberCol = imageInfoCols[1];\n            let itemNumber = itemNumberCol.textContent;\n            if (itemNumber) {\n              result.itemNumber = itemNumber;\n            }\n          }\n          if (imageInfoCols.length > 2) {\n            let noteCol = imageInfoCols[2];\n            let note = noteCol.textContent;\n            if (note) {\n              result.filmNote = note;\n            }\n          }\n        } else {\n          // there are multiple rows. See if they are all the same catalog\n          let catalogRecordName = \"\";\n          let catalogRecordLink = \"\";\n          let allAreTheSame = true;\n          for (let index = 0; index < tableRows.length; index++) {\n            let row = tableRows[index];\n            let catalogLink = row.querySelector(\"a.ng-binding\");\n            if (catalogLink) {\n              let newCatalogRecordName = catalogLink.textContent;\n              // this link is sometime relative to https://www.familysearch.org\n              let newCatalogRecordLink = catalogLink.getAttribute(\"href\");\n              if (!newCatalogRecordLink.startsWith(\"http\")) {\n                newCatalogRecordLink = \"https://www.familysearch.org\" + newCatalogRecordLink;\n              }\n\n              if (catalogRecordName == \"\" && catalogRecordLink == \"\") {\n                catalogRecordName = newCatalogRecordName;\n                catalogRecordLink = newCatalogRecordLink;\n              } else {\n                if (catalogRecordName != newCatalogRecordName || catalogRecordLink != newCatalogRecordLink) {\n                  allAreTheSame = false;\n                  break;\n                }\n              }\n            }\n          }\n\n          if (allAreTheSame) {\n            result.catalogRecordName = catalogRecordName;\n            result.catalogRecordLink = catalogRecordLink;\n          }\n        }\n      }\n    }\n\n    let citationNode = imageInfo.querySelector(\"p#image-citation\");\n    if (citationNode) {\n      result.citation = citationNode.textContent;\n    }\n  }\n\n  //console.log(\"extractDataForImage, result is:\");\n  //console.log(result);\n\n  if (result.filmNumber || result.imageNumber) {\n    result.pageType = \"image\";\n  } else {\n    // FS is an example of a site that says it's page load is complete but the data may not be\n    // there to extract.\n    //console.log(\"FS extractData, treating as incomplete\");\n    result.dataMayBeIncomplete = true;\n    result.pageType = \"unknown\";\n  }\n}\n\nfunction extractDataForPersonPage(document, result) {\n  function extractDateAndPlaceFromVitalsSection(cardSection, prefix) {\n    let dateElement = cardSection.querySelector(\"div.display-date\");\n    if (dateElement) {\n      let moreLessElement = dateElement.querySelector(\"fs-more-less\");\n      if (moreLessElement) {\n        let date = moreLessElement.getAttribute(\"title\");\n        //console.log(\"moreLessElement is :\");\n        //console.log(moreLessElement);\n        if (date) {\n          //console.log(\"date is :\");\n          //console.log(date);\n          result[prefix + \"Date\"] = date;\n        }\n\n        if (moreLessElement.shadowRoot) {\n          let spanElement = moreLessElement.shadowRoot.querySelector(\"span[data-test-more-less-text]\");\n          if (spanElement) {\n            let originalDate = spanElement.textContent;\n            if (originalDate && originalDate != \"false\") {\n              result[prefix + \"DateOriginal\"] = originalDate;\n            }\n          }\n        }\n      }\n    }\n    let placeElement = cardSection.querySelector(\"div.display-place\");\n    if (placeElement) {\n      let valueElement = placeElement.querySelector(\"[data-test-place]\");\n      if (valueElement) {\n        // can also use textContent to get place as entered.\n        let standardizedPlace = valueElement.getAttribute(\"title\");\n        if (standardizedPlace) {\n          result[prefix + \"Place\"] = standardizedPlace;\n        }\n        let originalPlace = valueElement.textContent;\n        if (originalPlace && originalPlace != \"false\") {\n          result[prefix + \"PlaceOriginal\"] = originalPlace;\n        }\n      }\n    }\n  }\n\n  function extractNamesFromFsTreePerson(fsTreePersonElement, resultObject) {\n    let nameDiv = fsTreePersonElement.querySelector(\"div.fs-person__name\");\n    if (nameDiv) {\n      let givenNameElement = nameDiv.querySelector(\"span.fs-person__given-name\");\n      if (givenNameElement) {\n        resultObject.givenName = givenNameElement.textContent;\n      }\n      let familyNameElement = nameDiv.querySelector(\"span.fs-person__family-name\");\n      if (familyNameElement) {\n        resultObject.surname = familyNameElement.textContent;\n      }\n      let fullNameElement = nameDiv.querySelector(\"span.fs-person__full-name\");\n      if (fullNameElement) {\n        resultObject.fullName = fullNameElement.textContent;\n      }\n    }\n  }\n\n  //console.log(\"extractDataForPersonPage:\");\n\n  result.pageType = \"person\";\n\n  let personPageElement = document.querySelector(\"fs-person-page\");\n  if (personPageElement && personPageElement.shadowRoot) {\n    // there are two places to get the person's name, one in header and one in vitals\n    let personElement = personPageElement.shadowRoot.querySelector(\"div.person-header-container > fs-tree-person\");\n    if (personElement) {\n      extractNamesFromFsTreePerson(personElement, result);\n    }\n\n    let detailsElement = personPageElement.shadowRoot.querySelector(\"#pages > fs-tree-person-details\");\n\n    if (detailsElement && detailsElement.shadowRoot) {\n      let vitalsElement = detailsElement.shadowRoot.querySelector(\"fs-tree-person-vitals\");\n\n      if (vitalsElement && vitalsElement.shadowRoot) {\n        //console.log(\"vitalsElement is :\");\n        //console.log(vitalsElement);\n\n        let cardElement = vitalsElement.shadowRoot.querySelector(\"fs-tree-collapsable-card.vitals\");\n\n        if (cardElement) {\n          //console.log(\"cardElement is :\");\n          //console.log(cardElement);\n\n          let listItems = cardElement.querySelectorAll(\"li\");\n          for (let listItem of listItems) {\n            //console.log(\"listItem is :\");\n            //console.log(listItem);\n\n            //console.log(\"listItem.style.display is :\");\n            //console.log(listItem.style.display);\n\n            // There can be random list items from previous people that have their display style set to none!\n            if (listItem.style.display != \"none\") {\n              let cardItem = listItem.querySelector(\"fs-tree-conclusion\");\n              if (cardItem) {\n                //console.log(\"cardItem is :\");\n                //console.log(cardItem);\n\n                if (cardItem.shadowRoot) {\n                  let cardSection = cardItem.shadowRoot.querySelector(\"section\");\n                  if (cardSection) {\n                    //console.log(\"cardSection is :\");\n                    //console.log(cardSection);\n\n                    let conclusionType = cardSection.getAttribute(\"data-test-conclusion-type\");\n\n                    if (conclusionType == \"NAME\") {\n                      let nameElement = cardSection.querySelector(\"div.display-name\");\n                      if (nameElement) {\n                        let name = nameElement.textContent;\n                        // we may already have name from header\n                        if (!result.fullName) {\n                          result.fullName = name;\n                        }\n                      }\n                    } else if (conclusionType == \"GENDER\") {\n                      let genderElement = cardSection.querySelector(\"div.display-gender\");\n                      if (genderElement) {\n                        let gender = genderElement.textContent;\n                        result.gender = gender;\n                      }\n                    } else if (conclusionType == \"BIRTH\") {\n                      extractDateAndPlaceFromVitalsSection(cardSection, \"birth\");\n                    } else if (conclusionType == \"DEATH\") {\n                      extractDateAndPlaceFromVitalsSection(cardSection, \"death\");\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      let familyElement = detailsElement.shadowRoot.querySelector(\"fs-tree-person-family\");\n\n      if (familyElement && familyElement.shadowRoot) {\n        let cardElement = familyElement.shadowRoot.querySelector(\"fs-tree-collapsable-card.family\");\n\n        if (cardElement) {\n          let familyMembersElement = cardElement.querySelector(\"fs-family-members\");\n\n          if (familyMembersElement && familyMembersElement.shadowRoot) {\n            // Get spouses\n\n            let spousesElement = familyMembersElement.shadowRoot.querySelector(\"#spouses\");\n\n            if (spousesElement) {\n              let spouses = spousesElement.querySelectorAll(\"fs-family-members-block\");\n              for (let spouseBlockElement of spouses) {\n                if (spouseBlockElement.shadowRoot) {\n                  let familyBlock = spouseBlockElement.shadowRoot.querySelector(\"div.family-block\");\n                  if (familyBlock) {\n                    let couple = familyBlock.querySelector(\"fs-family-members-couple\");\n                    if (couple && couple.shadowRoot) {\n                      let spouse = {};\n\n                      let spouseElement = couple.shadowRoot.querySelector(\"fs-tree-person:not(.focusPerson)\");\n                      if (spouseElement) {\n                        extractNamesFromFsTreePerson(spouseElement, spouse);\n                      }\n\n                      let marriageDateElement = couple.shadowRoot.querySelector(\"span.marriage-date\");\n                      if (marriageDateElement) {\n                        let dateString = marriageDateElement.textContent;\n                        if (dateString) {\n                          dateString = dateString.replace(/^Marriage\\:\\s*/, \"\");\n                          spouse.marriageDateOriginal = dateString.trim();\n                        }\n                        let stdDateString = marriageDateElement.getAttribute(\"title\");\n                        if (stdDateString) {\n                          stdDateString = stdDateString.replace(/^Standard\\:\\s*/, \"\");\n                          spouse.marriageDate = stdDateString.trim();\n                        }\n                      }\n\n                      let marriagePlaceElement = couple.shadowRoot.querySelector(\"span.marriage-place\");\n                      if (marriagePlaceElement) {\n                        let placeString = marriagePlaceElement.textContent;\n                        if (placeString) {\n                          spouse.marriagePlaceOriginal = placeString.trim();\n                        }\n                        let stdPlaceString = marriagePlaceElement.getAttribute(\"title\");\n                        if (stdPlaceString) {\n                          stdPlaceString = stdPlaceString.replace(/^Standard\\:\\s*/, \"\");\n                          spouse.marriagePlace = stdPlaceString.trim();\n                        }\n                      }\n\n                      // add the spouse\n                      if (!result.spouses) {\n                        result.spouses = [];\n                      }\n                      result.spouses.push(spouse);\n                    }\n                  }\n                }\n              }\n            }\n\n            // Get parents\n\n            let parentsElement = familyMembersElement.shadowRoot.querySelector(\"#parents\");\n            if (parentsElement) {\n              let familyMembersBlock = parentsElement.querySelector(\"fs-family-members-block\");\n              if (familyMembersBlock && familyMembersBlock.shadowRoot) {\n                let familyBlock = familyMembersBlock.shadowRoot.querySelector(\"div.family-block\");\n                if (familyBlock) {\n                  let couple = familyBlock.querySelector(\"fs-family-members-couple\");\n                  if (couple && couple.shadowRoot) {\n                    let fatherElement = couple.shadowRoot.querySelector(\"fs-tree-person.male\");\n                    if (fatherElement) {\n                      let father = {};\n                      extractNamesFromFsTreePerson(fatherElement, father);\n                      result.father = father;\n                    }\n\n                    let motherElement = couple.shadowRoot.querySelector(\"fs-tree-person.female\");\n                    if (motherElement) {\n                      let mother = {};\n                      extractNamesFromFsTreePerson(motherElement, mother);\n                      result.mother = mother;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  //console.log(result);\n}\n\n// As of 12 Sep 2022  this new format page is an option from the old format page\nfunction extractDataForPersonPageFormat2(document, personId, result) {\n  function extractDateAndPlaceFromVitalsSection(conclusionElement, resultObject, prefix) {\n    let dateElement = conclusionElement.querySelector(\"span[data-testid='conclusion-date']\");\n    if (dateElement) {\n      let date = dateElement.textContent;\n      if (date) {\n        //console.log(\"date is :\");\n        //console.log(date);\n        if (prefix) {\n          resultObject[prefix + \"Date\"] = date;\n        } else {\n          resultObject[\"date\"] = date;\n        }\n      }\n    }\n    let placeElement = conclusionElement.querySelector(\"span[data-testid='conclusion-place']\");\n    if (placeElement) {\n      let place = placeElement.textContent;\n      if (place) {\n        if (prefix) {\n          resultObject[prefix + \"Place\"] = place;\n        } else {\n          resultObject[\"place\"] = place;\n        }\n      }\n    }\n  }\n\n  function extractNamesFromPersonItem(personItemElement, resultObject) {\n    let nameSpan = personItemElement.querySelector(\"span[data-testid='fullName']\");\n    if (nameSpan) {\n      resultObject.fullName = nameSpan.textContent;\n    }\n  }\n\n  //console.log(\"extractDataForPersonPageFormat2:\");\n\n  let mainContentNode = document.querySelector(\"main#main\");\n  if (!mainContentNode) {\n    return;\n  }\n\n  result.pageType = \"person\";\n\n  let vitalsElement = mainContentNode.querySelector(\"div[data-testid='section-card-vitals']\");\n  if (vitalsElement) {\n    //console.log(\"vitalsElement:\");\n    //console.log(vitalsElement);\n\n    let nameConclusionElement = vitalsElement.querySelector(\"div[data-testid='conclusionDisplay:NAME']\");\n    if (nameConclusionElement) {\n      let nameElement = nameConclusionElement.querySelector(\"span[data-testid='conclusion-name-template']\");\n      if (nameElement) {\n        result.fullName = nameElement.textContent;\n      }\n    }\n\n    let genderConclusionElement = vitalsElement.querySelector(\"div[data-testid='conclusionDisplay:GENDER']\");\n    if (genderConclusionElement) {\n      let genderElement = genderConclusionElement.querySelector(\"span[data-testid='conclusion-gender']\");\n      if (genderElement) {\n        result.gender = genderElement.textContent;\n      }\n    }\n\n    let birthConclusionElement = vitalsElement.querySelector(\"div[data-testid='conclusionDisplay:BIRTH']\");\n    if (birthConclusionElement) {\n      extractDateAndPlaceFromVitalsSection(birthConclusionElement, result, \"birth\");\n    }\n\n    let deathConclusionElement = vitalsElement.querySelector(\"div[data-testid='conclusionDisplay:DEATH']\");\n    if (deathConclusionElement) {\n      extractDateAndPlaceFromVitalsSection(deathConclusionElement, result, \"death\");\n    }\n  }\n\n  let familyElement = mainContentNode.querySelector(\"div[data-testid='section-card-family']\");\n  if (familyElement) {\n    let families = familyElement.querySelectorAll(\"div[data-testid^='family-']\");\n    for (let family of families) {\n      let familyId = family.getAttribute(\"data-testid\");\n      if (familyId.includes(personId)) {\n        // this is a spouse and children\n        let coupleElement = family.querySelector(\"ul[data-testid='couple-persons']\");\n        if (coupleElement) {\n          let couplePersons = coupleElement.querySelectorAll(\"li[data-testid='person-item']\");\n          if (couplePersons.length == 2) {\n            let spouseElement = undefined;\n            for (let person of couplePersons) {\n              if (!person.hasAttribute(\"focus-person\")) {\n                spouseElement = person;\n                break;\n              }\n            }\n            if (spouseElement) {\n              let spouse = {};\n              extractNamesFromPersonItem(spouseElement, spouse);\n\n              extractDateAndPlaceFromVitalsSection(coupleElement, spouse, \"marriage\");\n\n              if (!result.spouses) {\n                result.spouses = [];\n              }\n              result.spouses.push(spouse);\n            }\n          }\n        }\n      } else {\n        // this must be parents and siblings\n        let coupleElement = family.querySelector(\"ul[data-testid='couple-persons']\");\n        if (coupleElement) {\n          let couplePersons = coupleElement.querySelectorAll(\"li[data-testid='person-item']\");\n          if (couplePersons.length == 2) {\n            let fatherElement = couplePersons[0];\n            let motherElement = couplePersons[1];\n\n            let father = {};\n            extractNamesFromPersonItem(fatherElement, father);\n            result.father = father;\n\n            let mother = {};\n            extractNamesFromPersonItem(motherElement, mother);\n            result.mother = mother;\n          }\n        }\n      }\n    }\n  }\n\n  //console.log(result);\n}\n\nfunction extractDataForPopup(searchArtifactResults, result) {\n  let shadowRoot1 = searchArtifactResults.shadowRoot;\n\n  let fsRecordDetailsModal = shadowRoot1.querySelector(\"fs-record-details-modal\");\n\n  if (fsRecordDetailsModal) {\n    let shadowRoot2 = fsRecordDetailsModal.shadowRoot;\n\n    let fsRecordDetails = shadowRoot2.querySelector(\"fs-record-details\");\n\n    if (fsRecordDetails) {\n      let shadowRoot3 = fsRecordDetails.shadowRoot;\n\n      let recordDetails = shadowRoot3.querySelector(\"record-details\");\n\n      if (recordDetails) {\n        let shadowRoot4 = recordDetails.shadowRoot;\n\n        result.pageType = \"record popup\";\n\n        //  Document Info\n\n        let rdDocumentInfo = shadowRoot4.querySelector(\"rd-document-info\");\n        if (rdDocumentInfo) {\n          let shadowRoot5 = rdDocumentInfo.shadowRoot;\n\n          let collectionLink = shadowRoot5.querySelector(\"a.collection-link\");\n\n          if (collectionLink) {\n            result.collectionName = collectionLink.textContent;\n            // this link is relative to familysearch.org\n            result.collectionLink = collectionLink.getAttribute(\"href\");\n          }\n\n          let documentInfoFields = shadowRoot5.querySelector(\"div.document-info-inner > table.fields\");\n          if (documentInfoFields) {\n            var docTableResult = {};\n            extractRecordData(documentInfoFields, docTableResult);\n\n            result.docInfoData = docTableResult.recordData;\n          }\n\n          let citationNode = shadowRoot5.querySelector(\"p.citation\");\n\n          if (citationNode) {\n            result.citation = citationNode.textContent;\n          }\n        }\n\n        // Record details\n\n        let rdPerson = shadowRoot4.querySelector(\"rd-person\");\n        if (rdPerson) {\n          let shadowRoot5 = rdPerson.shadowRoot;\n\n          // Not sure if we need the person header - it gives the gender, name and collection title\n          // unless in the record of someone else (like a child) in which case it says that\n          let personHeader = shadowRoot5.querySelector(\"div.person-header\");\n\n          // get the main table data\n          let table = shadowRoot5.querySelector(\"table.fields\");\n          if (table) {\n            extractRecordData(table, result);\n          }\n\n          // sometimes (e.g. a census) there are relatives in a pseudo table\n          let relatives = shadowRoot5.querySelector(\"div.relatives\");\n          if (relatives) {\n            extractRelatives(relatives, result);\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction extractData(document, url) {\n  //console.log(\"fs extractData, url = \" + url);\n\n  var result = {};\n\n  result.url = url;\n\n  // first determine what kind of page we are in.\n\n  let mainContent = document.querySelector(\"#main-content-section\");\n\n  //console.log(\"mainContent is\");\n  //console.log(mainContent);\n\n  if (mainContent) {\n    let filmViewerNode = mainContent.querySelector(\"fs-film-viewer\");\n    if (filmViewerNode) {\n      extractDataForImage(filmViewerNode, result);\n      return result;\n    } else if (url.startsWith(\"https://www.familysearch.org/tree/person/details/\")) {\n      // it is a person page\n      //console.log(\"extractData, it is a person:\");\n\n      extractDataForPersonPage(document, result);\n      return result;\n    }\n  } else {\n    mainContent = document.querySelector(\"#main\");\n    if (mainContent) {\n      // this is a newer format page, only supported for person pages currently\n      if (url.startsWith(\"https://www.familysearch.org/tree/person/details/\")) {\n        // it is a person page\n        //console.log(\"extractData, it is a person:\");\n\n        let personId = url.replace(\"https://www.familysearch.org/tree/person/details/\", \"\");\n\n        extractDataForPersonPageFormat2(document, personId, result);\n        return result;\n      } else {\n        console.log(\"page type is unknown but has a #main element\");\n        result.pageType = \"unknown\";\n      }\n    } else {\n      // page may be partially loaded\n      console.log(\"page type is unknown\");\n\n      result.pageType = \"unknown\";\n      result.dataMayBeIncomplete = true;\n    }\n  }\n\n  return result;\n\n  // Currently it never gets this far because we use fetch for non-image pages\n  // The below has been converted to not use jQuery but not tested\n  /*\n  let searchArtifactResults = document.querySelector(\"#main-content-section > div.full-width > search-artifact-results\");\n  if (searchArtifactResults) {\n    extractDataForPopup(searchArtifactResults, result)\n  }\n  else {\n    \n    let recordSection = document.querySelector(\"#main > div.css-1c8s46c-appCss > div > div > div.css-1psu6mv-readyCss\");\n\n    let header = recordSection.querySelector(\"> div > div.css-13hiha-headerCss\");\n    let leftSide = recordSection.querySelector(\"> div > div.css-dqaew8-recordCss > div > div:nth-child(1)\");\n    let rightSide = recordSection.querySelector(\"> div > div.css-dqaew8-recordCss > div > div:nth-child(2)\");\n\n    // left side\n    let mainPersonTable = leftSide.querySelector(\"> table\");\n\n    let additionalPersonsTable = document.querySelector(\"#additionalPersons > div > div.css-mt5p7h-additionalPersonRowCss > div.css-dfawkr-lowerBorderCss > div > div > table\");\n\n    let citationQ = rightSide.querySelector(\"#citation\");\n    result.citation = citation.textContent;\n\n\n    result.recordSection = recordSection;\n    result.header = header;\n    result.leftSide = leftSide;\n    result.rightSide = rightSide;\n    result.mainPersonTable = mainPersonTable;\n    result.additionalPersonsTable = additionalPersonsTable;\n  }\n\n  return result;\n  */\n}\n\nfunction getDateValueFromDate(date, fieldTypeEnding, labelId) {\n  if (date.values) {\n    for (let value of date.values) {\n      if (value.labelId == labelId) {\n        result.eventYear = value.text;\n      }\n    }\n  }\n  let closeMatch = undefined;\n  if (date.fields) {\n    for (let field of date.fields) {\n      let type = field.type;\n      if (type && type.endsWith(fieldTypeEnding)) {\n        for (let value of field.values) {\n          if (value.labelId == labelId) {\n            return value.text; // matches both type and labelId\n          }\n        }\n\n        if (!closeMatch && field.values.length > 0) {\n          closeMatch = field.values[0].text;\n        }\n      } else {\n        if (field.values) {\n          for (let value of field.values) {\n            if (value.labelId == labelId) {\n              if (!closeMatch && field.values.length > 0) {\n                closeMatch = field.values[0].text;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return closeMatch;\n}\n\nfunction getCleanDateValueFromDate(date, fieldTypeEnding, labelId) {\n  let value = getDateValueFromDate(date, fieldTypeEnding, labelId);\n  if (value) {\n    // clean date\n    value = value.trim();\n    if (/^0\\d\\s/.test(value)) {\n      // remove leading zero\n      value = value.substring(1);\n    }\n    if (/^from /.test(value)) {\n      // can be like \"from 1861 to 1865\" in which case change to \"1861-1865\"\n      value = value.replace(/from (\\d+) to (\\d+)/, \"$1-$2\");\n    }\n  }\n  return value;\n}\n\nfunction setFieldFromDate(date, fieldTypeEnding, labelId, result, resultFieldName) {\n  let value = getCleanDateValueFromDate(date, fieldTypeEnding, labelId);\n  if (value) {\n    result[resultFieldName] = value;\n  }\n}\n\nfunction getPlaceValueFromPlace(place, fieldTypeEnding, labelId) {\n  if (place.values) {\n    if (labelId) {\n      for (let value of place.values) {\n        if (value.labelId == labelId) {\n          return value.text;\n        }\n      }\n    } else if (!fieldTypeEnding) {\n      if (values.length == 1) {\n        return values[0].text;\n      }\n    }\n  }\n  if (place.fields) {\n    for (let field of place.fields) {\n      if (field.values) {\n        let type = field.type;\n        for (let value of field.values) {\n          if ((type && fieldTypeEnding && type.endsWith(fieldTypeEnding)) || value.labelId == labelId) {\n            return value.text;\n          } else if (!fieldTypeEnding && !labelId) {\n            if (value.text) {\n              return value.text;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction cleanPlaceString(value) {\n  if (!value) {\n    return value;\n  }\n\n  while (value.startsWith(\",\")) {\n    value = value.substring(1).trim();\n  }\n\n  while (value.endsWith(\",\")) {\n    value = value.substring(0, value.length - 1).trim();\n  }\n\n  return value;\n}\n\nfunction getCleanPlaceValueFromPlace(place, fieldTypeEnding, labelId) {\n  let value = getPlaceValueFromPlace(place, fieldTypeEnding, labelId);\n  if (value) {\n    value = cleanPlaceString(value);\n  }\n  return value;\n}\n\nfunction setFieldFromPlace(place, fieldTypeEnding, labelId, result, resultFieldName) {\n  let value = getCleanPlaceValueFromPlace(place, fieldTypeEnding, labelId);\n  if (value) {\n    result[resultFieldName] = value;\n  }\n}\n\nfunction setFieldFromPlaceWithLabels(place, labelIdList, result, resultFieldName) {\n  for (let labelId of labelIdList) {\n    let value = getCleanPlaceValueFromPlace(place, \"\", labelId);\n    if (value) {\n      result[resultFieldName] = value;\n      return;\n    }\n  }\n}\n\nfunction checkForBadFmpLinks(result) {\n  // It seems pretty impossible to fix bad image links since within one document they can be off by varying\n  // offsets. I'm guessing that at some point the FMP document had multiple scans of the same page and that\n  // these were then removed which threw all the image numbers off.\n  // So perhaps the best solution is to make a list of document numbers that have issues and do not include\n  // FMP links for those.\n\n  const fmpDocsWithBadLinksFromFs = [\"GBC/1851/4307762/\"];\n\n  let url = result.externalImageUrl;\n\n  if (!url) {\n    return;\n  }\n\n  if (url.indexOf(\"findmypast.\") == -1) {\n    return;\n  }\n\n  // example FMP URL\n  // https://search.findmypast.co.uk/record?id=GBC/1851/4294847/01287&parentid=GBC/1851/0012732317\n\n  let queryIndex = url.indexOf(\"?\");\n  if (queryIndex != -1) {\n    let query = url.substring(queryIndex);\n\n    let idString = query.replace(/\\?id\\=([^&]+).*/, \"$1\");\n    //console.log(\"idString = \" + idString);\n    if (!idString || idString == query) {\n      return;\n    }\n\n    for (let badDoc of fmpDocsWithBadLinksFromFs) {\n      if (idString.startsWith(badDoc)) {\n        // do not use the FMP link - it is bad\n        //console.log(\"bad link\");\n        result.externalImageUrl = \"bad\";\n        return;\n      }\n    }\n  }\n}\n\nfunction isUrlAValidFullOrPartialFmpImageLink(url) {\n  // URL can be something like this:   \"GBC/1841/0276/0192&parentid=GBC/1841/0000933316\"\n  // In which case it requires some work to make this into a valid FMP url like\n  // https://search.findmypast.co.uk/record?id=GBC%2F1841%2F0276%2F0192&parentid=GBC%2F1841%2F0000933316\n  // Sometimes it is something like: \"GBC/1871/3907/0156\"\n  // In which case it needs an extra \"browse\" in the URL:\n  // https://search.findmypast.co.uk/record/browse?id=GBC/1871/3907/0156\n  // Sometimes it is not a valid FindMyPast image partial URL. Examples:\n  // \"43004_162028006053_0100-00630.j2k\"  (on a US Virginia death which does have a valid FS image)\n  // \"TNA%2FR39%2F1041%2F1041C%2F011%2F15\"  (on a UK 1939 register record)\n\n  if (!url) {\n    return false;\n  }\n\n  let isFindMyPast = false;\n\n  // Check for known formats that would not be valid\n  // example non-FMP link: \"D3608/1/4\"\n  let badFormats = [\n    /^\\w\\d+\\/\\d+\\/\\d+$/, // e.g. \"D3608/1/4\"\n    /^\\d+$/, // e.g. \"84\"\n    /^[\\w\\d]+$/, // e.g. \"D3608\"\n    /^[\\w\\d]+\\/$/, // e.g. \"nai001442165/\"\n  ];\n\n  let isBadArchiveIdFormat = false;\n  for (let regex of badFormats) {\n    if (regex.test(url)) {\n      isBadArchiveIdFormat = true;\n      break;\n    }\n  }\n\n  let hadParentId = false;\n\n  let parentIdIndex = url.toLowerCase().indexOf(\"parentid\");\n  if (parentIdIndex != -1) {\n    url = url.substring(0, parentIdIndex);\n    hadParentId = true;\n  }\n\n  if (!isBadArchiveIdFormat) {\n    let percentIndex = url.indexOf(\"%\");\n    let dotIndex = url.indexOf(\".\");\n    if (percentIndex == -1 && dotIndex == -1) {\n      // there may be more tests that we could do but for now say this is valid FMP\n      isFindMyPast = true;\n    }\n  }\n\n  return isFindMyPast;\n}\n\nfunction processImageLinks(document, result, options) {\n  let externalImageId = result.externalImageId;\n  let extImageUrl = result.extImageUrl;\n  let externalImageReference = result.externalImageReference;\n  let externalRecordSeqOrig = result.externalRecordSeqOrig;\n\n  let externalFilmNumber = undefined;\n  if (result.referenceData) {\n    externalFilmNumber = result.referenceData.externalFilmNumber;\n  }\n\n  if (result.digitalArtifact) {\n    const arkString = \"ark:/61903/3:1:\";\n    if (result.fsImageUrl) {\n      // we have both, delete the digitalArtifact if it is the same as the fsImageUrl\n      let iuArkIndex = result.fsImageUrl.indexOf(arkString);\n      let daArkIndex = result.digitalArtifact.indexOf(arkString);\n      if (iuArkIndex != -1 && daArkIndex != -1) {\n        let iuId = result.fsImageUrl.substring(iuArkIndex);\n        let daId = result.digitalArtifact.substring(daArkIndex);\n        let iuTermIndex = iuId.search(/[\\/\\?\\&]/);\n        if (iuTermIndex != -1) {\n          iuId = iuId.substring(0, iuTermIndex);\n        }\n        let daTermIndex = daId.search(/[\\/\\?\\&]/);\n        if (daTermIndex != -1) {\n          daId = daId.substring(0, daTermIndex);\n        }\n        if (iuId == daId) {\n          delete result.digitalArtifact;\n        }\n      }\n    } else {\n      let daArkIndex = result.digitalArtifact.indexOf(arkString);\n      let daFsIndex = result.digitalArtifact.indexOf(\"familysearch\");\n\n      if (daArkIndex != -1 && daFsIndex != -1) {\n        result.fsImageUrl = result.digitalArtifact;\n        delete result.digitalArtifact;\n      } else {\n        // it could be an FMP link like:\n        // http://search.findmypast.co.uk/record?id=GBC/1911/RG14/06751/0025&parentid=GBC/1911/RG14/06751/0025/4\n        // or an Ancestry link like:\n        // http://search.ancestry.com/iexec?htx=View&r=an&dbid=2703&iid=32848_B094051-00469\n\n        let fmpIndex = result.digitalArtifact.indexOf(\"findmypast\");\n        let ancestryIndex = result.digitalArtifact.indexOf(\".ancestry.\");\n        if (fmpIndex != -1 && !extImageUrl) {\n          extImageUrl = result.digitalArtifact;\n          delete result.digitalArtifact;\n        } else if (ancestryIndex != -1 && !extImageUrl) {\n          extImageUrl = result.digitalArtifact;\n          delete result.digitalArtifact;\n        } else {\n          // leave digitalArtifact for now, it may be related to the externalImageUrl\n        }\n      }\n    }\n  }\n\n  if (document) {\n    // use the document to determine if there is a valid image thumbnail\n    let restrictedImageThumb = document.querySelector(\"button[class*=restrictedImageThumbCss]\");\n    let imageThumb = document.querySelector(\"img[class*=-imageThumbCss]\");\n\n    if (result.fsImageUrl && imageThumb && restrictedImageThumb) {\n      // this implies that there is a valid FamilySearch image - so do not set externalImageUrl\n      return;\n    }\n  }\n\n  if (extImageUrl) {\n    // if it is an FMP link and starts with http then change it to https\n    let prefix = \"http://search.findmypast.\";\n    let prefixIndex = extImageUrl.indexOf(prefix);\n    if (prefixIndex != -1) {\n      let remainder = extImageUrl.substring(prefix.length);\n      extImageUrl = \"https://search.findmypast.\" + remainder;\n    }\n\n    result.externalImageUrl = extImageUrl;\n  } else if (externalImageId || externalFilmNumber) {\n    if (externalImageId && externalImageId.startsWith(\"http\")) {\n      result.externalImageUrl = externalImageId;\n    } else if (externalFilmNumber && externalFilmNumber.startsWith(\"http\")) {\n      result.externalImageUrl = externalFilmNumber;\n    } else {\n      let isFindMyPast = false;\n      let url = externalImageId;\n\n      if (result.citation.includes(\"findmypast\")) {\n        isFindMyPast = true;\n      } else {\n        if (isUrlAValidFullOrPartialFmpImageLink(externalImageId)) {\n          isFindMyPast = true;\n        }\n        // The code below was when I though the externalFilmNumber could be a value FMP partial URL\n        // I was looking at this FS record: england_baptism_1810_john_abberley\n        // But it turns out in that case it is a partial RECORD link\n        //else if (isUrlAValidFullOrPartialFmpImageLink(externalFilmNumber)) {\n        //  isFindMyPast = true;\n        //  url = externalFilmNumber;\n        //}\n      }\n\n      if (isFindMyPast) {\n        // is is possible that an externalUir of \"971304\" means FMP, have not confirmed yet\n        // Just assume the link is FMP for now\n        let domain = \"findmypast.co.uk\";\n        if (options && options.search_fmp_domain && options.search_fmp_domain != \"none\") {\n          domain = options.search_fmp_domain;\n        }\n\n        // sometimes the externalImageId actuall points to the record not the image.\n        // Example from england_baptism_1902_ella_giles\n        // \"externalImageId\": \"GBPRS/CANT/B/96288131\",\n        // \"externalImageReference\": \"GBPRS/CANT/005265403/00684\",\n        // \"externalRecordSeqOrig\": \"96288131\",\n        // In this case we want to use \"GBPRS/CANT/005265403/00684\"\n        if (externalImageReference && externalRecordSeqOrig) {\n          if (externalImageId.includes(externalRecordSeqOrig)) {\n            url = externalImageReference;\n          }\n          delete result.externalImageReference;\n          delete result.externalRecordSeqOrig;\n        }\n\n        let uriQuery = encodeURI(url);\n\n        let prefix = \"https://search.\" + domain + \"/record?id=\";\n\n        // if there is no parentId on the URL then the \"/browse\" part is required\n        if (!uriQuery.toLowerCase().includes(\"parentid\")) {\n          prefix = \"https://search.\" + domain + \"/record/browse?id=\";\n        }\n\n        let uri = prefix + uriQuery;\n        result.externalImageUrl = uri;\n      }\n    }\n\n    checkForBadFmpLinks(result);\n  }\n\n  if (result.digitalArtifact) {\n    if (result.digitalArtifact == result.externalImageUrl) {\n      delete result.digitalArtifact;\n    } else {\n      // In the cases I have seen that get here digitalArtifact is a variation of a findmypast link\n      // Sometimes it is a better link - i.e. externalImageUrl doesn't resolve but digitalArtifact does.\n      // But we don't have a way to test that. For now rmove it if it contains findmypast\n      if (result.digitalArtifact.indexOf(\"findmypast\") != -1) {\n        delete result.digitalArtifact;\n      }\n    }\n  }\n}\n\nfunction addRecordDataForFact(result, fact, factType) {\n  let factTypeWithSpaces = factType.replace(/([a-z])([A-Z])/g, \"$1 $2\");\n  if (fact.date) {\n    if (fact.date.original) {\n      let label = factTypeWithSpaces + \" Date\";\n      let value = fact.date.original;\n      result.recordData[label] = value;\n    }\n  }\n  if (fact.place) {\n    const placeLabelIdsToOverrideForFacts = {\n      Death: [{ label: \"LAST_RESIDENCE\", overrideKey: \"Last Residence\" }],\n    };\n\n    let labelIdsToOverride = placeLabelIdsToOverrideForFacts[factType];\n    let overrideKey = \"\";\n    if (labelIdsToOverride) {\n      let fieldLabelId = \"\";\n      if (fact.place.fields && fact.place.fields.length == 1) {\n        let values = fact.place.fields[0].values;\n        if (values && values.length == 1) {\n          fieldLabelId = values[0].labelId;\n        }\n      }\n      if (fieldLabelId) {\n        for (let labelToOverride of labelIdsToOverride) {\n          if (labelToOverride.label == fieldLabelId) {\n            overrideKey = labelToOverride.overrideKey;\n            break;\n          }\n        }\n      }\n    }\n\n    if (fact.place.original) {\n      let label = factTypeWithSpaces + \" Place\";\n      if (overrideKey) {\n        label = overrideKey;\n      }\n      let value = fact.place.original;\n      result.recordData[label] = value;\n    }\n  }\n  if (fact.value) {\n    let label = factTypeWithSpaces;\n    let value = fact.value;\n    result.recordData[label] = value;\n  }\n}\n\n// Identifying a field:\n//  fieldFsType, fieldGcType\n//  fieldFsTypePrefix, fieldGcTypePrefix\n//  sourceSection - the section containing fields (\"topLevel\", \"primaryPerson\", \"primaryFact\", \"otherFact\", \"relationship\")\n// Selecting a value in the field (if none specified first is used)\n//  valueType - this is a preference if there are multiple\n//  labelId\n//  labelIdPrefix\n// Specifying where to put value:\n//  recordDataField\n//  dataField\n//  referenceDataField\n// if none of the above exist then the field is ignored\n// As soon a a match is found later entries in fieldData are ignored?\n\nconst fieldData = [\n  // data and record data fields\n  {\n    fieldFsType: \"EventRegQtr\",\n    dataField: \"registrationQuarter\",\n    recordDataField: \"Registration Quarter\",\n  },\n  {\n    fieldFsType: \"EventRegDate\",\n    dataField: \"registrationDate\",\n    recordDataField: \"Registration Date\",\n  },\n  {\n    fieldGcType: \"Age\",\n    sourceSection: \"primaryPerson\",\n    valueType: \"Interpreted\",\n    dataField: \"age\",\n    recordDataField: \"Age\",\n  },\n\n  //  data fields\n  { fieldFsType: \"ExternalImageId\", dataField: \"externalImageId\" },\n  { fieldFsType: \"ExtImageReference\", dataField: \"externalImageReference\" },\n  { fieldFsType: \"ExtRecordSeqOrig\", dataField: \"externalRecordSeqOrig\" },\n  { fieldFsType: \"ExtImageUrl\", dataField: \"extImageUrl\" },\n  { fieldFsType: \"ExtRecordId\", dataField: \"externalRecordId\" },\n  { fieldFsType: \"ExtRecordType\", dataField: \"externalRecordType\" },\n  { fieldFsType: \"ExtUir\", dataField: \"externalUir\" },\n\n  { fieldFsType: \"ImageArk\", dataField: \"fsImageUrl\" },\n  { fieldFsType: \"ImageNumber\", dataField: \"fsImageNumber\" },\n  { fieldFsType: \"CollectionId\", dataField: \"fsCollectionId\" },\n\n  // record data fields\n  {\n    fieldFsType: \"MilBeginRank\",\n    valueType: \"Interpreted\",\n    recordDataField: \"Miitary Beginning Rank\",\n  },\n  {\n    fieldFsType: \"MilEndRank\",\n    valueType: \"Interpreted\",\n    recordDataField: \"Miitary Final Rank\",\n  },\n  {\n    fieldFsType: \"MilSide\",\n    valueType: \"Interpreted\",\n    recordDataField: \"Miitary Side\",\n  },\n  {\n    fieldFsType: \"MilUnit\",\n    valueType: \"Interpreted\",\n    recordDataField: \"Miitary Unit\",\n  },\n  {\n    fieldFsType: \"MilCompany\",\n    valueType: \"Interpreted\",\n    recordDataField: \"Military Company\",\n  },\n  // reference fields\n  {\n    fieldFsType: \"SourceScheduleType\",\n    referenceDataField: \"sourceScheduleType\",\n  },\n  { fieldFsType: \"SourcePieceFolio\", referenceDataField: \"sourcePieceFolio\" },\n  { fieldFsType: \"SourceVolume\", referenceDataField: \"sourceVolume\" },\n  { fieldFsType: \"SourcePage\", referenceDataField: \"sourcePageNbr\" },\n  { fieldFsType: \"SourcePageNbr\", referenceDataField: \"sourcePageNbr\" },\n  { fieldFsType: \"SourceLineNbr\", referenceDataField: \"sourceLineNbr\" },\n  { fieldFsType: \"SourceEntryNbr\", referenceDataField: \"sourceEntryNbr\" },\n  { fieldFsType: \"SourceRegNbr\", referenceDataField: \"sourceRegNbr\" },\n  { fieldFsType: \"LineNbr\", referenceDataField: \"lineNumber\" },\n  { fieldFsType: \"RefId\", referenceDataField: \"referenceId\" },\n  { fieldFsType: \"RecNbr\", referenceDataField: \"recordNumber\" },\n  { fieldFsType: \"RecNumber\", referenceDataField: \"recordNumber\" },\n  { fieldFsType: \"RecordNumber\", referenceDataField: \"recordNumber\" },\n  { fieldFsType: \"FileNumber\", referenceDataField: \"fileNumber\" },\n\n  { fieldFsType: \"DigitalFilmNumber\", referenceDataField: \"digitalFilmNumber\" },\n  { fieldFsType: \"FilmNumber\", referenceDataField: \"filmNumber\" },\n  { fieldFsType: \"ImageNbr\", referenceDataField: \"imageNumber\" },\n\n  { fieldFsType: \"PacketLtr\", referenceDataField: \"packetLetter\" },\n  { fieldFsType: \"PacketLetter\", referenceDataField: \"packetLetter\" },\n  { fieldFsType: \"SheetNumberLetter\", referenceDataField: \"sheetNumberLetter\" },\n  { fieldFsType: \"SheetNumber\", referenceDataField: \"sheetNumber\" },\n  { fieldFsType: \"SheetLtr\", referenceDataField: \"sheetLetter\" },\n  { fieldFsType: \"SourceSheetNbrLtr\", referenceDataField: \"sheetNumberLetter\" },\n  { fieldFsType: \"SourceSheetNbr\", referenceDataField: \"sheetNumber\" },\n  { fieldFsType: \"SourceSheetLtr\", referenceDataField: \"sheetLetter\" },\n\n  { fieldFsType: \"ExtFilmNbr\", referenceDataField: \"externalFilmNumber\" },\n  { fieldFsType: \"ExtPubNbr\", referenceDataField: \"externalPublicationNumber\" },\n  {\n    fieldFsType: \"ExtPubTitle\",\n    referenceDataField: \"externalPublicationTitle\",\n  },\n  { fieldFsType: \"ExtLineNbr\", referenceDataField: \"externalLineNumber\" },\n\n  // fields to ignore\n  { fieldFsType: \"UniqueId\" },\n  { fieldFsType: \"UniqueIdentifier\" },\n\n  { fieldFsType: \"EventPlaceLevel1Type\" },\n  { fieldFsType: \"EventPlaceLevel2Type\" },\n  { fieldFsType: \"EventPlaceLevel3Type\" },\n  { fieldFsType: \"EventPlaceLevel4Type\" },\n  { fieldFsType: \"EventPlaceLevel5Type\" },\n  { fieldFsType: \"EventPlaceLevelType\" },\n\n  { fieldFsType: \"EventPlaceLowestLevel\" },\n  { fieldFsType: \"EventCountry\", dataField: \"eventCountry\" },\n  { fieldFsType: \"EventCounty\", dataField: \"eventCounty\" },\n  { fieldFsType: \"EventState\", dataField: \"eventState\" },\n  { fieldFsType: \"EventDistrict\", dataField: \"eventDistrict\" },\n  { fieldFsType: \"EventCity\", dataField: \"eventCity\" },\n  { fieldFsType: \"MinorCivilDivision\" },\n\n  { fieldFsType: \"Evquarter\" },\n\n  { fieldFsType: \"ExtCountyCode\" },\n  { fieldFsType: \"CountyCode\" },\n  { fieldFsType: \"CountyId\" },\n  { fieldFsType: \"FolioNo\" },\n  { fieldFsType: \"DigitalFilmNumber\" },\n  { fieldFsType: \"FilmNumber\" },\n  { fieldFsType: \"ImageApid\" },\n  { fieldFsType: \"ImageId\" },\n  { fieldFsType: \"PpqId\" },\n  { fieldFsType: \"RecordGroup\" },\n  { fieldFsType: \"SortKey\" },\n  { fieldFsType: \"HouseholdId\" },\n  { fieldFsType: \"RelationshipToHeadCode\" },\n  { fieldFsType: \"SourceHouseholdId\" },\n\n  { fieldFsType: \"ExtData\" },\n  { fieldFsType: \"ExtLineNbrSuf\" },\n  { fieldFsType: \"ExtOccupationCode\" },\n  { fieldFsType: \"ExtPrBirPlaceCode\" },\n  { fieldFsType: \"ExtUarn\" },\n  { fieldFsType: \"ExtUrn\" },\n  { fieldFsType: \"ExtUrprn\" },\n\n  { fieldFsType: \"ExtAdditionalEntryFlag\" },\n  { fieldFsType: \"ExtLineNbr\" },\n  { fieldFsType: \"ExtPageCode\" },\n  { fieldFsType: \"ExtRefNbr\" },\n  { fieldFsType: \"AdditionalRelativesFlag\" },\n  { fieldFsType: \"TravelerTitle\" },\n  { fieldFsType: \"TravelerName\" },\n\n  { fieldFsType: \"Names\" }, // used for \"OTHER_NAMES\" label text\n\n  { fieldFsType: \"SourceDocumentType\" },\n  { fieldFsType: \"SourcePageType\" },\n  { fieldFsType: \"SourcePieceNbr\" },\n  { fieldFsType: \"SourceRecordType\" },\n  { fieldFsType: \"SourceScheduleType\" },\n  { fieldFsType: \"SourceComposite\" },\n  { fieldFsType: \"SourceBookNbr\" },\n  { fieldFsType: \"SourcePostalCode\" },\n  { fieldFsType: \"SystemOfOrigin\" },\n\n  { fieldFsType: \"RecordVersion\" },\n  { fieldFsType: \"UserModified\" },\n  { fieldFsType: \"CdsBatchId\" },\n  { fieldFsType: \"PublicationStatus\" },\n  { fieldFsType: \"PublishableUnit\" },\n\n  { fieldFsType: \"UdeBatchNumber\" },\n  { fieldFsType: \"BatchId\" },\n  { fieldFsType: \"BatchLocality\" },\n  { fieldFsType: \"Folder\" },\n  { fieldFsType: \"FolderImageSequence\" },\n  { fieldFsType: \"FolderImageSeq\" },\n\n  { fieldFsType: \"DasVerify\" }, // a date\n  { fieldFsType: \"EasyImageId\" },\n  { fieldFsType: \"RecordId\" },\n  { fieldFsType: \"ProjectId\" },\n  { fieldFsType: \"CtlFileId\" },\n  { fieldFsType: \"ImsImageId\" },\n  { fieldFsType: \"Language\" },\n  { fieldFsType: \"VerifyOrProofCode\" },\n  { fieldFsType: \"VerifyOrProofCode\" },\n\n  { fieldFsTypeRegEx: /^Pr[A-Z]/ },\n  { fieldFsTypeRegEx: /^Ed[A-Z]/ },\n  { fieldFsTypeRegEx: /Css$/ }, // fields with type ending \"Css\" can be ignored\n\n  { fieldFsTypePrefix: \"OtherOnPageNameGn\" },\n  { fieldFsTypePrefix: \"OtherOnPageNameSurn\" },\n  { fieldFsTypePrefix: \"OtherOnPageUrl\" },\n\n  { fieldFsTypePrefix: \"Ext\" },\n  { fieldFsTypePrefix: \"Fs\" },\n  { fieldFsTypePrefix: \"Idx\" },\n  { fieldFsTypePrefix: \"Nara\" },\n\n  // catchAll\n  {\n    recordDataFieldUseFsType: true,\n    recordDataFieldUseGcType: true,\n    valueType: \"Interpreted\",\n  },\n];\n\nfunction doesFieldDataMatch(entry, result, field, sourceSection) {\n  if (entry.sourceSection) {\n    if (entry.sourceSection != sourceSection) {\n      return false;\n    }\n  }\n\n  if (entry.fieldFsType) {\n    let match = false;\n    const fsTypePrefix = \"http://familysearch.org/types/fields/\";\n    if (field.type && field.type.startsWith(fsTypePrefix)) {\n      let fieldFsType = field.type.substring(fsTypePrefix.length);\n      if (fieldFsType == entry.fieldFsType) {\n        match = true;\n      }\n    }\n    if (!match) {\n      return false;\n    }\n  }\n\n  if (entry.fieldFsTypePrefix) {\n    let match = false;\n    const fsTypePrefix = \"http://familysearch.org/types/fields/\";\n    if (field.type && field.type.startsWith(fsTypePrefix)) {\n      let fieldFsType = field.type.substring(fsTypePrefix.length);\n      if (fieldFsType.startsWith(entry.fieldFsTypePrefix)) {\n        match = true;\n      }\n    }\n    if (!match) {\n      return false;\n    }\n  }\n\n  if (entry.fieldFsTypeRegEx) {\n    let match = false;\n    const fsTypePrefix = \"http://familysearch.org/types/fields/\";\n    if (field.type && field.type.startsWith(fsTypePrefix)) {\n      let fieldFsType = field.type.substring(fsTypePrefix.length);\n      if (entry.fieldFsTypeRegEx.test(fieldFsType)) {\n        match = true;\n      }\n    }\n    if (!match) {\n      return false;\n    }\n  }\n\n  if (entry.fieldGcType) {\n    let match = false;\n    const gcTypePrefix = \"http://gedcomx.org/\";\n    if (field.type && field.type.startsWith(gcTypePrefix)) {\n      let fieldGcType = field.type.substring(gcTypePrefix.length);\n      if (fieldGcType == entry.fieldGcType) {\n        match = true;\n      }\n    }\n    if (!match) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction determineFieldValue(entry, field) {\n  if (!field.values || field.values.length < 1) {\n    return undefined;\n  }\n\n  let valueObj = field.values[0];\n  if (field.values.length > 1 && entry.valueType) {\n    // there can be an orig and an interpreted for example\n    for (let value of field.values) {\n      let valueType = value.type;\n      const gcTypePrefix = \"http://gedcomx.org/\";\n      if (valueType.startsWith(gcTypePrefix)) {\n        valueType = valueType.substring(gcTypePrefix.length);\n      }\n      if (valueType == entry.valueType) {\n        valueObj = value;\n        break;\n      }\n    }\n  }\n\n  return valueObj;\n}\n\nfunction addFieldDataValue(entry, result, field, valueObj) {\n  let value = valueObj.text;\n  if (!value) {\n    return;\n  }\n\n  if (entry.dataField) {\n    result[entry.dataField] = value;\n  }\n\n  let recordDataAdded = false;\n  if (entry.recordDataField) {\n    if (!result.recordData) {\n      result.recordData = {};\n    }\n    result.recordData[entry.recordDataField] = value;\n    recordDataAdded = true;\n  }\n\n  if (!recordDataAdded && entry.recordDataFieldUseFsType) {\n    let fieldType = undefined;\n    const fsTypePrefix = \"http://familysearch.org/types/fields/\";\n    if (field.type && field.type.startsWith(fsTypePrefix)) {\n      fieldType = field.type.substring(fsTypePrefix.length);\n    }\n\n    if (fieldType) {\n      let fieldName = fieldType.replace(/([a-z])([A-Z])/g, \"$1 $2\");\n\n      if (!result.recordData) {\n        result.recordData = {};\n      }\n      result.recordData[fieldName] = value;\n      recordDataAdded = true;\n    }\n  }\n\n  if (!recordDataAdded && entry.recordDataFieldUseGcType) {\n    let fieldType = undefined;\n    const gcTypePrefix = \"http://gedcomx.org/\";\n    if (field.type && field.type.startsWith(gcTypePrefix)) {\n      fieldType = field.type.substring(gcTypePrefix.length);\n    }\n\n    if (fieldType) {\n      let fieldName = fieldType.replace(/([a-z])([A-Z])/g, \"$1 $2\");\n\n      if (!result.recordData) {\n        result.recordData = {};\n      }\n      result.recordData[fieldName] = value;\n      recordDataAdded = true;\n    }\n  }\n\n  if (entry.referenceDataField) {\n    if (!result.referenceData) {\n      result.referenceData = {};\n    }\n    result.referenceData[entry.referenceDataField] = value;\n  }\n}\n\nfunction processField(result, field, sourceSection) {\n  for (let entry of fieldData) {\n    if (doesFieldDataMatch(entry, result, field, sourceSection)) {\n      let valueObj = determineFieldValue(entry, field);\n      if (valueObj) {\n        addFieldDataValue(entry, result, field, valueObj);\n        break;\n      }\n    }\n  }\n}\n\nfunction processFields(result, fields, sourceSection) {\n  if (!fields) {\n    return;\n  }\n\n  for (let field of fields) {\n    processField(result, field, sourceSection);\n  }\n}\n\nfunction isFieldTypeValidForRecordData(type) {\n  const typesToExclude = [\n    \"SourcePieceFolio\",\n    \"SourceLineNbr\",\n    \"SourceRegNbr\",\n    \"SourceEntryNbr\",\n    \"SourcePageNbr\",\n    \"SourceBookNbr\",\n    \"SourceHouseholdId\",\n    \"HouseholdId\",\n    \"FolioNo\",\n    \"CountyId\",\n    \"RelationshipToHead\",\n    \"RelationshipToHeadCode\",\n  ];\n\n  for (let fieldType of typesToExclude) {\n    if (type == fieldType) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getFactType(fact) {\n  let factType = fact.type;\n  const fsTypePrefix = \"http://familysearch.org/types/facts/\";\n  const gcTypePrefix = \"http://gedcomx.org/\";\n  if (factType.startsWith(fsTypePrefix)) {\n    factType = factType.substring(fsTypePrefix.length);\n  } else if (factType.startsWith(gcTypePrefix)) {\n    factType = factType.substring(gcTypePrefix.length);\n  }\n  return factType;\n}\n\nfunction getFactTypeFromRecordType(recordType) {\n  let factType = recordType;\n  const gcTypePrefix = \"http://gedcomx.org/\";\n  if (factType.startsWith(gcTypePrefix)) {\n    factType = factType.substring(gcTypePrefix.length);\n  }\n  return factType;\n}\n\nfunction setEventDateAndPlaceForFact(result, fact) {\n  if (fact.date) {\n    if (fact.date.original) {\n      result.eventDateOriginal = fact.date.original;\n    }\n    setFieldFromDate(fact.date, \"/Date\", \"EVENT_DATE\", result, \"eventDate\");\n    setFieldFromDate(fact.date, \"/Year\", \"EVENT_YEAR\", result, \"eventYear\");\n  }\n  if (fact.place) {\n    if (fact.place.original) {\n      result.eventPlaceOriginal = fact.place.original;\n    }\n    setFieldFromPlace(fact.place, \"\", \"EVENT_PLACE\", result, \"eventPlace\");\n    setFieldFromPlace(fact.place, \"/RegistrationDistrict\", \"\", result, \"registrationDistrict\");\n    setFieldFromPlace(fact.place, \"\", \"EVENT_PLACE_LEVEL_3\", result, \"eventPlaceL3\");\n    setFieldFromPlace(fact.place, \"/County\", \"EVENT_PLACE_LEVEL_2\", result, \"eventPlaceL2\");\n    setFieldFromPlace(fact.place, \"/Country\", \"EVENT_PLACE_LEVEL_1\", result, \"eventPlaceL1\");\n  }\n}\n\nfunction setDateAndPlaceForAdditionalFact(result, fact) {\n  let factType = getFactType(fact);\n  let prefix = factType;\n  if (fact.date) {\n    let date = getCleanDateValueFromDate(fact.date, \"/Date\", \"EVENT_DATE\");\n    if (date) {\n      result.recordData[prefix + \" Date\"] = date;\n    }\n\n    if (fact.date.original && fact.date.original != date) {\n      result.recordData[prefix + \" Date (Original)\"] = fact.date.original;\n    }\n\n    if (!fact.date.original && !date) {\n      let year = getCleanDateValueFromDate(fact.date, \"/Year\", \"EVENT_YEAR\");\n      if (year) {\n        result.recordData[prefix + \" Year\"] = year;\n      }\n    }\n  }\n  if (fact.place) {\n    let place = getCleanPlaceValueFromPlace(fact.place, \"\", \"EVENT_PLACE\");\n    if (place) {\n      result.recordData[prefix + \" Place\"] = place;\n    }\n\n    if (fact.place.original && fact.place.original != place) {\n      result.recordData[prefix + \" Place (Original)\"] = fact.place.original;\n    }\n  }\n}\n\nfunction doesLabelOverride(labelId, usedLabelId) {\n  const overrides = {\n    PR_AGE: [\"PR_AGE_ORIG\", \"PR_AGE_IN_YEARS_ORIG\"],\n    PR_RELATIONSHIP_TO_HEAD: [\"PR_RELATIONSHIP_TO_HEAD_ORIG\"],\n  };\n\n  if (!labelId) {\n    return false;\n  }\n\n  if (!usedLabelId) {\n    return true;\n  }\n\n  let labelOverrides = overrides[labelId];\n  if (labelOverrides && labelOverrides.includes(usedLabelId)) {\n    return true;\n  }\n\n  return false;\n}\n\nvar usedLabelIds = {};\n\nfunction extractFields(result, fields, map) {\n  if (!fields) {\n    return;\n  }\n\n  for (let field of fields) {\n    let fieldType = field.type;\n    if (fieldType && field.values && field.values.length > 0) {\n      const fsTypePrefix = \"http://familysearch.org/types/fields/\";\n      const gcTypePrefix = \"http://gedcomx.org/\";\n      if (fieldType.startsWith(fsTypePrefix)) {\n        fieldType = fieldType.substring(fsTypePrefix.length);\n      } else if (fieldType.startsWith(gcTypePrefix)) {\n        fieldType = fieldType.substring(gcTypePrefix.length);\n      }\n\n      let resultProperty = map[fieldType];\n      if (resultProperty) {\n        for (let value of field.values) {\n          const labelId = value.labelId;\n          let doesOverride = doesLabelOverride(labelId, usedLabelIds[resultProperty]);\n\n          if (!result[resultProperty] || doesOverride) {\n            result[resultProperty] = value.text;\n            usedLabelIds[resultProperty] = labelId;\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction findPersonById(dataObj, personId) {\n  let persons = dataObj.persons;\n  if (persons) {\n    for (let person of persons) {\n      if (person.id == personId) {\n        return person;\n      }\n    }\n  }\n}\n\nfunction getPrimaryNameForm(person) {\n  let nameForms = [];\n  let nameArray = person.names;\n  if (nameArray && nameArray.length > 0) {\n    for (let name of nameArray) {\n      // this usually seems to be \"http://gedcomx.org/BirthName\" but can also be\n      // \"http://gedcomx.org/AlsoKnownAs\" which we ignore\n      let nameType = name.type;\n      if (nameType == \"http://gedcomx.org/BirthName\") {\n        for (let nameForm of name.nameForms) {\n          if (nameForm.parts) {\n            nameForms.push(nameForm);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  if (nameForms.length == 0) {\n    // for some record there are no parts - just a full name\n    if (nameArray && nameArray.length > 0) {\n      for (let name of nameArray) {\n        let nameType = name.type; // this always seems to be \"http://gedcomx.org/BirthName\"\n        if (name.nameForms && name.nameForms.length > 0) {\n          for (let nameForm of name.nameForms) {\n            if (nameForm.fields) {\n              nameForms.push(nameForm);\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  if (nameForms.length == 0) {\n    return undefined;\n  }\n  if (nameForms.length == 1) {\n    return nameForms[0];\n  }\n\n  // there was more than one. The later ones could be corrected names. But sometimes the\n  // corrected one is missing fields like fullName\n  let firstNameForm = nameForms[0];\n  let lastNameForm = nameForms[nameForms.length - 1];\n\n  if (!lastNameForm.fullText) {\n    let lastParts = {};\n    if (lastNameForm.parts) {\n      for (let part of lastNameForm.parts) {\n        if (part.type.endsWith(\"Given\")) {\n          lastParts.givenName = part.value;\n        } else if (part.type.endsWith(\"Surname\")) {\n          lastParts.surname = part.value;\n        }\n      }\n    }\n    if (lastParts.givenName && lastParts.surname) {\n      lastNameForm.fullText = lastParts.givenName + \" \" + lastParts.surname;\n    } else {\n      let firstParts = {};\n      if (firstNameForm.parts) {\n        for (let part of firstNameForm.parts) {\n          if (part.type.endsWith(\"Given\")) {\n            firstParts.givenName = part.value;\n          } else if (part.type.endsWith(\"Surname\")) {\n            firstParts.surname = part.value;\n          }\n        }\n      }\n\n      if (!lastParts.givenName && firstParts.givenName) {\n        lastParts.givenName = firstParts.givenName;\n      }\n      if (!lastParts.surname && firstParts.surname) {\n        lastParts.surname = firstParts.surname;\n      }\n\n      if (lastParts.givenName && lastParts.surname) {\n        lastNameForm.fullText = lastParts.givenName + \" \" + lastParts.surname;\n      } else {\n        // still can't make full name\n        if (firstNameForm.fullText) {\n          lastNameForm.fullText = firstNameForm.fullText;\n        }\n      }\n    }\n  }\n\n  return lastNameForm;\n}\n\nfunction getNameForPersonObj(person, result) {\n  let nameForm = getPrimaryNameForm(person);\n  if (nameForm) {\n    if (nameForm.fullText) {\n      result.fullName = nameForm.fullText;\n    }\n    if (nameForm.parts) {\n      for (let part of nameForm.parts) {\n        if (part.value) {\n          if (part.type.endsWith(\"Given\")) {\n            result.givenName = part.value;\n          } else if (part.type.endsWith(\"Surname\")) {\n            result.surname = part.value;\n          } else if (part.type.endsWith(\"Prefix\")) {\n            result.prefix = part.value;\n          } else if (part.type.endsWith(\"Suffix\")) {\n            result.suffix = part.value;\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction getGenderForPersonObj(person, result) {\n  // get gender\n  if (person.gender) {\n    if (person.gender.type.endsWith(\"/Male\")) {\n      result.gender = \"male\";\n    } else if (person.gender.type.endsWith(\"/Female\")) {\n      result.gender = \"female\";\n    }\n  }\n}\n\nfunction processRecordDataFactsForPersonObj(person, result) {\n  // check the facts of this primary person for this persons vitals\n  if (person.facts) {\n    for (let fact of person.facts) {\n      // the fact contains the place etc\n      // it gets complicated when there is more than one person.\n      // .principal seems to be whether they are one of the people being recorded\n      // In a census all the people in the household are principals\n      // In a birth registration the child is a principal and the mother is not\n      if (fact.type) {\n        let factType = getFactType(fact);\n        if (fact.primary) {\n          result.factType = factType;\n          setEventDateAndPlaceForFact(result, fact);\n        }\n\n        //console.log(\"factType is \" + factType);\n        if (factType == \"Birth\") {\n          //console.log(\"type is birth\");\n          if (fact.date) {\n            if (fact.date.original) {\n              result.birthDateOriginal = fact.date.original;\n            }\n            setFieldFromDate(fact.date, \"/Date\", \"PR_BIR_DATE_EST\", result, \"birthDate\");\n            setFieldFromDate(fact.date, \"/Year\", \"PR_BIR_YEAR_EST\", result, \"birthYear\");\n          }\n          if (fact.place) {\n            setFieldFromPlaceWithLabels(\n              fact.place,\n              [\n                \"PR_BIR_PLACE\",\n                \"PR_BIR_PLACE_ORIG\",\n                \"PR_BIRTH_PLACE\",\n                \"PR_BIRTH_PLACE_ORIG\",\n                \"BIRTH_PLACE\",\n                \"BIRTH_PLACE_ORIG\",\n              ],\n              result,\n              \"birthPlace\"\n            );\n            if (!result.birthPlace && !person.principal) {\n              // this birth information about a non-principal. e.g. the birth place of father\n              // in a child's birth or death record. The label could be something like:\n              // PR_FTHR_BIRTH_PLACE\n              setFieldFromPlace(fact.place, \"\", \"\", result, \"birthPlace\");\n            }\n          }\n        } else if (factType == \"Death\") {\n          if (fact.date) {\n            if (fact.date.original) {\n              result.deathDateOriginal = fact.date.original;\n            }\n            setFieldFromDate(fact.date, \"/Date\", \"PR_DEA_DATE\", result, \"deathDate\");\n            if (!result.deathDate) {\n              setFieldFromDate(fact.date, \"/Date\", \"PR_DEA_DATE_EST\", result, \"deathDate\");\n            }\n            if (!result.deathDate) {\n              setFieldFromDate(fact.date, \"/Date\", \"PR_DEA_DATE_ORIG\", result, \"deathDate\");\n            }\n            setFieldFromDate(fact.date, \"/Year\", \"PR_DEA_YEAR_EST\", result, \"deathYear\");\n            setFieldFromDate(fact.date, \"/Month\", \"PR_DEA_MONTH\", result, \"deathMonth\");\n          }\n          if (fact.place) {\n            setFieldFromPlace(fact.place, \"\", \"PR_DEA_PLACE\", result, \"deathPlace\");\n          }\n        } else if (factType == \"Residence\" || factType == \"Census\") {\n          if (fact.place) {\n            setFieldFromPlace(fact.place, \"\", \"NOTE_PR_RES_PLACE\", result, \"residence\");\n          }\n        }\n\n        // build up record data that could be included in a data table\n        addRecordDataForFact(result, fact, factType);\n      }\n    }\n  }\n}\n\nfunction processPersonPageFactsForPersonObj(person, result) {\n  // check the facts of this primary person for this persons vitals\n  if (person.facts) {\n    for (let fact of person.facts) {\n      // the fact contains the place etc\n      // it gets complicated when there is more than one person.\n      // .principal seems to be whether they are one of the people being recorded\n      // In a census all the people in the household are principals\n      // In a birth registration the child is a principal and the mother is not\n      if (fact.type) {\n        let factType = getFactType(fact);\n\n        //console.log(\"factType is \" + factType);\n        if (factType == \"Birth\") {\n          //console.log(\"type is birth\");\n          if (fact.date) {\n            if (fact.date.original) {\n              result.birthDateOriginal = fact.date.original;\n            }\n            setFieldFromDate(fact.date, \"/Date\", \"PR_BIR_DATE_EST\", result, \"birthDate\");\n            setFieldFromDate(fact.date, \"/Year\", \"PR_BIR_YEAR_EST\", result, \"birthYear\");\n          }\n          if (fact.place) {\n            if (fact.place.original) {\n              result.birthPlaceOriginal = fact.place.original;\n            }\n            setFieldFromPlaceWithLabels(\n              fact.place,\n              [\n                \"PR_BIR_PLACE\",\n                \"PR_BIR_PLACE_ORIG\",\n                \"PR_BIRTH_PLACE\",\n                \"PR_BIRTH_PLACE_ORIG\",\n                \"BIRTH_PLACE\",\n                \"BIRTH_PLACE_ORIG\",\n              ],\n              result,\n              \"birthPlace\"\n            );\n          }\n        } else if (factType == \"Death\") {\n          if (fact.date) {\n            if (fact.date.original) {\n              result.deathDateOriginal = fact.date.original;\n            }\n            setFieldFromDate(fact.date, \"/Date\", \"PR_DEA_DATE\", result, \"deathDate\");\n            if (!result.deathDate) {\n              setFieldFromDate(fact.date, \"/Date\", \"PR_DEA_DATE_EST\", result, \"deathDate\");\n            }\n            if (!result.deathDate) {\n              setFieldFromDate(fact.date, \"/Date\", \"PR_DEA_DATE_ORIG\", result, \"deathDate\");\n            }\n            setFieldFromDate(fact.date, \"/Year\", \"PR_DEA_YEAR_EST\", result, \"deathYear\");\n            setFieldFromDate(fact.date, \"/Month\", \"PR_DEA_MONTH\", result, \"deathMonth\");\n          }\n          if (fact.place) {\n            if (fact.place.original) {\n              result.deathPlaceOriginal = fact.place.original;\n            }\n            setFieldFromPlace(fact.place, \"\", \"PR_DEA_PLACE\", result, \"deathPlace\");\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction addParentFromPerson(otherPerson, result) {\n  // look for their name\n  let parent = {};\n  let nameForm = getPrimaryNameForm(otherPerson);\n  if (nameForm) {\n    parent.fullName = nameForm.fullText;\n    if (nameForm.parts) {\n      for (let part of nameForm.parts) {\n        if (part.type.endsWith(\"Given\")) {\n          parent.givenName = part.value;\n        } else if (part.type.endsWith(\"Surname\")) {\n          parent.surname = part.value;\n        }\n      }\n    }\n  }\n\n  if (otherPerson.gender) {\n    if (otherPerson.gender.type.endsWith(\"/Male\")) {\n      // it is the father\n      result.father = parent;\n    } else if (otherPerson.gender.type.endsWith(\"/Female\")) {\n      result.mother = parent;\n    }\n  }\n}\n\nfunction extractPersonDataFromFetch(document, dataObj, options) {\n  let result = {};\n\n  if (document) {\n    result.url = document.URL;\n  }\n\n  // there could be many people in this data, the description is one way to find out which\n  // is the one that is being focused on\n  let description = dataObj.description;\n\n  if (!description) {\n    // this could be an image page which is not handled currently\n    return result;\n  }\n\n  // For a person page the descript will be something like: \"#SD-G8S8-5FJ\" meaning the personId is:\n  // \"G8S8-5FJ\"\n  let personId = description.replace(/^\\#SD\\-/, \"\");\n\n  if (!dataObj.persons || dataObj.persons.length < 1) {\n    return result;\n  }\n\n  let person = dataObj.persons[0];\n\n  if (person.id != personId) {\n    return result;\n  }\n\n  getNameForPersonObj(person, result);\n  getGenderForPersonObj(person, result);\n  processPersonPageFactsForPersonObj(person, result);\n\n  // now look for relationships for spouse and parents\n  if (dataObj.relationships) {\n    for (let relationship of dataObj.relationships) {\n      let otherPersonId = \"\";\n      let type = relationship.type;\n      if (relationship.person1.resourceId == personId) {\n        otherPersonId = relationship.person2.resourceId;\n      } else if (relationship.person2.resourceId == personId) {\n        otherPersonId = relationship.person1.resourceId;\n      }\n\n      if (otherPersonId) {\n        let otherPerson = findPersonById(dataObj, otherPersonId);\n\n        if (type == \"http://gedcomx.org/Couple\") {\n          let spouse = {};\n          getNameForPersonObj(otherPerson, spouse);\n\n          if (relationship.facts) {\n            for (let fact of relationship.facts) {\n              if (fact.type == \"http://gedcomx.org/Marriage\") {\n                if (fact.date) {\n                  if (fact.date.original) {\n                    spouse.marriageDateOriginal = fact.date.original;\n                  }\n                  if (fact.date.normalized) {\n                    for (let normDate of fact.date.normalized) {\n                      if (normDate.value && normDate.lang == \"en\") {\n                        spouse.marriageDate = normDate.value;\n                        break;\n                      }\n                    }\n                  }\n                }\n                if (fact.place) {\n                  if (fact.place.original) {\n                    spouse.marriagePlaceOriginal = fact.place.original;\n                  }\n                  if (fact.place.normalized) {\n                    for (let normPlace of fact.place.normalized) {\n                      if (normPlace.value && normPlace.lang == \"en\") {\n                        spouse.marriagePlace = normPlace.value;\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          if (!result.spouses) {\n            result.spouses = [];\n          }\n          result.spouses.push(spouse);\n        } else if (type == \"http://gedcomx.org/ParentChild\") {\n          if (relationship.person2.resourceId == personId) {\n            // this person is the child\n            addParentFromPerson(otherPerson, result);\n          }\n        }\n      }\n    }\n  }\n\n  result.pageType = \"person\";\n  return result;\n}\n\nfunction extractDataFromFetch(document, dataObj, fetchType, options) {\n\n    console.log(\"enter fs.extractDataFromFetch, fetchType=\" + fetchType)\n    console.log(dataObj);\n\n  usedLabelIds = {};\n\n  let result = {};\n\n  if (document) {\n    result.url = document.URL;\n  }\n\n  if (fetchType == \"person\") {\n    return extractPersonDataFromFetch(document, dataObj, options);\n  }\n\n  // there could be many people in this data, the description is one way to find out which\n  // is the one that is being focused on\n  let description = dataObj.description;\n\n  if (!description) {\n    // this could be an image page which is not handled currently\n    return result;\n  }\n\n  let personId = description.replace(/^.*(p_\\d*)$/, \"$1\");\n\n  let personIdWithRelatedFact = undefined;\n  let relatedPersonFactType = undefined;\n\n  result.recordData = {};\n\n  let thisPersonIsAPrincipal = false;\n\n  let persons = dataObj.persons;\n  if (persons) {\n    for (let person of persons) {\n      if (person.id == personId) {\n        // this is the person that the page is about\n        getNameForPersonObj(person, result);\n        if (result.fullName) {\n          result.recordData[\"Name\"] = result.fullName;\n        }\n\n        getGenderForPersonObj(person, result);\n        processRecordDataFactsForPersonObj(person, result);\n\n        // check the fields associated with this person\n        if (person.fields) {\n          processFields(result, person.fields, \"primaryPerson\");\n        }\n      }\n      if (person.facts) {\n        for (let fact of person.facts) {\n          // the fact contains the place etc\n          // it gets complicated when there is more than one person.\n          // .principal seems to be whether they are one of the people being recorded\n          // In a census all the people in the household are principals\n          // In a birth registration the child is a principal and the mother is not\n          if (fact.type) {\n            let factType = getFactType(fact);\n\n            if (fact.primary) {\n              setEventDateAndPlaceForFact(result, fact);\n\n              if (person.principal) {\n                if (person.id == personId) {\n                  thisPersonIsAPrincipal = true;\n                  // forget any other person who was a principal\n                  personIdWithRelatedFact = undefined;\n                  relatedPersonFactType = undefined;\n                } else if (!thisPersonIsAPrincipal && !personIdWithRelatedFact) {\n                  // We have a fact type but it is not for the person of interest\n                  // This is the first such case we have found\n                  relatedPersonFactType = factType;\n                  personIdWithRelatedFact = person.id;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  let relationships = dataObj.relationships;\n  if (relationships) {\n    let personIdWithRelatedFact2 = undefined;\n    // go through thelist one looking for relationships with facts\n    // we need to do this before looking at the relationships with no facts since we need the\n    // factType to process those.\n    for (let relationship of relationships) {\n      if (relationship.facts) {\n        for (let fact of relationship.facts) {\n          if (fact.type && !result.factType) {\n            let factType = getFactType(fact);\n\n            if (fact.primary) {\n              setEventDateAndPlaceForFact(result, fact);\n            }\n\n            // if one of the people in this fact is the selected person\n            if (relationship.person1.resourceId == personId || relationship.person2.resourceId == personId) {\n              result.factType = factType;\n\n              // build up record data that could be included in a data table\n              addRecordDataForFact(result, fact, factType);\n\n              // if this is a marriage then add a spouse if possible\n              if (factType.startsWith(\"Marriage\")) {\n                let otherPersonId = relationship.person2.resourceId;\n                if (relationship.person2.resourceId == personId) {\n                  otherPersonId = relationship.person1.resourceId;\n                }\n\n                let otherPerson = findPersonById(dataObj, otherPersonId);\n\n                if (otherPerson) {\n                  // look for their name\n                  let nameForm = getPrimaryNameForm(otherPerson);\n                  if (nameForm) {\n                    result.spouseFullName = nameForm.fullText;\n                    if (nameForm.parts) {\n                      for (let part of nameForm.parts) {\n                        if (part.type.endsWith(\"Given\")) {\n                          result.spouseGivenName = part.value;\n                        } else if (part.type.endsWith(\"Surname\")) {\n                          result.spouseSurname = part.value;\n                        }\n                      }\n                    }\n                  }\n\n                  if (otherPerson.fields) {\n                    const personFieldsMap = {\n                      Age: \"spouseAge\",\n                    };\n                    extractFields(result, otherPerson.fields, personFieldsMap);\n                  }\n                }\n              }\n            } else if (!personIdWithRelatedFact) {\n              relatedPersonFactType = factType;\n              personIdWithRelatedFact = relationship.person1.resourceId;\n              personIdWithRelatedFact2 = relationship.person2.resourceId;\n            }\n          } else if (fact.type) {\n            // we already have a factType for the result and we have found a new fact\n            // It could contain useful dates and places so don't ignore it. For example:\n            // https://www.familysearch.org/ark:/61903/1:1:QVJ8-SFH9?from=lynx1UIV8&treeref=L8PL-J4M\n            // The main (primary) fact (MarriageRegistration) has no date. But there is a Marriage\n            // fact with a date.\n            setDateAndPlaceForAdditionalFact(result, fact);\n          }\n        }\n      }\n    }\n\n    // go through the list a second time looking for relationships with no facts\n    for (let relationship of relationships) {\n      if (!relationship.facts) {\n        // relationship has no fact. this tends to be the case for a baptism or christening and\n        // we need these relationships to find the parents\n        if (\n          result.factType == \"Christening\" ||\n          result.factType == \"Baptism\" ||\n          result.factType == \"Birth\" ||\n          result.factType == \"Death\" ||\n          result.factType == \"Marriage\"\n        ) {\n          // if one of the people in this fact is the selected person\n          let otherPersonId = undefined;\n          if (relationship.person1.resourceId == personId) {\n            otherPersonId = relationship.person2.resourceId;\n          } else if (relationship.person2.resourceId == personId) {\n            otherPersonId = relationship.person1.resourceId;\n          }\n          if (otherPersonId) {\n            let otherPerson = findPersonById(dataObj, otherPersonId);\n            if (otherPerson) {\n              let relationType = relationship.type;\n              if (relationType.endsWith(\"/ParentChild\")) {\n                // other person is either father or mother\n                addParentFromPerson(otherPerson, result);\n              } else if (relationType.endsWith(\"/Couple\")) {\n                // other person is spouse\n                // look for their name\n                let nameForm = getPrimaryNameForm(otherPerson);\n                if (nameForm) {\n                  result.spouseFullName = nameForm.fullText;\n                  if (nameForm.parts) {\n                    for (let part of nameForm.parts) {\n                      if (part.type.endsWith(\"Given\")) {\n                        result.spouseGivenName = part.value;\n                      } else if (part.type.endsWith(\"Surname\")) {\n                        result.spouseSurname = part.value;\n                      }\n                    }\n                  }\n                }\n                if (otherPerson.fields) {\n                  const personFieldsMap = {\n                    Age: \"spouseAge\",\n                  };\n                  extractFields(result, otherPerson.fields, personFieldsMap);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (relatedPersonFactType) {\n      // go through relationships again looking for the relationship\n      // We have three possible person IDs that are principal to the fact:\n      // personIdWithRelatedFact (usually set for a child death/baptism, or could be bride or groom)\n      // personIdWithRelatedFact2 (usually set for a child marriage - will be bride or groom)\n      result.relatedPersonFactType = relatedPersonFactType;\n\n      let otherPersonId = undefined;\n      for (let relationship of relationships) {\n        let relationType = undefined;\n        if (relationship.person1.resourceId == personId) {\n          // This relationship involves the selected person\n          otherPersonId = relationship.person2.resourceId;\n          if (otherPersonId == personIdWithRelatedFact || otherPersonId == personIdWithRelatedFact2) {\n            // person 2 of this relationship is the person that the fact is about and is related to our person\n            relationType = relationship.type;\n            if (relationType.endsWith(\"/ParentChild\")) {\n              result.relationshipToFactPerson = \"Parent\";\n            } else if (relationType.endsWith(\"/Couple\")) {\n              result.relationshipToFactPerson = \"Spouse\";\n            }\n          }\n        } else if (relationship.person2.resourceId == personId) {\n          otherPersonId = relationship.person1.resourceId;\n          if (otherPersonId == personIdWithRelatedFact || otherPersonId == personIdWithRelatedFact2) {\n            // person 1 of this relationship is the person that the fact is about and is related to our person\n            relationType = relationship.type;\n            if (relationType.endsWith(\"/ParentChild\")) {\n              result.relationshipToFactPerson = \"Child\";\n            } else if (relationType.endsWith(\"/Couple\")) {\n              result.relationshipToFactPerson = \"Spouse\";\n            }\n          }\n        }\n\n        if (result.relationshipToFactPerson) {\n          let otherPerson = findPersonById(dataObj, otherPersonId);\n\n          if (otherPerson) {\n            // look for their name\n            let nameForm = getPrimaryNameForm(otherPerson);\n            if (nameForm) {\n              result.relatedPersonFullName = nameForm.fullText;\n              if (nameForm.parts) {\n                for (let part of nameForm.parts) {\n                  if (part.type.endsWith(\"Given\")) {\n                    result.relatedPersonGivenName = part.value;\n                  } else if (part.type.endsWith(\"Surname\")) {\n                    result.relatedPersonSurname = part.value;\n                  }\n                }\n              }\n            }\n\n            // get gender\n            if (otherPerson.gender) {\n              if (otherPerson.gender.type.endsWith(\"/Male\")) {\n                result.relatedPersonGender = \"male\";\n              } else if (otherPerson.gender.type.endsWith(\"/Female\")) {\n                result.relatedPersonGender = \"female\";\n              }\n            }\n\n            if (relatedPersonFactType == \"Marriage\") {\n              let spouse = undefined;\n\n              if (otherPersonId == personIdWithRelatedFact && personIdWithRelatedFact2) {\n                spouse = findPersonById(dataObj, personIdWithRelatedFact2);\n              } else if (otherPersonId == personIdWithRelatedFact2 && personIdWithRelatedFact) {\n                spouse = findPersonById(dataObj, personIdWithRelatedFact);\n              }\n\n              if (spouse) {\n                let nameForm = getPrimaryNameForm(spouse);\n                if (nameForm) {\n                  result.relatedPersonSpouseFullName = nameForm.fullText;\n                  if (nameForm.parts) {\n                    for (let part of nameForm.parts) {\n                      if (part.type.endsWith(\"Given\")) {\n                        result.relatedPersonSpouseGivenName = part.value;\n                      } else if (part.type.endsWith(\"Surname\")) {\n                        result.relatedPersonSpouseSurname = part.value;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          break; // we have found the relationship and set relationshipToFactPerson\n        }\n      }\n    }\n  }\n\n  // build household table for census\n  if (result.factType == \"Census\" || (result.factType == \"Residence\" && persons.length > 1)) {\n    let persons = dataObj.persons;\n\n    result.household = {};\n    result.household.headings = [\n      \"fullName\",\n      \"givenName\",\n      \"surname\",\n      \"relationship\",\n      \"maritalStatus\",\n      \"gender\",\n      \"age\",\n      \"occupation\",\n      \"birthDateOriginal\",\n      \"birthYear\",\n      \"birthPlaceOriginal\",\n      \"birthPlace\",\n    ];\n    result.household.members = [];\n\n    for (let person of persons) {\n      let member = {};\n\n      if (person.id == personId) {\n        member.isSelected = true;\n      }\n\n      // look for their name\n      if (person.names) {\n        let nameForm = getPrimaryNameForm(person);\n        if (nameForm) {\n          member.fullName = nameForm.fullText;\n          if (nameForm.parts) {\n            for (let part of nameForm.parts) {\n              if (part.type.endsWith(\"Given\")) {\n                member.givenName = part.value;\n              } else if (part.type.endsWith(\"Surname\")) {\n                member.surname = part.value;\n              }\n            }\n          }\n        }\n      } else {\n        member.isClosed = true;\n      }\n\n      // get gender\n      if (person.gender) {\n        if (person.gender.type.endsWith(\"/Male\")) {\n          member.gender = \"male\";\n        } else if (person.gender.type.endsWith(\"/Female\")) {\n          member.gender = \"female\";\n        }\n      }\n\n      // check the facts of this primary person for this persons vitals\n      if (person.facts) {\n        for (let fact of person.facts) {\n          if (fact.type) {\n            let factType = getFactType(fact);\n\n            //console.log(\"factType is \" + factType);\n            if (factType == \"Birth\") {\n              //console.log(\"type is birth\");\n              if (fact.date) {\n                if (fact.date.original) {\n                  member.birthDateOriginal = fact.date.original;\n                }\n                setFieldFromDate(fact.date, \"/Date\", \"PR_BIR_DATE_EST\", member, \"birthDate\");\n                setFieldFromDate(fact.date, \"/Year\", \"PR_BIR_YEAR_EST\", member, \"birthYear\");\n              }\n              if (fact.place) {\n                if (fact.place.original) {\n                  member.birthPlaceOriginal = fact.place.original;\n                }\n                setFieldFromPlace(fact.place, \"\", \"PR_BIR_PLACE\", member, \"birthPlace\");\n              }\n            } else if (factType == \"MaritalStatus\") {\n              if (fact.value) {\n                member.maritalStatus = fact.value;\n              }\n            } else if (factType == \"Occupation\") {\n              if (fact.value) {\n                member.occupation = fact.value;\n              }\n            } else if (factType == \"Age\") {\n              if (fact.values) {\n                for (let value of fact.values) {\n                  if (value.labelId == \"PR_AGE\") {\n                    member.age = value.text;\n                  }\n                }\n              }\n            } else if (factType == \"RelationshipToHead\") {\n              if (fact.values) {\n                for (let value of fact.values) {\n                  if (value.labelId == \"PR_RELATIONSHIP_TO_HEAD_ORIG\") {\n                    member.relationship = value.text;\n                  }\n                }\n              }\n            } else if (factType == \"RelationshipToHeadCode\" && !member.relationship) {\n              if (fact.values) {\n                for (let value of fact.values) {\n                  if (value.labelId == \"PR_RELATIONSHIP_CODE\") {\n                    member.relationship = value.text;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (person.fields) {\n        const personFieldsMap = {\n          Age: \"age\",\n          RelationshipToHeadCode: \"relationship\",\n          RelationshipToHead: \"relationship\",\n          Relationship: \"relationship\",\n          SourceSheetNbr: \"sheetNumber\",\n          SourceLineNbr: \"lineNumber\",\n        };\n        extractFields(member, person.fields, personFieldsMap);\n      }\n\n      result.household.members.push(member);\n    }\n\n    // The members can be in a different order to how they appear in the census\n    // I have only seen this in the US 1940 Federal Census. E.g. us_census_1940_addie_bullock\n    // if we have line numbers we can reorder them\n    let hasLineNumbers = true;\n    for (let member of result.household.members) {\n      if (!member.lineNumber) {\n        hasLineNumbers = false;\n        break;\n      }\n      if (isNaN(Number(member.lineNumber))) {\n        hasLineNumbers = false;\n        break;\n      }\n    }\n    let hasSheetNumbers = true;\n    for (let member of result.household.members) {\n      if (!member.sheetNumber) {\n        hasSheetNumbers = false;\n        break;\n      }\n      if (isNaN(Number(member.sheetNumber))) {\n        hasSheetNumbers = false;\n        break;\n      }\n    }\n\n    if (hasLineNumbers && hasSheetNumbers) {\n      // sort by line number\n      result.household.members.sort(function (a, b) {\n        let sheetDiff = Number(a.sheetNumber) - Number(b.sheetNumber);\n        let lineDiff = Number(a.lineNumber) - Number(b.lineNumber);\n        if (sheetDiff === 0) {\n          return lineDiff;\n        }\n        return sheetDiff;\n      });\n    } else if (hasLineNumbers) {\n      // sort by line number\n      result.household.members.sort((a, b) => (Number(a.lineNumber) > Number(b.lineNumber) ? 1 : -1));\n    }\n\n    // now remove any line numbers as we don't need them in the extracted data\n    for (let member of result.household.members) {\n      delete member.lineNumber;\n      delete member.sheetNumber;\n    }\n  }\n\n  processFields(result, dataObj.fields, \"topLevel\");\n\n  if (dataObj.sourceDescriptions) {\n    for (let source of dataObj.sourceDescriptions) {\n      // there are different source descriptions for different people or records\n      if (source.id && source.id.endsWith(personId)) {\n        if (source.citations && source.citations.length > 0) {\n          result.citation = source.citations[0].value.trim();\n        }\n        if (source.titles && source.titles.length > 0) {\n          result.sourceTitleForPerson = source.titles[0].value;\n        }\n        result.personRecordUrl = source.about;\n      }\n\n      if (source.resourceType) {\n        if (source.resourceType.endsWith(\"Collection\")) {\n          if (source.titles && source.titles.length > 0) {\n            result.collectionTitle = source.titles[0].value;\n          }\n          // The US 1950 census doesn't have the collection Id in the normal place\n          if (!result.fsCollectionId) {\n            if (source.about && source.about.indexOf(\"/records/collections/\") != -1) {\n              let collectionId = source.about.replace(/^.*\\/records\\/collections\\/(\\d+)$/, \"$1\");\n              if (collectionId && collectionId != source.about) {\n                result.fsCollectionId = collectionId;\n              }\n            }\n          }\n          if (!result.fsCollectionId) {\n            // example:\n            //       \"http://gedcomx.org/Primary\" : [ \"https://api.familysearch.org/platform/records/collections/4464515\" ]\n            if (source.identifiers && source.identifiers[\"http://gedcomx.org/Primary\"]) {\n              let idArray = source.identifiers[\"http://gedcomx.org/Primary\"];\n              if (idArray.length > 0 && idArray[0]) {\n                let collectionId = idArray[0].replace(/^.*\\/records\\/collections\\/(\\d+)$/, \"$1\");\n                if (collectionId && collectionId != idArray[0]) {\n                  result.fsCollectionId = collectionId;\n                }\n              }\n            }\n          }\n        }\n\n        if (source.resourceType.endsWith(\"Record\")) {\n          result.recordUrl = source.about;\n        }\n\n        if (source.resourceType.endsWith(\"DigitalArtifact\") && !result.digitalArtifact) {\n          // digitalArtifact property will get deleted later in processImageLinks in all but rare cases\n          // There can be multiple digitalArctifact sources, we just use the first for now\n          // An example is a census (see england_census_1911_peter_delamotte), there can be an image link\n          // to the same image for each houshold member, not obvious how to find the one for the primary person\n          result.digitalArtifact = source.about;\n        }\n      }\n    }\n  }\n\n  processImageLinks(document, result, options);\n\n  result.pageType = \"record\";\n\n  //console.log(\"extractDataFromFetch result is:\");\n  //console.log(result);\n\n  return result;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/site/fs/core/fs_extract_data.mjs\n");

/***/ }),

/***/ "./extension/site/fs/core/fs_generalize_data.mjs":
/*!*******************************************************!*\
  !*** ./extension/site/fs/core/fs_generalize_data.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GeneralizedData\": () => (/* reexport safe */ _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.GeneralizedData),\n/* harmony export */   \"dateQualifiers\": () => (/* reexport safe */ _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.dateQualifiers),\n/* harmony export */   \"generalizeData\": () => (/* binding */ generalizeData),\n/* harmony export */   \"generalizeDataGivenRecordType\": () => (/* binding */ generalizeDataGivenRecordType)\n/* harmony export */ });\n/* harmony import */ var _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/core/generalize_data_utils.mjs */ \"./extension/base/core/generalize_data_utils.mjs\");\n/* harmony import */ var _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/core/record_type.mjs */ \"./extension/base/core/record_type.mjs\");\n/* harmony import */ var _base_core_wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/core/wts_string.mjs */ \"./extension/base/core/wts_string.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\n\n\nconst factTypeToRecordType = [\n  {\n    type: undefined,\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Unclassified,\n  },\n  {\n    type: \"Birth\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Birth,\n    titleMatches: [\n      {\n        recordType: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.BirthRegistration,\n        matches: [\"England and Wales Birth Registration Index\", \"New Zealand, Civil Records Indexes\"],\n      },\n    ],\n    recordDataMatches: [\n      { recordType: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.BirthRegistration, matches: [\"Registration Number\"] },\n      {\n        recordType: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.BirthRegistration,\n        matches: [\"Baptism Date\", \"Christening Date\"],\n      },\n    ],\n  },\n  {\n    type: \"Death\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Death,\n    titleMatches: [\n      {\n        title: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.DeathRegistration,\n        matches: [\"England and Wales Death Registration Index\"],\n      },\n    ],\n  },\n  {\n    type: \"BirthRegistration\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.BirthRegistration,\n  },\n  {\n    type: \"MarriageRegistration\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.MarriageRegistration,\n  },\n  {\n    type: \"DeathRegistration\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.DeathRegistration,\n  },\n  {\n    type: \"Marriage\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Marriage,\n    titleMatches: [\n      {\n        recordType: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.MarriageRegistration,\n        matches: [\"England and Wales Marriage Registration Index\"],\n      },\n    ],\n  },\n  {\n    type: \"MarriageNotice\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Marriage,\n  },\n  {\n    type: \"MarriageLicense\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Marriage,\n  },\n  {\n    type: \"MarriageBanns\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Marriage,\n  },\n  {\n    type: \"Divorce\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Divorce,\n  },\n  {\n    type: \"Census\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Census,\n  },\n  {\n    type: \"Residence\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Residence,\n    titleMatches: [\n      { recordType: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.LandTax, matches: [\"Land Tax\"] },\n      { recordType: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.SchoolRecords, matches: [\"School Records\"] },\n      { recordType: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Census, matches: [\"Census\"] },\n    ],\n  },\n  {\n    type: \"EducationEnrollment\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.SchoolRecords,\n  },\n  {\n    type: \"Baptism\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Baptism,\n  },\n  {\n    type: \"Christening\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Baptism,\n  },\n  {\n    type: \"Burial\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Burial,\n  },\n  {\n    type: \"Probate\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Probate,\n  },\n  {\n    type: \"Obituary\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Obituary,\n  },\n  {\n    type: \"Immigration\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Immigration,\n    titleMatches: [{ recordType: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.PassengerList, matches: [\"Passenger List\"] }],\n  },\n  {\n    type: \"MilitaryService\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Military,\n  },\n  {\n    type: \"MilitaryDraftRegistration\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Military,\n  },\n  {\n    type: \"VoterRegistration\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.ElectoralRegister,\n    titleMatches: [{ recordType: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.ElectoralRegister, matches: [\"Electoral Register\"] }],\n  },\n  {\n    type: \"TaxAssessment\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Tax,\n  },\n  {\n    type: \"Pension\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Pension,\n  },\n  {\n    type: \"PassportApplication\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.PassportApplication,\n  },\n];\n\nconst sourceRecordTypeToRecordType = [\n  {\n    type: undefined,\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Unclassified,\n  },\n  {\n    type: \"Marriages\",\n    defaultRT: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Marriage,\n  },\n];\n\nfunction determineRecordType(extractedData) {\n  const titleMatches = [{ type: _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Census, matches: [\"Census\"] }];\n\n  //console.log(\"in determineRecordType, factType is\");\n  //console.log(extractedData.factType);\n\n  function lookup(factType, collectionTitle, recordData, table) {\n    for (let obj of table) {\n      if (factType == obj.type) {\n        if (obj.titleMatches && collectionTitle) {\n          for (let titleMatch of obj.titleMatches) {\n            for (let match of titleMatch.matches) {\n              if (collectionTitle.includes(match)) {\n                let recordType = titleMatch.recordType;\n                return recordType;\n              }\n            }\n          }\n        }\n        if (recordData && obj.recordDataMatches) {\n          for (let recordDataMatch of obj.recordDataMatches) {\n            for (let match of recordDataMatch.matches) {\n              if (recordData.hasOwnProperty(match)) {\n                let recordType = recordDataMatch.recordType;\n                return recordType;\n              }\n            }\n          }\n        }\n        let recordType = obj.defaultRT;\n        if (recordType) {\n          return recordType;\n        }\n      }\n    }\n  }\n\n  let sourceTitle = extractedData.sourceTitleForPerson;\n  let recordData = extractedData.recordData;\n\n  // If there is a relatedPersonFactType that implies that it is\n  // the fact type of the primary fact\n  if (extractedData.relatedPersonFactType) {\n    let recordType = lookup(extractedData.relatedPersonFactType, sourceTitle, recordData, factTypeToRecordType);\n    if (recordType != undefined) {\n      return recordType;\n    }\n  }\n\n  if (extractedData.factType) {\n    let recordType = lookup(extractedData.factType, sourceTitle, recordData, factTypeToRecordType);\n    if (recordType != undefined) {\n      return recordType;\n    }\n  }\n\n  if (recordData && recordData[\"Source Record Type\"]) {\n    let sourceRecordType = recordData[\"Source Record Type\"];\n    let recordType = lookup(sourceRecordType, sourceTitle, recordData, sourceRecordTypeToRecordType);\n    if (recordType != undefined) {\n      return recordType;\n    }\n  }\n\n  if (sourceTitle) {\n    for (let titleMatch of titleMatches) {\n      for (let match of titleMatch.matches) {\n        if (sourceTitle.includes(match)) {\n          return titleMatch.type;\n        }\n      }\n    }\n\n    // check for birth or death registration\n    if (sourceTitle.includes(\"Registration\")) {\n      if (sourceTitle.includes(\"Birth\")) {\n        return _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.BirthRegistration;\n      }\n      if (sourceTitle.includes(\"Death\")) {\n        return _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.DeathRegistration;\n      }\n    }\n\n    // check for a marriage\n    if (sourceTitle.includes(\"Marriage\") && extractedData.recordData && extractedData.recordData[\"Marriage Date\"]) {\n      return _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Marriage;\n    }\n\n    if (sourceTitle.includes(\"Criminal Register\")) {\n      return _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.CriminalRegister;\n    }\n\n    if (sourceTitle.includes(\"Freemason Membership\")) {\n      return _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.FreemasonMembership;\n    }\n  }\n\n  return _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Unclassified;\n}\n\nfunction determineRecordTypeAndRole(extractedData, result) {\n  let recordType = determineRecordType(extractedData);\n\n  if (extractedData.relatedPersonFactType) {\n    if (extractedData.relationshipToFactPerson) {\n      if (extractedData.relationshipToFactPerson == \"Parent\") {\n        result.role = _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.Role.Parent;\n      } else if (extractedData.relationshipToFactPerson == \"Child\") {\n        result.role = _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.Role.Child;\n      } else if (extractedData.relationshipToFactPerson == \"Spouse\") {\n        result.role = _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.Role.Spouse;\n      }\n      if (extractedData.relatedPersonFullName) {\n        result.primaryPerson = extractedData.relatedPersonFullName;\n      }\n      if (extractedData.relatedPersonGender) {\n        result.primaryPersonGender = extractedData.relatedPersonGender;\n      }\n    }\n  }\n\n  result.recordType = recordType;\n}\n\nfunction cleanOccupation(text) {\n  let newText = text;\n  if (text && /^[^a-z]+$/.test(text)) {\n    // there are no lowercase characters\n    newText = _base_core_wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.toInitialCapsEachWord(text);\n  }\n  return newText;\n}\n\nfunction setFieldIfDefined(targetObject, fieldName, value) {\n  if (typeof value !== \"undefined\") {\n    targetObject[fieldName] = value;\n  }\n}\n\nconst quarterNames = [\n  {\n    name: \"Jan-Feb-Mar\",\n    value: 1,\n  },\n  {\n    name: \"Apr-May-Jun\",\n    value: 2,\n  },\n  {\n    name: \"Jul-Aug-Sep\",\n    value: 3,\n  },\n  {\n    name: \"Oct-Nov-Dec\",\n    value: 4,\n  },\n];\n\nfunction selectDate(dateString, originalDateString) {\n  if (!dateString) {\n    return originalDateString;\n  }\n  if (!originalDateString) {\n    return dateString;\n  }\n\n  // sometimes date come through in like this:\n  // Birth Date: 11081921\n  // Birth Date\t(Original): 08 Nov 1921\n  // Example is US SS Death Index for 2004\n  if (/\\d\\d\\d\\d\\d\\d\\d\\d/.test(dateString)) {\n    return originalDateString;\n  }\n\n  // sometimes date come through in like this:\n  // Death Date: 05/24/1974\n  // Birth Date\t(Original): 24 May 1974\n  // Example is US CA Death Index\n  if (/\\d?\\d\\/\\d?\\d\\/\\d\\d\\d\\d/.test(dateString)) {\n    return originalDateString;\n  }\n\n  // sometimes date come through in like this:\n  // \"birthDateOriginal\": \"1 Nov 1854\",\n  // \"birthDate\": \"1 11 1854\",\n  // Example is https://www.familysearch.org/ark:/61903/1:1:XBQC-X9Q\n  if (/\\d?\\d\\s+\\d?\\d\\s+\\d\\d\\d\\d/.test(dateString)) {\n    return originalDateString;\n  }\n\n  // sometimes dateString is just a year and originalDateString is the full date\n  if (dateString.length < 6 && originalDateString.length > dateString.length) {\n    return originalDateString;\n  }\n\n  return dateString;\n}\n\nfunction selectPlace(placeString, originalPlaceString) {\n  // sometimes there is no place but there is an original place\n  if (!placeString) {\n    return originalPlaceString;\n  }\n\n  // Sometimes FS puts things in that are not WikiTree approved\n  placeString = placeString.replace(/\\,? *British Colonial America/, \"\");\n\n  return placeString;\n}\n\nfunction generalizeDataGivenRecordType(data, result) {\n  if (data.age) {\n    if (data.age != \"999\") {\n      let age = data.age.replace(/^0*(\\d)/, \"$1\"); // remove leading zeroes (but not a single zero on its own)\n      // occasionally the age has extra text. e.g. \"7 years\"\n      if (age && age.length > 1) {\n        if (age.search(/[^\\d]/) != -1) {\n          age = age.replace(/\\s*years\\s*$/i, \"\");\n        }\n      }\n      if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.DeathRegistration || result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Death) {\n        result.ageAtDeath = age;\n      } else {\n        result.ageAtEvent = age;\n      }\n    }\n  }\n\n  if (data.recordData && data.recordData[\"Occupation\"]) {\n    let occupation = cleanOccupation(data.recordData[\"Occupation\"]);\n    if (occupation) {\n      result.occupation = occupation;\n    }\n  }\n\n  if (\n    result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Baptism ||\n    result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Birth ||\n    result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.BirthRegistration ||\n    result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.BirthOrBaptism ||\n    result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Death ||\n    result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.DeathRegistration\n  ) {\n    if (result.role != _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.Role.Parent) {\n      if (data.father) {\n        let father = result.addFather();\n        setFieldIfDefined(father.name, \"name\", data.father.fullName);\n        setFieldIfDefined(father.name, \"forenames\", data.father.givenName);\n        setFieldIfDefined(father.name, \"lastName\", data.father.surname);\n        setFieldIfDefined(father.name, \"prefix\", data.father.prefix);\n        setFieldIfDefined(father.name, \"suffix\", data.father.suffix);\n      }\n      if (data.mother) {\n        let mother = result.addMother();\n        setFieldIfDefined(mother.name, \"name\", data.mother.fullName);\n        setFieldIfDefined(mother.name, \"forenames\", data.mother.givenName);\n        setFieldIfDefined(mother.name, \"lastName\", data.mother.surname);\n        setFieldIfDefined(mother.name, \"prefix\", data.mother.prefix);\n        setFieldIfDefined(mother.name, \"suffix\", data.mother.suffix);\n      }\n\n      // spouse can be specified on a death record for example\n      if (data.spouseFullName || data.spouseSurname || data.spouseGivenName) {\n        result.spouses = [];\n        let resultSpouse = {};\n        resultSpouse.name = new _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.WtsName();\n\n        if (data.spouseFullName) {\n          resultSpouse.name.name = data.spouseFullName;\n        }\n        if (data.spouseSurname) {\n          resultSpouse.name.lastName = data.spouseSurname;\n        }\n        if (data.spouseGivenName) {\n          resultSpouse.name.forenames = data.spouseGivenName;\n        }\n        if (data.spousePrefix) {\n          resultSpouse.name.prefix = data.spousePrefix;\n        }\n        if (data.spouseSuffix) {\n          resultSpouse.name.suffix = data.spouseSuffix;\n        }\n        if (data.spouseAge) {\n          resultSpouse.age = data.spouseAge;\n        }\n        result.spouses.push(resultSpouse);\n      }\n    }\n  } else if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.Marriage) {\n    result.spouses = [];\n    let resultSpouse = {};\n\n    if (result.role != _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.Role.Parent) {\n      if (data.father) {\n        let father = result.addFather();\n        setFieldIfDefined(father.name, \"name\", data.father.fullName);\n        setFieldIfDefined(father.name, \"forenames\", data.father.givenName);\n        setFieldIfDefined(father.name, \"lastName\", data.father.surname);\n        setFieldIfDefined(father.name, \"prefix\", data.father.prefix);\n        setFieldIfDefined(father.name, \"suffix\", data.father.suffix);\n      }\n      if (data.mother) {\n        let mother = result.addMother();\n        setFieldIfDefined(mother.name, \"name\", data.mother.fullName);\n        setFieldIfDefined(mother.name, \"forenames\", data.mother.givenName);\n        setFieldIfDefined(mother.name, \"lastName\", data.mother.surname);\n        setFieldIfDefined(mother.name, \"prefix\", data.mother.prefix);\n        setFieldIfDefined(mother.name, \"suffix\", data.mother.suffix);\n      }\n    }\n\n    if (data.spouseFullName || data.spouseSurname || data.spouseGivenName) {\n      resultSpouse.name = new _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.WtsName();\n\n      if (data.spouseFullName) {\n        resultSpouse.name.name = data.spouseFullName;\n      }\n      if (data.spouseSurname) {\n        resultSpouse.name.lastName = data.spouseSurname;\n      }\n      if (data.spouseGivenName) {\n        resultSpouse.name.forenames = data.spouseGivenName;\n      }\n      if (data.spousePrefix) {\n        resultSpouse.name.prefix = data.spousePrefix;\n      }\n      if (data.spouseSuffix) {\n        resultSpouse.name.suffix = data.spouseSuffix;\n      }\n      if (data.spouseAge) {\n        resultSpouse.age = data.spouseAge;\n      }\n    } else if (\n      data.relatedPersonSpouseFullName ||\n      data.relatedPersonSpouseSurname ||\n      data.relatedPersonSpouseGivenName\n    ) {\n      resultSpouse.name = new _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.WtsName();\n      if (data.relatedPersonSpouseFullName) {\n        resultSpouse.name.name = data.relatedPersonSpouseFullName;\n      }\n      if (data.relatedPersonSpouseSurname) {\n        resultSpouse.name.lastName = data.relatedPersonSpouseSurname;\n      }\n      if (data.relatedPersonSpouseGivenName) {\n        resultSpouse.name.forenames = data.relatedPersonSpouseGivenName;\n      }\n    }\n    if (result.eventDate) {\n      resultSpouse.marriageDate = result.eventDate;\n    }\n    if (result.eventPlace) {\n      resultSpouse.marriagePlace = result.eventPlace;\n    }\n\n    // the marriage record can contain an actual marriage date as well as the event date\n    // If so it is probably more accurate\n    if (\n      data.recordData[\"Marriage Date\"] ||\n      data.recordData[\"Marriage Date (Original)\"] ||\n      data.recordData[\"Marriage Year\"]\n    ) {\n      let marriageDate = new _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.WtsDate();\n      let dateString = selectDate(data.recordData[\"Marriage Date\"], data.recordData[\"Marriage Date (Original)\"]);\n      if (dateString) {\n        marriageDate.dateString = dateString;\n      }\n      if (data.recordData[\"Marriage Year\"]) {\n        marriageDate.yearString = data.recordData[\"Marriage Year\"];\n      }\n      resultSpouse.marriageDate = marriageDate;\n      result.marriageDate = marriageDate.getDateString();\n    }\n\n    result.spouses.push(resultSpouse);\n  } else if (result.recordType == _base_core_record_type_mjs__WEBPACK_IMPORTED_MODULE_1__.RT.MarriageRegistration) {\n    result.spouses = [];\n    let resultSpouse = {};\n\n    if (data.spouseFullName || data.spouseSurname || data.spouseGivenName) {\n      resultSpouse.name = new _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.WtsName();\n\n      let spouseFullName = data.spouseFullName;\n      if (spouseFullName == data.spouseSurname) {\n        // there could be more info in record data\n        let recordData = data.recordData;\n        if (recordData) {\n          if (recordData[\"Other On Page Name1\"] && !recordData[\"Other On Page Name2\"]) {\n            if (recordData[\"Other On Page Name Surn1\"] == data.spouseSurname) {\n              spouseFullName = recordData[\"Other On Page Name1\"];\n            } else if (recordData[\"Other On Page Name1\"].endsWith(data.spouseSurname)) {\n              spouseFullName = recordData[\"Other On Page Name1\"];\n            }\n          }\n        }\n      }\n\n      if (spouseFullName) {\n        resultSpouse.name.name = spouseFullName;\n      }\n      if (data.spouseSurname) {\n        resultSpouse.name.lastName = data.spouseSurname;\n      }\n      if (data.spouseGivenName) {\n        resultSpouse.name.forenames = data.spouseGivenName;\n      }\n      if (data.spousePrefix) {\n        resultSpouse.name.prefix = data.spousePrefix;\n      }\n      if (data.spouseSuffix) {\n        resultSpouse.name.suffix = data.spouseSuffix;\n      }\n      if (data.spouseAge) {\n        resultSpouse.age = data.spouseAge;\n      }\n    }\n    if (result.eventDate) {\n      resultSpouse.marriageDate = result.eventDate;\n    }\n    if (result.eventPlace) {\n      resultSpouse.marriagePlace = result.eventPlace;\n    }\n\n    // the marriage registration can contain an actual marriage date\n    if (\n      data.recordData[\"Marriage Date\"] ||\n      data.recordData[\"Marriage Date (Original)\"] ||\n      data.recordData[\"Marriage Year\"]\n    ) {\n      let marriageDate = new _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.WtsDate();\n      let dateString = selectDate(data.recordData[\"Marriage Date\"], data.recordData[\"Marriage Date (Original)\"]);\n      if (dateString) {\n        marriageDate.dateString = dateString;\n      }\n      if (data.recordData[\"Marriage Year\"]) {\n        marriageDate.yearString = data.recordData[\"Marriage Year\"];\n      }\n      resultSpouse.marriageDate = marriageDate;\n      result.marriageDate = marriageDate.getDateString();\n    }\n\n    result.spouses.push(resultSpouse);\n  }\n\n  if (data.household) {\n    let headings = data.household.headings;\n    let members = data.household.members;\n    if (headings && members) {\n      result.householdArrayFields = [];\n      let fieldsEncountered = {};\n\n      let householdArray = [];\n      for (let member of members) {\n        let householdMember = {};\n        if (member.isClosed) {\n          householdMember.isClosed = true;\n        } else {\n          let name = member.fullName;\n          if (name) {\n            householdMember.name = name;\n            fieldsEncountered.name = true;\n          }\n          let relationship = member.relationship;\n          if (relationship && relationship != \"Unknown\") {\n            householdMember.relationship = _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.GD.standardizeRelationshipToHead(relationship);\n            fieldsEncountered.relationship = true;\n          }\n          let maritalStatus = _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.GD.standardizeMaritalStatus(member.maritalStatus);\n          if (maritalStatus) {\n            householdMember.maritalStatus = maritalStatus;\n            fieldsEncountered.maritalStatus = true;\n          }\n          let gender = member.gender;\n          if (gender && gender != \"Unknown\") {\n            householdMember.gender = _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.GD.standardizeGender(gender);\n            fieldsEncountered.gender = true;\n          }\n          let age = member.age;\n          if (age && age != \"Unknown\" && age != \"999\") {\n            householdMember.age = age;\n            fieldsEncountered.age = true;\n          }\n          let birthYear = member.birthYear;\n          if (birthYear && birthYear != \"Unknown\") {\n            householdMember.birthYear = birthYear;\n            fieldsEncountered.birthYear = true;\n          }\n          let birthDate = member.birthDate;\n          if (birthDate && birthDate != \"Unknown\" && birthDate != birthYear) {\n            householdMember.birthDate = birthDate;\n            fieldsEncountered.birthDate = true;\n          }\n\n          let occupation = cleanOccupation(member.occupation);\n          if (occupation && occupation != \"Unknown\") {\n            householdMember.occupation = occupation;\n            fieldsEncountered.occupation = true;\n          }\n          let birthPlace = member.birthPlace;\n          if (!birthPlace) {\n            birthPlace = member.birthPlaceOriginal;\n          }\n          if (birthPlace && birthPlace != \"Unknown\") {\n            householdMember.birthPlace = birthPlace;\n            fieldsEncountered.birthPlace = true;\n          }\n          let isSelected = member[\"isSelected\"];\n          if (isSelected) {\n            householdMember.isSelected = isSelected;\n          }\n        }\n        householdArray.push(householdMember);\n      }\n      result.householdArray = householdArray;\n\n      let possibleHouseholdArrayFields = [\n        \"name\",\n        \"relationship\",\n        \"maritalStatus\",\n        \"gender\",\n        \"age\",\n        \"birthYear\",\n        \"occupation\",\n        \"birthPlace\",\n      ];\n\n      let householdArrayFields = [];\n      for (let field of possibleHouseholdArrayFields) {\n        if (fieldsEncountered[field]) {\n          householdArrayFields.push(field);\n        }\n      }\n      result.householdArrayFields = householdArrayFields;\n    }\n  }\n}\n\nfunction generalizeDataForPerson(data, result) {\n  function setName(dataObject, resultObject) {\n    if (dataObject.fullName) {\n      resultObject.name.name = dataObject.fullName;\n    }\n    if (dataObject.surname) {\n      resultObject.name.lastName = dataObject.surname;\n    }\n    if (dataObject.givenName) {\n      resultObject.name.forenames = dataObject.givenName;\n    }\n    if (dataObject.prefix) {\n      resultObject.name.prefix = dataObject.prefix;\n    }\n    if (dataObject.suffix) {\n      resultObject.name.suffix = dataObject.suffix;\n    }\n  }\n\n  // we will already have set fullName but try to get the fornames and last names\n  setName(data, result);\n\n  if (data.spouses) {\n    result.spouses = [];\n\n    for (let spouse of data.spouses) {\n      let resultSpouse = {};\n\n      if (spouse.fullName || spouse.surname || spouse.givenName) {\n        resultSpouse.name = new _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.WtsName();\n        setName(spouse, resultSpouse);\n      }\n\n      if (spouse.marriageDate || spouse.marriageDateOriginal) {\n        resultSpouse.marriageDate = new _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.WtsDate();\n        resultSpouse.marriageDate.dateString = selectDate(spouse.marriageDate, spouse.marriageDateOriginal);\n      }\n\n      if (spouse.marriagePlace || spouse.marriagePlaceOriginal) {\n        resultSpouse.marriagePlace = new _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.WtsPlace();\n        resultSpouse.marriagePlace.placeString = selectPlace(spouse.marriagePlace, spouse.marriagePlaceOriginal);\n      }\n\n      result.spouses.push(resultSpouse);\n    }\n  }\n\n  if (data.father) {\n    let father = result.addFather();\n    setName(data.father, father);\n  }\n\n  if (data.mother) {\n    let mother = result.addMother();\n    setName(data.mother, mother);\n  }\n}\n\n// This function generalizes the data extracted from a FamilySearch page.\n// We know what fields can be there. And we know the ones we want in generalizedData.\nfunction generalizeData(input) {\n  let data = input.extractedData;\n\n  let result = new _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.GeneralizedData();\n\n  if (data.pageType == \"person\") {\n    result.sourceType = \"profile\";\n  } else {\n    result.sourceType = \"record\";\n    determineRecordTypeAndRole(data, result);\n  }\n\n  result.sourceOfData = \"fs\";\n\n  result.setPersonGender(data.gender);\n\n  result.setFullName(data.fullName);\n\n  let birthDate = selectDate(data.birthDate, data.birthDateOriginal);\n  result.setBirthDate(birthDate);\n  result.setBirthYear(data.birthYear);\n  let birthPlace = selectPlace(data.birthPlace, data.birthPlaceOriginal);\n  result.setBirthPlace(birthPlace);\n\n  let deathDate = selectDate(data.deathDate, data.deathDateOriginal);\n  result.setDeathDate(deathDate);\n  result.setDeathYear(data.deathYear);\n\n  let deathPlace = selectPlace(data.deathPlace, data.deathPlaceOriginal);\n  result.setDeathPlace(deathPlace);\n\n  let eventDate = selectDate(data.eventDate, data.eventDateOriginal);\n  result.setEventDate(eventDate);\n  result.setEventYear(data.eventYear);\n\n  let eventPlace = selectPlace(data.eventPlace, data.eventPlaceOriginal);\n\n  if (!eventPlace) {\n    // sometimes the event place info is in other fields\n    eventPlace = \"\";\n    if (data.eventCity) {\n      eventPlace += data.eventCity;\n    }\n    if (data.eventCounty) {\n      if (eventPlace) {\n        eventPlace += \", \";\n      }\n      eventPlace += data.eventCounty;\n    }\n    if (data.eventState) {\n      if (eventPlace) {\n        eventPlace += \", \";\n      }\n      eventPlace += data.eventState;\n    }\n    if (data.eventCountry) {\n      if (eventPlace) {\n        eventPlace += \", \";\n      }\n      eventPlace += data.eventCountry;\n    }\n  }\n\n  result.setEventPlace(eventPlace);\n\n  let residencePlace = data.residence;\n  if (!residencePlace && data.recordData && data.recordData[\"Note Res Place\"]) {\n    // sometimes this is a field that is not on the residence fact\n    residencePlace = data.recordData[\"Note Res Place\"];\n  }\n  if (residencePlace && result.eventPlace) {\n    // at least in 1841 census this is the stree address\n    result.eventPlace.streetAddress = residencePlace;\n  }\n\n  if (result.eventPlace) {\n    // there is an event place. But sometimes this isn't really the event place\n    // For example for US SS Death Index it is the last residence place\n    if (data.collectionTitle == \"United States Social Security Death Index\") {\n      result.residencePlace = result.eventPlace;\n      delete result.eventPlace;\n    }\n  }\n\n  if (data.registrationDistrict) {\n    result.registrationDistrict = data.registrationDistrict;\n  }\n\n  if (data.registrationQuarter) {\n    let quarter = -1;\n    let fsQuarter = data.registrationQuarter;\n    for (let quarterName of quarterNames) {\n      if (fsQuarter == quarterName.name) {\n        quarter = quarterName.value;\n        break;\n      }\n    }\n    if (quarter != -1) {\n      result.setEventQuarter(quarter);\n    }\n  }\n\n  if (data.pageType == \"person\") {\n    generalizeDataForPerson(data, result);\n  } else {\n    generalizeDataGivenRecordType(data, result);\n  }\n\n  if (data.household && data.household.members) {\n    let selectedMember = undefined;\n    for (let member of data.household.members) {\n      if (member.isSelected) {\n        selectedMember = member;\n        break;\n      }\n    }\n\n    if (selectedMember) {\n      result.setMaritalStatus(selectedMember.maritalStatus);\n      result.setRelationshipToHead(selectedMember.relationship);\n    }\n  }\n\n  if (!result.maritalStatus && data.recordData) {\n    result.setMaritalStatus(data.recordData[\"MaritalStatus\"]);\n  }\n\n  if (data.household && data.household.members) {\n    // We can also determine parents and spouse in some cases\n    result.addSpouseOrParentsForSelectedHouseholdMember();\n\n    if (result.spouses && result.spouses.length == 1) {\n      let yearsMarried = data.recordData[\"Cnt Years Married\"];\n      if (yearsMarried) {\n        let censusDate = result.inferEventDate();\n        let marriageDateString = _base_core_generalize_data_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.GeneralizedData.getSubtractAgeFromDate(censusDate, yearsMarried);\n        let marriageYear = _base_core_wts_string_mjs__WEBPACK_IMPORTED_MODULE_2__.WTS_String.getLastWord(marriageDateString);\n        if (marriageYear) {\n          result.spouses[0].marriageDate.yearString = marriageYear;\n        }\n      }\n    }\n  }\n\n  // Collection\n  if (data.fsCollectionId) {\n    result.collectionData = {\n      id: data.fsCollectionId,\n    };\n\n    if (data.referenceData) {\n      let refData = data.referenceData;\n      if (refData.sourceVolume) {\n        result.collectionData.volume = refData.sourceVolume;\n      }\n\n      if (refData.sourcePageNbr) {\n        result.collectionData.page = refData.sourcePageNbr;\n      }\n\n      if (refData.sourceScheduleType) {\n        result.collectionData.schedule = refData.sourceScheduleType;\n      }\n\n      if (refData.sourcePieceFolio) {\n        let pf = refData.sourcePieceFolio;\n        let slashIndex = pf.indexOf(\"/\");\n        if (slashIndex != -1) {\n          result.collectionData.piece = pf.substring(0, slashIndex).trim();\n          result.collectionData.folio = pf.substring(slashIndex + 1).trim();\n        } else {\n          result.collectionData.folio = pf;\n        }\n      }\n    }\n  }\n\n  result.hasValidData = true;\n\n  //console.log(\"End of FamilySearch generalizeData, result is:\");\n  //console.log(result);\n\n  return result;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/site/fs/core/fs_generalize_data.mjs\n");

/***/ }),

/***/ "./extension/site/fs/core/fs_options.mjs":
/*!***********************************************!*\
  !*** ./extension/site/fs/core/fs_options.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/core/options/options_registry.mjs */ \"./extension/base/core/options/options_registry.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\nconst searchOptionsGroup = {\n  category: \"search\",\n  subcategory: \"fs\",\n  tab: \"search\",\n  subsection: \"fs\",\n  subheading: \"parameters\",\n  options: [\n    {\n      optionName: \"birthYearExactness\",\n      type: \"select\",\n      label: \"Search exactness to use for birth year\",\n      values: [\n        { value: \"none\", text: \"Do not specify a birth year\" },\n        { value: \"auto\", text: \"Set automatically based on source\" },\n        { value: \"exact\", text: \"Exact year only\" },\n        { value: 1, text: \"+/- 1 years\" },\n        { value: 2, text: \"+/- 2 years\" },\n        { value: 5, text: \"+/- 5 years\" },\n        { value: 10, text: \"+/- 10 years\" },\n      ],\n      defaultValue: \"auto\",\n    },\n    {\n      optionName: \"deathYearExactness\",\n      type: \"select\",\n      label: \"Search exactness to use for death year\",\n      values: [\n        { value: \"none\", text: \"Do not specify a death year\" },\n        { value: \"auto\", text: \"Set automatically based on source\" },\n        { value: \"exact\", text: \"Exact year only\" },\n        { value: 1, text: \"+/- 1 years\" },\n        { value: 2, text: \"+/- 2 years\" },\n        { value: 5, text: \"+/- 5 years\" },\n        { value: 10, text: \"+/- 10 years\" },\n      ],\n      defaultValue: \"auto\",\n    },\n    {\n      optionName: \"marriageYearExactness\",\n      type: \"select\",\n      label: \"Search exactness to use for marriage year\",\n      values: [\n        { value: \"none\", text: \"Do not specify a marriage year\" },\n        { value: \"auto\", text: \"Set automatically based on source\" },\n        { value: \"exact\", text: \"Exact year only\" },\n        { value: 1, text: \"+/- 1 years\" },\n        { value: 2, text: \"+/- 2 years\" },\n        { value: 5, text: \"+/- 5 years\" },\n        { value: 10, text: \"+/- 10 years\" },\n      ],\n      defaultValue: \"auto\",\n    },\n    {\n      optionName: \"residenceYearExactness\",\n      type: \"select\",\n      label: \"Search exactness to use for residence year\",\n      values: [\n        { value: \"none\", text: \"Do not specify a residence year\" },\n        { value: \"auto\", text: \"Set automatically based on source\" },\n        { value: \"exact\", text: \"Exact year only\" },\n        { value: 1, text: \"+/- 1 years\" },\n        { value: 2, text: \"+/- 2 years\" },\n        { value: 5, text: \"+/- 5 years\" },\n        { value: 10, text: \"+/- 10 years\" },\n      ],\n      defaultValue: \"auto\",\n    },\n  ],\n};\n\nconst citationOptionsGroup = {\n  category: \"citation\",\n  subcategory: \"fs\",\n  tab: \"citation\",\n  subsection: \"fs\",\n  options: [\n    {\n      optionName: \"sourceRef\",\n      type: \"select\",\n      label: \"Build source reference\",\n      values: [\n        { value: \"record\", text: \"From record data\" },\n        {\n          value: \"fsCitationShort\",\n          text: \"Reuse & abbreviate reference from citation on FamilySearch page\",\n        },\n        {\n          value: \"fsCitationLong\",\n          text: \"Reuse full reference from citation on FamilySearch page\",\n        },\n      ],\n      defaultValue: \"fsCitationShort\",\n    },\n    {\n      optionName: \"dataStyle\",\n      type: \"select\",\n      label: \"Include record data at end of citation as\",\n      values: [\n        { value: \"none\", text: \"Do not include data\" },\n        {\n          value: \"string\",\n          text: \"Sentence (fall back to list if no sentence)\",\n        },\n        { value: \"list\", text: \"List of field names/values\" },\n        { value: \"table\", text: \"Table of field names/values\" },\n        {\n          value: \"fsCitation\",\n          text: \"Reuse parts of the citation on the FamilySearch page\",\n        },\n      ],\n      defaultValue: \"string\",\n      unitTestValue: \"fsCitation\",\n    },\n    {\n      optionName: \"includeExternalImageLink\",\n      type: \"checkbox\",\n      label: \"Include a link to an external image if available\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"subscriptionRequired\",\n      type: \"select\",\n      label: \"Indicate that a subscription is required with FMP link\",\n      values: [\n        { value: \"none\", text: \"Do not add any such indication\" },\n        {\n          value: \"subscriptionRequired\",\n          text: 'Include the text \"subscription required\"',\n        },\n        {\n          value: \"requiresSubscription\",\n          text: 'Include the text \"requires subscription\"',\n        },\n        { value: \"dollar\", text: 'Include the text \"$\"' },\n        { value: \"paywall\", text: 'Include the text \"paywall\"' },\n      ],\n      defaultValue: \"none\",\n      unitTestValue: \"subscriptionRequired\",\n    },\n  ],\n};\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"search\", \"fs\", \"FamilySearch\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSiteSearchPopupOptionsGroup)(\"fs\", 3, 3);\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubheadingForOptions)(\"search\", \"fs\", \"parameters\", \"Search Parameters\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(searchOptionsGroup);\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(citationOptionsGroup);\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"citation\", \"fs\", \"FamilySearch\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/site/fs/core/fs_options.mjs\n");

/***/ }),

/***/ "./extension/site/geneteka/core/geneteka_options.mjs":
/*!***********************************************************!*\
  !*** ./extension/site/geneteka/core/geneteka_options.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/core/options/options_registry.mjs */ \"./extension/base/core/options/options_registry.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"search\", \"geneteka\", \"Geneteka\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSiteSearchPopupOptionsGroup)(\"geneteka\", 8, 8);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb24vc2l0ZS9nZW5ldGVrYS9jb3JlL2dlbmV0ZWthX29wdGlvbnMubWpzLmpzIiwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUt5RDs7QUFFekQscUdBQTRCO0FBQzVCLDRHQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL0NpdGF0aW9uRXh0cmFjdG9yLy4vZXh0ZW5zaW9uL3NpdGUvZ2VuZXRla2EvY29yZS9nZW5ldGVrYV9vcHRpb25zLm1qcz80OTc0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjAgUm9iZXJ0IE0gUGF2ZXlcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IHtcbiAgcmVnaXN0ZXJTdWJzZWN0aW9uRm9yT3B0aW9ucyxcbiAgcmVnaXN0ZXJTaXRlU2VhcmNoUG9wdXBPcHRpb25zR3JvdXAsXG59IGZyb20gXCIuLi8uLi8uLi9iYXNlL2NvcmUvb3B0aW9ucy9vcHRpb25zX3JlZ2lzdHJ5Lm1qc1wiO1xuXG5yZWdpc3RlclN1YnNlY3Rpb25Gb3JPcHRpb25zKFwic2VhcmNoXCIsIFwiZ2VuZXRla2FcIiwgXCJHZW5ldGVrYVwiKTtcbnJlZ2lzdGVyU2l0ZVNlYXJjaFBvcHVwT3B0aW9uc0dyb3VwKFwiZ2VuZXRla2FcIiwgOCwgOCk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./extension/site/geneteka/core/geneteka_options.mjs\n");

/***/ }),

/***/ "./extension/site/gro/core/gro_options.mjs":
/*!*************************************************!*\
  !*** ./extension/site/gro/core/gro_options.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/core/options/options_registry.mjs */ \"./extension/base/core/options/options_registry.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\nconst citationOptionsGroup = {\n  category: \"citation\",\n  subcategory: \"gro\",\n  tab: \"citation\",\n  subsection: \"gro\",\n  options: [\n    {\n      optionName: \"changeNamesToInitialCaps\",\n      type: \"checkbox\",\n      label: \"Change person and place names from all caps to initial caps\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"referenceInItalics\",\n      type: \"checkbox\",\n      label: 'Put the text \"GRO Reference\" in italics',\n      defaultValue: true,\n    },\n    {\n      optionName: \"linkStyle\",\n      type: \"select\",\n      label: \"Link to GRO site by\",\n      values: [\n        { value: \"search\", text: \"Hyperlink with full search parameters\" },\n        { value: \"index\", text: \"Hyperlink to correct GRO index\" },\n        { value: \"content\", text: \"Hyperlink to GRO content site\" },\n        { value: \"url_content\", text: \"Visible URL to GRO content site\" },\n      ],\n      defaultValue: \"search\",\n    },\n    {\n      optionName: \"useDistrictUrl\",\n      type: \"checkbox\",\n      label: \"Add a link to the registration district page on ukbmd.org.uk\",\n      defaultValue: true,\n    },\n  ],\n};\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"search\", \"gro\", \"GRO (UK)\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSiteSearchPopupOptionsGroup)(\"gro\", 5, 5);\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"citation\", \"gro\", \"GRO (UK)\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(citationOptionsGroup);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb24vc2l0ZS9ncm8vY29yZS9ncm9fb3B0aW9ucy5tanMuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBT3lEOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsZ0VBQWdFO0FBQzFFLFVBQVUsd0RBQXdEO0FBQ2xFLFVBQVUseURBQXlEO0FBQ25FLFVBQVUsK0RBQStEO0FBQ3pFO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLHFHQUE0QjtBQUM1Qiw0R0FBbUM7O0FBRW5DLHFHQUE0QjtBQUM1Qiw2RkFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaXRhdGlvbkV4dHJhY3Rvci8uL2V4dGVuc2lvbi9zaXRlL2dyby9jb3JlL2dyb19vcHRpb25zLm1qcz9iYjhkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjAgUm9iZXJ0IE0gUGF2ZXlcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IHtcbiAgcmVnaXN0ZXJTdWJzZWN0aW9uRm9yT3B0aW9ucyxcbiAgcmVnaXN0ZXJTdWJoZWFkaW5nRm9yT3B0aW9ucyxcbiAgcmVnaXN0ZXJPcHRpb25zR3JvdXAsXG4gIHJlZ2lzdGVyU2l0ZVNlYXJjaFBvcHVwT3B0aW9uc0dyb3VwLFxufSBmcm9tIFwiLi4vLi4vLi4vYmFzZS9jb3JlL29wdGlvbnMvb3B0aW9uc19yZWdpc3RyeS5tanNcIjtcblxuY29uc3QgY2l0YXRpb25PcHRpb25zR3JvdXAgPSB7XG4gIGNhdGVnb3J5OiBcImNpdGF0aW9uXCIsXG4gIHN1YmNhdGVnb3J5OiBcImdyb1wiLFxuICB0YWI6IFwiY2l0YXRpb25cIixcbiAgc3Vic2VjdGlvbjogXCJncm9cIixcbiAgb3B0aW9uczogW1xuICAgIHtcbiAgICAgIG9wdGlvbk5hbWU6IFwiY2hhbmdlTmFtZXNUb0luaXRpYWxDYXBzXCIsXG4gICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICBsYWJlbDogXCJDaGFuZ2UgcGVyc29uIGFuZCBwbGFjZSBuYW1lcyBmcm9tIGFsbCBjYXBzIHRvIGluaXRpYWwgY2Fwc1wiLFxuICAgICAgZGVmYXVsdFZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAge1xuICAgICAgb3B0aW9uTmFtZTogXCJyZWZlcmVuY2VJbkl0YWxpY3NcIixcbiAgICAgIHR5cGU6IFwiY2hlY2tib3hcIixcbiAgICAgIGxhYmVsOiAnUHV0IHRoZSB0ZXh0IFwiR1JPIFJlZmVyZW5jZVwiIGluIGl0YWxpY3MnLFxuICAgICAgZGVmYXVsdFZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAge1xuICAgICAgb3B0aW9uTmFtZTogXCJsaW5rU3R5bGVcIixcbiAgICAgIHR5cGU6IFwic2VsZWN0XCIsXG4gICAgICBsYWJlbDogXCJMaW5rIHRvIEdSTyBzaXRlIGJ5XCIsXG4gICAgICB2YWx1ZXM6IFtcbiAgICAgICAgeyB2YWx1ZTogXCJzZWFyY2hcIiwgdGV4dDogXCJIeXBlcmxpbmsgd2l0aCBmdWxsIHNlYXJjaCBwYXJhbWV0ZXJzXCIgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJpbmRleFwiLCB0ZXh0OiBcIkh5cGVybGluayB0byBjb3JyZWN0IEdSTyBpbmRleFwiIH0sXG4gICAgICAgIHsgdmFsdWU6IFwiY29udGVudFwiLCB0ZXh0OiBcIkh5cGVybGluayB0byBHUk8gY29udGVudCBzaXRlXCIgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJ1cmxfY29udGVudFwiLCB0ZXh0OiBcIlZpc2libGUgVVJMIHRvIEdSTyBjb250ZW50IHNpdGVcIiB9LFxuICAgICAgXSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogXCJzZWFyY2hcIixcbiAgICB9LFxuICAgIHtcbiAgICAgIG9wdGlvbk5hbWU6IFwidXNlRGlzdHJpY3RVcmxcIixcbiAgICAgIHR5cGU6IFwiY2hlY2tib3hcIixcbiAgICAgIGxhYmVsOiBcIkFkZCBhIGxpbmsgdG8gdGhlIHJlZ2lzdHJhdGlvbiBkaXN0cmljdCBwYWdlIG9uIHVrYm1kLm9yZy51a1wiLFxuICAgICAgZGVmYXVsdFZhbHVlOiB0cnVlLFxuICAgIH0sXG4gIF0sXG59O1xuXG5yZWdpc3RlclN1YnNlY3Rpb25Gb3JPcHRpb25zKFwic2VhcmNoXCIsIFwiZ3JvXCIsIFwiR1JPIChVSylcIik7XG5yZWdpc3RlclNpdGVTZWFyY2hQb3B1cE9wdGlvbnNHcm91cChcImdyb1wiLCA1LCA1KTtcblxucmVnaXN0ZXJTdWJzZWN0aW9uRm9yT3B0aW9ucyhcImNpdGF0aW9uXCIsIFwiZ3JvXCIsIFwiR1JPIChVSylcIik7XG5yZWdpc3Rlck9wdGlvbnNHcm91cChjaXRhdGlvbk9wdGlvbnNHcm91cCk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./extension/site/gro/core/gro_options.mjs\n");

/***/ }),

/***/ "./extension/site/gro/core/gro_uri_builder.mjs":
/*!*****************************************************!*\
  !*** ./extension/site/gro/core/gro_uri_builder.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GroUriBuilder\": () => (/* binding */ GroUriBuilder)\n/* harmony export */ });\n/* harmony import */ var _base_core_wts_string_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/core/wts_string.mjs */ \"./extension/base/core/wts_string.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\nclass GroUriBuilder {\n  constructor() {\n    this.uri = \"https://www.gro.gov.uk/gro/content/certificates/indexes_search.asp\";\n    this.searchTermAdded = false;\n  }\n\n  addSearchTerm(string) {\n    if (string == undefined || string == \"\") {\n      return;\n    }\n    if (!this.searchTermAdded) {\n      this.uri = this.uri.concat(\"?\", string);\n      this.searchTermAdded = true;\n    } else {\n      this.uri = this.uri.concat(\"&\", string);\n    }\n  }\n\n  addSearchParameter(parameter, value) {\n    if (value == undefined || value == \"\") {\n      return;\n    }\n\n    const encodedValue = encodeURIComponent(value);\n\n    if (!this.searchTermAdded) {\n      this.uri = this.uri.concat(\"?\", parameter, \"=\", encodedValue);\n      this.searchTermAdded = true;\n    } else {\n      this.uri = this.uri.concat(\"&\", parameter, \"=\", encodedValue);\n    }\n  }\n\n  addIndex(string) {\n    this.addSearchParameter(\"index\", string);\n  }\n\n  addFirstForename(string) {\n    this.addSearchParameter(\"forename1\", _base_core_wts_string_mjs__WEBPACK_IMPORTED_MODULE_0__.WTS_String.removeExtendedAsciiCharacters(string));\n  }\n\n  addSecondForename(string) {\n    let forename2 = _base_core_wts_string_mjs__WEBPACK_IMPORTED_MODULE_0__.WTS_String.getFirstWord(string);\n    this.addSearchParameter(\"forename2\", _base_core_wts_string_mjs__WEBPACK_IMPORTED_MODULE_0__.WTS_String.removeExtendedAsciiCharacters(forename2));\n  }\n\n  addSurname(string) {\n    this.addSearchParameter(\"surname\", _base_core_wts_string_mjs__WEBPACK_IMPORTED_MODULE_0__.WTS_String.removeExtendedAsciiCharacters(string));\n  }\n\n  addMothersSurname(string) {\n    if (string != \"-\") {\n      this.addSearchParameter(\"motherssurname\", _base_core_wts_string_mjs__WEBPACK_IMPORTED_MODULE_0__.WTS_String.removeExtendedAsciiCharacters(string));\n    }\n  }\n\n  addYear(string) {\n    this.addSearchParameter(\"year\", string);\n  }\n\n  addYearRange(string) {\n    this.addSearchParameter(\"range\", string);\n  }\n\n  addAge(string) {\n    this.addSearchParameter(\"age\", string);\n  }\n\n  addAgeRange(string) {\n    this.addSearchParameter(\"agerange\", string);\n  }\n\n  addGenderMale() {\n    this.addSearchTerm(\"gender=M\");\n  }\n\n  addGenderFemale() {\n    this.addSearchTerm(\"gender=F\");\n  }\n\n  addQuarter(string) {\n    this.addSearchParameter(\"quarter\", string);\n  }\n\n  addMonth(string) {\n    this.addSearchParameter(\"month\", string);\n  }\n\n  addDistrict(string) {\n    this.addSearchParameter(\"district\", string);\n  }\n\n  addVolume(string) {\n    this.addSearchParameter(\"volume\", string);\n  }\n\n  addPage(string) {\n    this.addSearchParameter(\"page\", string);\n  }\n\n  addRegister(string) {\n    this.addSearchParameter(\"reg\", string);\n  }\n\n  getUri() {\n    return this.uri;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb24vc2l0ZS9ncm8vY29yZS9ncm9fdXJpX2J1aWxkZXIubWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUrRDs7QUFFL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5Q0FBeUMsK0ZBQXdDO0FBQ2pGOztBQUVBO0FBQ0Esb0JBQW9CLDhFQUF1QjtBQUMzQyx5Q0FBeUMsK0ZBQXdDO0FBQ2pGOztBQUVBO0FBQ0EsdUNBQXVDLCtGQUF3QztBQUMvRTs7QUFFQTtBQUNBO0FBQ0EsZ0RBQWdELCtGQUF3QztBQUN4RjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUV5QiIsInNvdXJjZXMiOlsid2VicGFjazovL0NpdGF0aW9uRXh0cmFjdG9yLy4vZXh0ZW5zaW9uL3NpdGUvZ3JvL2NvcmUvZ3JvX3VyaV9idWlsZGVyLm1qcz80ZWMwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjAgUm9iZXJ0IE0gUGF2ZXlcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IHsgV1RTX1N0cmluZyB9IGZyb20gXCIuLi8uLi8uLi9iYXNlL2NvcmUvd3RzX3N0cmluZy5tanNcIjtcblxuY2xhc3MgR3JvVXJpQnVpbGRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudXJpID0gXCJodHRwczovL3d3dy5ncm8uZ292LnVrL2dyby9jb250ZW50L2NlcnRpZmljYXRlcy9pbmRleGVzX3NlYXJjaC5hc3BcIjtcbiAgICB0aGlzLnNlYXJjaFRlcm1BZGRlZCA9IGZhbHNlO1xuICB9XG5cbiAgYWRkU2VhcmNoVGVybShzdHJpbmcpIHtcbiAgICBpZiAoc3RyaW5nID09IHVuZGVmaW5lZCB8fCBzdHJpbmcgPT0gXCJcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuc2VhcmNoVGVybUFkZGVkKSB7XG4gICAgICB0aGlzLnVyaSA9IHRoaXMudXJpLmNvbmNhdChcIj9cIiwgc3RyaW5nKTtcbiAgICAgIHRoaXMuc2VhcmNoVGVybUFkZGVkID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cmkgPSB0aGlzLnVyaS5jb25jYXQoXCImXCIsIHN0cmluZyk7XG4gICAgfVxuICB9XG5cbiAgYWRkU2VhcmNoUGFyYW1ldGVyKHBhcmFtZXRlciwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gdW5kZWZpbmVkIHx8IHZhbHVlID09IFwiXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBlbmNvZGVkVmFsdWUgPSBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuXG4gICAgaWYgKCF0aGlzLnNlYXJjaFRlcm1BZGRlZCkge1xuICAgICAgdGhpcy51cmkgPSB0aGlzLnVyaS5jb25jYXQoXCI/XCIsIHBhcmFtZXRlciwgXCI9XCIsIGVuY29kZWRWYWx1ZSk7XG4gICAgICB0aGlzLnNlYXJjaFRlcm1BZGRlZCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXJpID0gdGhpcy51cmkuY29uY2F0KFwiJlwiLCBwYXJhbWV0ZXIsIFwiPVwiLCBlbmNvZGVkVmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGFkZEluZGV4KHN0cmluZykge1xuICAgIHRoaXMuYWRkU2VhcmNoUGFyYW1ldGVyKFwiaW5kZXhcIiwgc3RyaW5nKTtcbiAgfVxuXG4gIGFkZEZpcnN0Rm9yZW5hbWUoc3RyaW5nKSB7XG4gICAgdGhpcy5hZGRTZWFyY2hQYXJhbWV0ZXIoXCJmb3JlbmFtZTFcIiwgV1RTX1N0cmluZy5yZW1vdmVFeHRlbmRlZEFzY2lpQ2hhcmFjdGVycyhzdHJpbmcpKTtcbiAgfVxuXG4gIGFkZFNlY29uZEZvcmVuYW1lKHN0cmluZykge1xuICAgIGxldCBmb3JlbmFtZTIgPSBXVFNfU3RyaW5nLmdldEZpcnN0V29yZChzdHJpbmcpO1xuICAgIHRoaXMuYWRkU2VhcmNoUGFyYW1ldGVyKFwiZm9yZW5hbWUyXCIsIFdUU19TdHJpbmcucmVtb3ZlRXh0ZW5kZWRBc2NpaUNoYXJhY3RlcnMoZm9yZW5hbWUyKSk7XG4gIH1cblxuICBhZGRTdXJuYW1lKHN0cmluZykge1xuICAgIHRoaXMuYWRkU2VhcmNoUGFyYW1ldGVyKFwic3VybmFtZVwiLCBXVFNfU3RyaW5nLnJlbW92ZUV4dGVuZGVkQXNjaWlDaGFyYWN0ZXJzKHN0cmluZykpO1xuICB9XG5cbiAgYWRkTW90aGVyc1N1cm5hbWUoc3RyaW5nKSB7XG4gICAgaWYgKHN0cmluZyAhPSBcIi1cIikge1xuICAgICAgdGhpcy5hZGRTZWFyY2hQYXJhbWV0ZXIoXCJtb3RoZXJzc3VybmFtZVwiLCBXVFNfU3RyaW5nLnJlbW92ZUV4dGVuZGVkQXNjaWlDaGFyYWN0ZXJzKHN0cmluZykpO1xuICAgIH1cbiAgfVxuXG4gIGFkZFllYXIoc3RyaW5nKSB7XG4gICAgdGhpcy5hZGRTZWFyY2hQYXJhbWV0ZXIoXCJ5ZWFyXCIsIHN0cmluZyk7XG4gIH1cblxuICBhZGRZZWFyUmFuZ2Uoc3RyaW5nKSB7XG4gICAgdGhpcy5hZGRTZWFyY2hQYXJhbWV0ZXIoXCJyYW5nZVwiLCBzdHJpbmcpO1xuICB9XG5cbiAgYWRkQWdlKHN0cmluZykge1xuICAgIHRoaXMuYWRkU2VhcmNoUGFyYW1ldGVyKFwiYWdlXCIsIHN0cmluZyk7XG4gIH1cblxuICBhZGRBZ2VSYW5nZShzdHJpbmcpIHtcbiAgICB0aGlzLmFkZFNlYXJjaFBhcmFtZXRlcihcImFnZXJhbmdlXCIsIHN0cmluZyk7XG4gIH1cblxuICBhZGRHZW5kZXJNYWxlKCkge1xuICAgIHRoaXMuYWRkU2VhcmNoVGVybShcImdlbmRlcj1NXCIpO1xuICB9XG5cbiAgYWRkR2VuZGVyRmVtYWxlKCkge1xuICAgIHRoaXMuYWRkU2VhcmNoVGVybShcImdlbmRlcj1GXCIpO1xuICB9XG5cbiAgYWRkUXVhcnRlcihzdHJpbmcpIHtcbiAgICB0aGlzLmFkZFNlYXJjaFBhcmFtZXRlcihcInF1YXJ0ZXJcIiwgc3RyaW5nKTtcbiAgfVxuXG4gIGFkZE1vbnRoKHN0cmluZykge1xuICAgIHRoaXMuYWRkU2VhcmNoUGFyYW1ldGVyKFwibW9udGhcIiwgc3RyaW5nKTtcbiAgfVxuXG4gIGFkZERpc3RyaWN0KHN0cmluZykge1xuICAgIHRoaXMuYWRkU2VhcmNoUGFyYW1ldGVyKFwiZGlzdHJpY3RcIiwgc3RyaW5nKTtcbiAgfVxuXG4gIGFkZFZvbHVtZShzdHJpbmcpIHtcbiAgICB0aGlzLmFkZFNlYXJjaFBhcmFtZXRlcihcInZvbHVtZVwiLCBzdHJpbmcpO1xuICB9XG5cbiAgYWRkUGFnZShzdHJpbmcpIHtcbiAgICB0aGlzLmFkZFNlYXJjaFBhcmFtZXRlcihcInBhZ2VcIiwgc3RyaW5nKTtcbiAgfVxuXG4gIGFkZFJlZ2lzdGVyKHN0cmluZykge1xuICAgIHRoaXMuYWRkU2VhcmNoUGFyYW1ldGVyKFwicmVnXCIsIHN0cmluZyk7XG4gIH1cblxuICBnZXRVcmkoKSB7XG4gICAgcmV0dXJuIHRoaXMudXJpO1xuICB9XG59XG5cbmV4cG9ydCB7IEdyb1VyaUJ1aWxkZXIgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./extension/site/gro/core/gro_uri_builder.mjs\n");

/***/ }),

/***/ "./extension/site/np/core/np_options.mjs":
/*!***********************************************!*\
  !*** ./extension/site/np/core/np_options.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/core/options/options_registry.mjs */ \"./extension/base/core/options/options_registry.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\nconst searchOptionsGroup = {\n  category: \"search\",\n  subcategory: \"np\",\n  tab: \"search\",\n  subsection: \"np\",\n  subheading: \"parameters\",\n  options: [],\n};\n\nconst citationOptionsGroup = {\n  category: \"citation\",\n  subcategory: \"np\",\n  tab: \"citation\",\n  subsection: \"np\",\n  options: [],\n};\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"search\", \"np\", \"Newspapers.com\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSiteSearchPopupOptionsGroup)(\"np\", 4, 4);\n// registerSubheadingForOptions(\"search\", \"np\", \"parameters\", \"Search Parameters\");\n// registerOptionsGroup(searchOptionsGroup);\n// registerSubsectionForOptions(\"citation\", \"np\", \"Newspapers.com\");\n// registerOptionsGroup(citationOptionsGroup);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb24vc2l0ZS9ucC9jb3JlL25wX29wdGlvbnMubWpzLmpzIiwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQU95RDs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxR0FBNEI7QUFDNUIsNEdBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQ2l0YXRpb25FeHRyYWN0b3IvLi9leHRlbnNpb24vc2l0ZS9ucC9jb3JlL25wX29wdGlvbnMubWpzPzA5Y2QiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBSb2JlcnQgTSBQYXZleVxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQge1xuICByZWdpc3RlclN1YnNlY3Rpb25Gb3JPcHRpb25zLFxuICByZWdpc3RlclN1YmhlYWRpbmdGb3JPcHRpb25zLFxuICByZWdpc3Rlck9wdGlvbnNHcm91cCxcbiAgcmVnaXN0ZXJTaXRlU2VhcmNoUG9wdXBPcHRpb25zR3JvdXAsXG59IGZyb20gXCIuLi8uLi8uLi9iYXNlL2NvcmUvb3B0aW9ucy9vcHRpb25zX3JlZ2lzdHJ5Lm1qc1wiO1xuXG5jb25zdCBzZWFyY2hPcHRpb25zR3JvdXAgPSB7XG4gIGNhdGVnb3J5OiBcInNlYXJjaFwiLFxuICBzdWJjYXRlZ29yeTogXCJucFwiLFxuICB0YWI6IFwic2VhcmNoXCIsXG4gIHN1YnNlY3Rpb246IFwibnBcIixcbiAgc3ViaGVhZGluZzogXCJwYXJhbWV0ZXJzXCIsXG4gIG9wdGlvbnM6IFtdLFxufTtcblxuY29uc3QgY2l0YXRpb25PcHRpb25zR3JvdXAgPSB7XG4gIGNhdGVnb3J5OiBcImNpdGF0aW9uXCIsXG4gIHN1YmNhdGVnb3J5OiBcIm5wXCIsXG4gIHRhYjogXCJjaXRhdGlvblwiLFxuICBzdWJzZWN0aW9uOiBcIm5wXCIsXG4gIG9wdGlvbnM6IFtdLFxufTtcblxucmVnaXN0ZXJTdWJzZWN0aW9uRm9yT3B0aW9ucyhcInNlYXJjaFwiLCBcIm5wXCIsIFwiTmV3c3BhcGVycy5jb21cIik7XG5yZWdpc3RlclNpdGVTZWFyY2hQb3B1cE9wdGlvbnNHcm91cChcIm5wXCIsIDQsIDQpO1xuLy8gcmVnaXN0ZXJTdWJoZWFkaW5nRm9yT3B0aW9ucyhcInNlYXJjaFwiLCBcIm5wXCIsIFwicGFyYW1ldGVyc1wiLCBcIlNlYXJjaCBQYXJhbWV0ZXJzXCIpO1xuLy8gcmVnaXN0ZXJPcHRpb25zR3JvdXAoc2VhcmNoT3B0aW9uc0dyb3VwKTtcbi8vIHJlZ2lzdGVyU3Vic2VjdGlvbkZvck9wdGlvbnMoXCJjaXRhdGlvblwiLCBcIm5wXCIsIFwiTmV3c3BhcGVycy5jb21cIik7XG4vLyByZWdpc3Rlck9wdGlvbnNHcm91cChjaXRhdGlvbk9wdGlvbnNHcm91cCk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./extension/site/np/core/np_options.mjs\n");

/***/ }),

/***/ "./extension/site/scotp/core/scotp_options.mjs":
/*!*****************************************************!*\
  !*** ./extension/site/scotp/core/scotp_options.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/core/options/options_registry.mjs */ \"./extension/base/core/options/options_registry.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\nconst searchOptionsGroup = {\n  category: \"search\",\n  subcategory: \"scotp\",\n  tab: \"search\",\n  subsection: \"scotp\",\n  subheading: \"parameters\",\n  options: [\n    {\n      optionName: \"surnameSoundex\",\n      type: \"checkbox\",\n      label: \"Use 'Phonetic matching' search option for surname\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"forenameSoundex\",\n      type: \"checkbox\",\n      label: \"Use 'Phonetic matching' search option for forename\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"parentNameSoundex\",\n      type: \"checkbox\",\n      label: \"Use 'Phonetic matching' search option for parent names\",\n      defaultValue: true,\n    },\n    {\n      optionName: \"birthYearExactness\",\n      type: \"select\",\n      label: \"Search exactness to use for birth year\",\n      values: [\n        { value: \"auto\", text: \"Set automatically based on source\" },\n        { value: 0, text: \"Exact year only\" },\n        { value: 1, text: \"+/- 1 years\" },\n        { value: 2, text: \"+/- 2 years\" },\n        { value: 5, text: \"+/- 5 years\" },\n        { value: 10, text: \"+/- 10 years\" },\n      ],\n      defaultValue: \"auto\",\n    },\n    {\n      optionName: \"deathYearExactness\",\n      type: \"select\",\n      label: \"Search exactness to use for death year\",\n      values: [\n        { value: \"auto\", text: \"Set automatically based on source\" },\n        { value: 0, text: \"Exact year only\" },\n        { value: 1, text: \"+/- 1 years\" },\n        { value: 2, text: \"+/- 2 years\" },\n        { value: 5, text: \"+/- 5 years\" },\n        { value: 10, text: \"+/- 10 years\" },\n      ],\n      defaultValue: \"auto\",\n    },\n    {\n      optionName: \"marriageYearExactness\",\n      type: \"select\",\n      label: \"Search exactness to use for marriage year\",\n      values: [\n        { value: \"auto\", text: \"Set automatically based on source\" },\n        { value: 0, text: \"Exact year only\" },\n        { value: 1, text: \"+/- 1 years\" },\n        { value: 2, text: \"+/- 2 years\" },\n        { value: 5, text: \"+/- 5 years\" },\n        { value: 10, text: \"+/- 10 years\" },\n      ],\n      defaultValue: \"auto\",\n    },\n    {\n      optionName: \"ageExactness\",\n      type: \"select\",\n      label: \"Search exactness to use for age in census\",\n      values: [\n        { value: \"auto\", text: \"Set automatically based on source\" },\n        { value: 0, text: \"Exact year only\" },\n        { value: 1, text: \"+/- 1 years\" },\n        { value: 2, text: \"+/- 2 years\" },\n        { value: 5, text: \"+/- 5 years\" },\n        { value: 10, text: \"+/- 10 years\" },\n      ],\n      defaultValue: \"auto\",\n    },\n  ],\n};\n\nconst citationOptionsGroup = {\n  category: \"citation\",\n  subcategory: \"scotp\",\n  tab: \"citation\",\n  subsection: \"scotp\",\n  options: [\n    {\n      optionName: \"dataStyle\",\n      type: \"select\",\n      label: \"Include record data at end of citation as\",\n      values: [\n        { value: \"none\", text: \"Do not include data\" },\n        {\n          value: \"string\",\n          text: \"Sentence (fall back to list if no sentence)\",\n        },\n        { value: \"list\", text: \"List of field names/values\" },\n        { value: \"table\", text: \"Table of field names/values\" },\n      ],\n      defaultValue: \"string\",\n      unitTestValue: \"string\",\n    },\n    {\n      optionName: \"urlStyle\",\n      type: \"select\",\n      label: \"Include Scotlands People URL as\",\n      values: [\n        {\n          value: \"visible\",\n          text: \"Just https://www.scotlandspeople.gov.uk/ as a visible URL\",\n        },\n        {\n          value: \"base\",\n          text: \"Just https://www.scotlandspeople.gov.uk/ as a WikiTree external link\",\n        },\n        {\n          value: \"original\",\n          text: \"The search URL used on the page the citation was created on\",\n        },\n        {\n          value: \"created\",\n          text: \"A search URL created by Sourcer to try to just get the one correct result\",\n        },\n        {\n          value: \"best\",\n          text: \"A search URL created by Sourcer unless the current page one had only one result\",\n        },\n        {\n          value: \"short\",\n          text: \"A shorter search URL created by Sourcer that avoids the verbose search parameters\",\n        },\n      ],\n      defaultValue: \"best\",\n      unitTestValue: \"created\",\n    },\n    {\n      optionName: \"databaseTitle\",\n      type: \"select\",\n      label: \"Get the text for the database/collection title from\",\n      values: [\n        {\n          value: \"nrs\",\n          text: \"The National Records of Scotland collection name\",\n        },\n        { value: \"header\", text: \"The heading of the search results page\" },\n      ],\n      defaultValue: \"nrs\",\n      unitTestValue: \"nrs\",\n    },\n    {\n      optionName: \"urlIncludeRef\",\n      type: \"checkbox\",\n      label: \"Include a '&ref=' query in search URL. It will only have effect for Sourcer users.\",\n      defaultValue: true,\n    },\n  ],\n};\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"search\", \"scotp\", \"ScotlandsPeople\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSiteSearchPopupOptionsGroup)(\"scotp\", 7, 7);\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubheadingForOptions)(\"search\", \"scotp\", \"parameters\", \"Search Parameters\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(searchOptionsGroup);\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"citation\", \"scotp\", \"ScotlandsPeople\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(citationOptionsGroup);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extension/site/scotp/core/scotp_options.mjs\n");

/***/ }),

/***/ "./extension/site/wikitree/core/wikitree_options.mjs":
/*!***********************************************************!*\
  !*** ./extension/site/wikitree/core/wikitree_options.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/core/options/options_registry.mjs */ \"./extension/base/core/options/options_registry.mjs\");\n/*\nMIT License\n\nCopyright (c) 2020 Robert M Pavey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n\nconst searchOptionsGroup = {\n  category: \"search\",\n  subcategory: \"wikitree\",\n  tab: \"search\",\n  subsection: \"wikitree\",\n  subheading: \"parameters\",\n  options: [\n    {\n      optionName: \"dateExactness\",\n      type: \"select\",\n      label: \"Date range for matching\",\n      values: [\n        { value: \"auto\", text: \"Set automatically based on source\" },\n        { value: \"exactDate\", text: \"Match exact date\" },\n        { value: \"exactYear\", text: \"Match year\" },\n        { value: \"2\", text: \"+/- 2 years\" },\n        { value: \"12\", text: \"+/- 12 years\" },\n        { value: \"30\", text: \"+/- 30 years\" },\n      ],\n      defaultValue: \"auto\",\n    },\n  ],\n};\n\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubsectionForOptions)(\"search\", \"wikitree\", \"WikiTree\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSiteSearchPopupOptionsGroup)(\"wikitree\", 6, 6);\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerSubheadingForOptions)(\"search\", \"wikitree\", \"parameters\", \"Search Parameters\");\n(0,_base_core_options_options_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.registerOptionsGroup)(searchOptionsGroup);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb24vc2l0ZS93aWtpdHJlZS9jb3JlL3dpa2l0cmVlX29wdGlvbnMubWpzLmpzIiwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQU95RDs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSwwREFBMEQ7QUFDcEUsVUFBVSw4Q0FBOEM7QUFDeEQsVUFBVSx3Q0FBd0M7QUFDbEQsVUFBVSxpQ0FBaUM7QUFDM0MsVUFBVSxtQ0FBbUM7QUFDN0MsVUFBVSxtQ0FBbUM7QUFDN0M7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLHFHQUE0QjtBQUM1Qiw0R0FBbUM7QUFDbkMscUdBQTRCO0FBQzVCLDZGQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL0NpdGF0aW9uRXh0cmFjdG9yLy4vZXh0ZW5zaW9uL3NpdGUvd2lraXRyZWUvY29yZS93aWtpdHJlZV9vcHRpb25zLm1qcz9iMzQxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjAgUm9iZXJ0IE0gUGF2ZXlcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IHtcbiAgcmVnaXN0ZXJTdWJzZWN0aW9uRm9yT3B0aW9ucyxcbiAgcmVnaXN0ZXJTdWJoZWFkaW5nRm9yT3B0aW9ucyxcbiAgcmVnaXN0ZXJPcHRpb25zR3JvdXAsXG4gIHJlZ2lzdGVyU2l0ZVNlYXJjaFBvcHVwT3B0aW9uc0dyb3VwLFxufSBmcm9tIFwiLi4vLi4vLi4vYmFzZS9jb3JlL29wdGlvbnMvb3B0aW9uc19yZWdpc3RyeS5tanNcIjtcblxuY29uc3Qgc2VhcmNoT3B0aW9uc0dyb3VwID0ge1xuICBjYXRlZ29yeTogXCJzZWFyY2hcIixcbiAgc3ViY2F0ZWdvcnk6IFwid2lraXRyZWVcIixcbiAgdGFiOiBcInNlYXJjaFwiLFxuICBzdWJzZWN0aW9uOiBcIndpa2l0cmVlXCIsXG4gIHN1YmhlYWRpbmc6IFwicGFyYW1ldGVyc1wiLFxuICBvcHRpb25zOiBbXG4gICAge1xuICAgICAgb3B0aW9uTmFtZTogXCJkYXRlRXhhY3RuZXNzXCIsXG4gICAgICB0eXBlOiBcInNlbGVjdFwiLFxuICAgICAgbGFiZWw6IFwiRGF0ZSByYW5nZSBmb3IgbWF0Y2hpbmdcIixcbiAgICAgIHZhbHVlczogW1xuICAgICAgICB7IHZhbHVlOiBcImF1dG9cIiwgdGV4dDogXCJTZXQgYXV0b21hdGljYWxseSBiYXNlZCBvbiBzb3VyY2VcIiB9LFxuICAgICAgICB7IHZhbHVlOiBcImV4YWN0RGF0ZVwiLCB0ZXh0OiBcIk1hdGNoIGV4YWN0IGRhdGVcIiB9LFxuICAgICAgICB7IHZhbHVlOiBcImV4YWN0WWVhclwiLCB0ZXh0OiBcIk1hdGNoIHllYXJcIiB9LFxuICAgICAgICB7IHZhbHVlOiBcIjJcIiwgdGV4dDogXCIrLy0gMiB5ZWFyc1wiIH0sXG4gICAgICAgIHsgdmFsdWU6IFwiMTJcIiwgdGV4dDogXCIrLy0gMTIgeWVhcnNcIiB9LFxuICAgICAgICB7IHZhbHVlOiBcIjMwXCIsIHRleHQ6IFwiKy8tIDMwIHllYXJzXCIgfSxcbiAgICAgIF0sXG4gICAgICBkZWZhdWx0VmFsdWU6IFwiYXV0b1wiLFxuICAgIH0sXG4gIF0sXG59O1xuXG5yZWdpc3RlclN1YnNlY3Rpb25Gb3JPcHRpb25zKFwic2VhcmNoXCIsIFwid2lraXRyZWVcIiwgXCJXaWtpVHJlZVwiKTtcbnJlZ2lzdGVyU2l0ZVNlYXJjaFBvcHVwT3B0aW9uc0dyb3VwKFwid2lraXRyZWVcIiwgNiwgNik7XG5yZWdpc3RlclN1YmhlYWRpbmdGb3JPcHRpb25zKFwic2VhcmNoXCIsIFwid2lraXRyZWVcIiwgXCJwYXJhbWV0ZXJzXCIsIFwiU2VhcmNoIFBhcmFtZXRlcnNcIik7XG5yZWdpc3Rlck9wdGlvbnNHcm91cChzZWFyY2hPcHRpb25zR3JvdXApO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./extension/site/wikitree/core/wikitree_options.mjs\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./app/extract_citation.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});